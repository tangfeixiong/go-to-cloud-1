// Code generated by protoc-gen-gogo.
// source: paas/ci/openshift/manage_service.proto
// DO NOT EDIT!

/*
	Package openshift is a generated protocol buffer package.

	It is generated from these files:
		paas/ci/openshift/manage_service.proto
		paas/ci/openshift/service.proto

	It has these top-level messages:
		CreateOriginProjectRequest
		CreateOriginProjectResponse
		CreateOriginProjectArbitraryRequest
		CreateOriginProjectArbitraryResponse
		FindProjectRequest
		FindProjectResponse
		EnterWorkspaceRequest
		EnterWorkspaceResponse
		LeaveWorkspaceRequest
		LeaveWorkspaceResponse
		CreateProjectRequest
		CreateProjectResponse
		LookupProjectsRequest
		LookupProjectsResponse
		OpenProjectRequest
		OpenProjectResponse
		DeleteProjectRequest
		DeleteProjectResponse
		BuildDockerImageRequest
		GitRepo
*/
package openshift

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type CreateOriginProjectRequest struct {
	Name       string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Finalizers []string `protobuf:"bytes,2,rep,name=finalizers" json:"finalizers,omitempty"`
}

func (m *CreateOriginProjectRequest) Reset()         { *m = CreateOriginProjectRequest{} }
func (m *CreateOriginProjectRequest) String() string { return proto.CompactTextString(m) }
func (*CreateOriginProjectRequest) ProtoMessage()    {}
func (*CreateOriginProjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorManageService, []int{0}
}

type CreateOriginProjectResponse struct {
	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Phase string `protobuf:"bytes,2,opt,name=phase,proto3" json:"phase,omitempty"`
}

func (m *CreateOriginProjectResponse) Reset()         { *m = CreateOriginProjectResponse{} }
func (m *CreateOriginProjectResponse) String() string { return proto.CompactTextString(m) }
func (*CreateOriginProjectResponse) ProtoMessage()    {}
func (*CreateOriginProjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorManageService, []int{1}
}

type CreateOriginProjectArbitraryRequest struct {
	Odefv1RawData []byte `protobuf:"bytes,1,opt,name=odefv1RawData,proto3" json:"odefv1RawData,omitempty"`
}

func (m *CreateOriginProjectArbitraryRequest) Reset()         { *m = CreateOriginProjectArbitraryRequest{} }
func (m *CreateOriginProjectArbitraryRequest) String() string { return proto.CompactTextString(m) }
func (*CreateOriginProjectArbitraryRequest) ProtoMessage()    {}
func (*CreateOriginProjectArbitraryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorManageService, []int{2}
}

type CreateOriginProjectArbitraryResponse struct {
	Odefv1RawData []byte `protobuf:"bytes,1,opt,name=odefv1RawData,proto3" json:"odefv1RawData,omitempty"`
}

func (m *CreateOriginProjectArbitraryResponse) Reset()         { *m = CreateOriginProjectArbitraryResponse{} }
func (m *CreateOriginProjectArbitraryResponse) String() string { return proto.CompactTextString(m) }
func (*CreateOriginProjectArbitraryResponse) ProtoMessage()    {}
func (*CreateOriginProjectArbitraryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorManageService, []int{3}
}

type FindProjectRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *FindProjectRequest) Reset()                    { *m = FindProjectRequest{} }
func (m *FindProjectRequest) String() string            { return proto.CompactTextString(m) }
func (*FindProjectRequest) ProtoMessage()               {}
func (*FindProjectRequest) Descriptor() ([]byte, []int) { return fileDescriptorManageService, []int{4} }

type FindProjectResponse struct {
	Odefv1RawData []byte `protobuf:"bytes,1,opt,name=odefv1RawData,proto3" json:"odefv1RawData,omitempty"`
}

func (m *FindProjectResponse) Reset()                    { *m = FindProjectResponse{} }
func (m *FindProjectResponse) String() string            { return proto.CompactTextString(m) }
func (*FindProjectResponse) ProtoMessage()               {}
func (*FindProjectResponse) Descriptor() ([]byte, []int) { return fileDescriptorManageService, []int{5} }

func init() {
	proto.RegisterType((*CreateOriginProjectRequest)(nil), "paas.ci.openshift.CreateOriginProjectRequest")
	proto.RegisterType((*CreateOriginProjectResponse)(nil), "paas.ci.openshift.CreateOriginProjectResponse")
	proto.RegisterType((*CreateOriginProjectArbitraryRequest)(nil), "paas.ci.openshift.CreateOriginProjectArbitraryRequest")
	proto.RegisterType((*CreateOriginProjectArbitraryResponse)(nil), "paas.ci.openshift.CreateOriginProjectArbitraryResponse")
	proto.RegisterType((*FindProjectRequest)(nil), "paas.ci.openshift.FindProjectRequest")
	proto.RegisterType((*FindProjectResponse)(nil), "paas.ci.openshift.FindProjectResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for SimpleManageService service

type SimpleManageServiceClient interface {
	CreateOriginProject(ctx context.Context, in *CreateOriginProjectRequest, opts ...grpc.CallOption) (*CreateOriginProjectResponse, error)
	CreateOriginProjectArbitrary(ctx context.Context, in *CreateOriginProjectArbitraryRequest, opts ...grpc.CallOption) (*CreateOriginProjectArbitraryResponse, error)
	FindProject(ctx context.Context, in *FindProjectRequest, opts ...grpc.CallOption) (*FindProjectResponse, error)
}

type simpleManageServiceClient struct {
	cc *grpc.ClientConn
}

func NewSimpleManageServiceClient(cc *grpc.ClientConn) SimpleManageServiceClient {
	return &simpleManageServiceClient{cc}
}

func (c *simpleManageServiceClient) CreateOriginProject(ctx context.Context, in *CreateOriginProjectRequest, opts ...grpc.CallOption) (*CreateOriginProjectResponse, error) {
	out := new(CreateOriginProjectResponse)
	err := grpc.Invoke(ctx, "/paas.ci.openshift.SimpleManageService/CreateOriginProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleManageServiceClient) CreateOriginProjectArbitrary(ctx context.Context, in *CreateOriginProjectArbitraryRequest, opts ...grpc.CallOption) (*CreateOriginProjectArbitraryResponse, error) {
	out := new(CreateOriginProjectArbitraryResponse)
	err := grpc.Invoke(ctx, "/paas.ci.openshift.SimpleManageService/CreateOriginProjectArbitrary", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleManageServiceClient) FindProject(ctx context.Context, in *FindProjectRequest, opts ...grpc.CallOption) (*FindProjectResponse, error) {
	out := new(FindProjectResponse)
	err := grpc.Invoke(ctx, "/paas.ci.openshift.SimpleManageService/FindProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SimpleManageService service

type SimpleManageServiceServer interface {
	CreateOriginProject(context.Context, *CreateOriginProjectRequest) (*CreateOriginProjectResponse, error)
	CreateOriginProjectArbitrary(context.Context, *CreateOriginProjectArbitraryRequest) (*CreateOriginProjectArbitraryResponse, error)
	FindProject(context.Context, *FindProjectRequest) (*FindProjectResponse, error)
}

func RegisterSimpleManageServiceServer(s *grpc.Server, srv SimpleManageServiceServer) {
	s.RegisterService(&_SimpleManageService_serviceDesc, srv)
}

func _SimpleManageService_CreateOriginProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CreateOriginProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SimpleManageServiceServer).CreateOriginProject(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _SimpleManageService_CreateOriginProjectArbitrary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CreateOriginProjectArbitraryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SimpleManageServiceServer).CreateOriginProjectArbitrary(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _SimpleManageService_FindProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(FindProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SimpleManageServiceServer).FindProject(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _SimpleManageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "paas.ci.openshift.SimpleManageService",
	HandlerType: (*SimpleManageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOriginProject",
			Handler:    _SimpleManageService_CreateOriginProject_Handler,
		},
		{
			MethodName: "CreateOriginProjectArbitrary",
			Handler:    _SimpleManageService_CreateOriginProjectArbitrary_Handler,
		},
		{
			MethodName: "FindProject",
			Handler:    _SimpleManageService_FindProject_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func (m *CreateOriginProjectRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateOriginProjectRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintManageService(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Finalizers) > 0 {
		for _, s := range m.Finalizers {
			data[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	return i, nil
}

func (m *CreateOriginProjectResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateOriginProjectResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintManageService(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	if len(m.Phase) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintManageService(data, i, uint64(len(m.Phase)))
		i += copy(data[i:], m.Phase)
	}
	return i, nil
}

func (m *CreateOriginProjectArbitraryRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateOriginProjectArbitraryRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Odefv1RawData != nil {
		if len(m.Odefv1RawData) > 0 {
			data[i] = 0xa
			i++
			i = encodeVarintManageService(data, i, uint64(len(m.Odefv1RawData)))
			i += copy(data[i:], m.Odefv1RawData)
		}
	}
	return i, nil
}

func (m *CreateOriginProjectArbitraryResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateOriginProjectArbitraryResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Odefv1RawData != nil {
		if len(m.Odefv1RawData) > 0 {
			data[i] = 0xa
			i++
			i = encodeVarintManageService(data, i, uint64(len(m.Odefv1RawData)))
			i += copy(data[i:], m.Odefv1RawData)
		}
	}
	return i, nil
}

func (m *FindProjectRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *FindProjectRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintManageService(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	return i, nil
}

func (m *FindProjectResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *FindProjectResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Odefv1RawData != nil {
		if len(m.Odefv1RawData) > 0 {
			data[i] = 0xa
			i++
			i = encodeVarintManageService(data, i, uint64(len(m.Odefv1RawData)))
			i += copy(data[i:], m.Odefv1RawData)
		}
	}
	return i, nil
}

func encodeFixed64ManageService(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32ManageService(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintManageService(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *CreateOriginProjectRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovManageService(uint64(l))
	}
	if len(m.Finalizers) > 0 {
		for _, s := range m.Finalizers {
			l = len(s)
			n += 1 + l + sovManageService(uint64(l))
		}
	}
	return n
}

func (m *CreateOriginProjectResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovManageService(uint64(l))
	}
	l = len(m.Phase)
	if l > 0 {
		n += 1 + l + sovManageService(uint64(l))
	}
	return n
}

func (m *CreateOriginProjectArbitraryRequest) Size() (n int) {
	var l int
	_ = l
	if m.Odefv1RawData != nil {
		l = len(m.Odefv1RawData)
		if l > 0 {
			n += 1 + l + sovManageService(uint64(l))
		}
	}
	return n
}

func (m *CreateOriginProjectArbitraryResponse) Size() (n int) {
	var l int
	_ = l
	if m.Odefv1RawData != nil {
		l = len(m.Odefv1RawData)
		if l > 0 {
			n += 1 + l + sovManageService(uint64(l))
		}
	}
	return n
}

func (m *FindProjectRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovManageService(uint64(l))
	}
	return n
}

func (m *FindProjectResponse) Size() (n int) {
	var l int
	_ = l
	if m.Odefv1RawData != nil {
		l = len(m.Odefv1RawData)
		if l > 0 {
			n += 1 + l + sovManageService(uint64(l))
		}
	}
	return n
}

func sovManageService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozManageService(x uint64) (n int) {
	return sovManageService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateOriginProjectRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManageService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOriginProjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOriginProjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManageService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManageService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finalizers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManageService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManageService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Finalizers = append(m.Finalizers, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManageService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManageService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOriginProjectResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManageService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOriginProjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOriginProjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManageService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManageService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManageService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManageService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phase = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManageService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManageService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOriginProjectArbitraryRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManageService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOriginProjectArbitraryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOriginProjectArbitraryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Odefv1RawData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManageService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthManageService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Odefv1RawData = append(m.Odefv1RawData[:0], data[iNdEx:postIndex]...)
			if m.Odefv1RawData == nil {
				m.Odefv1RawData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManageService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManageService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOriginProjectArbitraryResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManageService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOriginProjectArbitraryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOriginProjectArbitraryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Odefv1RawData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManageService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthManageService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Odefv1RawData = append(m.Odefv1RawData[:0], data[iNdEx:postIndex]...)
			if m.Odefv1RawData == nil {
				m.Odefv1RawData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManageService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManageService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindProjectRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManageService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindProjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindProjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManageService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManageService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManageService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManageService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindProjectResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManageService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindProjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindProjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Odefv1RawData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManageService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthManageService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Odefv1RawData = append(m.Odefv1RawData[:0], data[iNdEx:postIndex]...)
			if m.Odefv1RawData == nil {
				m.Odefv1RawData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManageService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManageService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipManageService(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowManageService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowManageService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowManageService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthManageService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowManageService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipManageService(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthManageService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowManageService   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorManageService = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x52, 0x2b, 0x48, 0x4c, 0x2c,
	0xd6, 0x4f, 0xce, 0xd4, 0xcf, 0x2f, 0x48, 0xcd, 0x2b, 0xce, 0xc8, 0x4c, 0x2b, 0xd1, 0xcf, 0x4d,
	0xcc, 0x4b, 0x4c, 0x4f, 0x8d, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x12, 0x04, 0xa9, 0xd3, 0x4b, 0xce, 0xd4, 0x83, 0xab, 0x53, 0x0a, 0xe0, 0x92,
	0x72, 0x2e, 0x4a, 0x4d, 0x2c, 0x49, 0xf5, 0x2f, 0xca, 0x4c, 0xcf, 0xcc, 0x0b, 0x28, 0xca, 0xcf,
	0x4a, 0x4d, 0x2e, 0x09, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe2, 0x62, 0xc9, 0x4b,
	0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x85, 0xe4, 0xb8, 0xb8, 0xd2,
	0x32, 0xf3, 0x12, 0x73, 0x32, 0xab, 0x52, 0x8b, 0x8a, 0x25, 0x98, 0x14, 0x98, 0x81, 0x32, 0x48,
	0x22, 0x4a, 0xce, 0x5c, 0xd2, 0x58, 0x4d, 0x2c, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x15, 0xe2, 0xe3,
	0x62, 0xca, 0x4c, 0x81, 0x1a, 0x08, 0x64, 0x09, 0x89, 0x70, 0xb1, 0x16, 0x64, 0x24, 0x16, 0xa7,
	0x02, 0x4d, 0x02, 0x09, 0x41, 0x38, 0x4a, 0xde, 0x5c, 0xca, 0x58, 0x0c, 0x71, 0x2c, 0x4a, 0xca,
	0x2c, 0x29, 0x4a, 0x2c, 0xaa, 0x84, 0xb9, 0x4f, 0x85, 0x8b, 0x37, 0x3f, 0x25, 0x35, 0xad, 0xcc,
	0x30, 0x28, 0xb1, 0xdc, 0x25, 0xb1, 0x24, 0x11, 0x6c, 0x2e, 0x4f, 0x10, 0xaa, 0xa0, 0x92, 0x0f,
	0x97, 0x0a, 0x7e, 0xc3, 0xa0, 0x4e, 0x23, 0xce, 0x34, 0x0d, 0x2e, 0x21, 0xb7, 0xcc, 0xbc, 0x14,
	0xc2, 0x21, 0xa5, 0x64, 0xcd, 0x25, 0x8c, 0xa2, 0x92, 0x14, 0x6b, 0x8c, 0x7e, 0x33, 0x71, 0x09,
	0x07, 0x67, 0xe6, 0x16, 0xe4, 0xa4, 0xfa, 0x82, 0xa3, 0x32, 0x18, 0x12, 0x93, 0x42, 0x25, 0x5c,
	0xc2, 0x58, 0x3c, 0x23, 0xa4, 0xab, 0x87, 0x11, 0xb7, 0x7a, 0xb8, 0x23, 0x56, 0x4a, 0x8f, 0x58,
	0xe5, 0x50, 0x37, 0xf7, 0x33, 0x72, 0xc9, 0xe0, 0x0b, 0x43, 0x21, 0x33, 0xe2, 0x0c, 0x44, 0x8f,
	0x41, 0x29, 0x73, 0x92, 0xf5, 0x41, 0x5d, 0x14, 0xc3, 0xc5, 0x8d, 0x14, 0xb8, 0x42, 0xaa, 0x58,
	0xcc, 0xc1, 0x8c, 0x26, 0x29, 0x35, 0x42, 0xca, 0x20, 0xa6, 0x3b, 0x49, 0x9f, 0x78, 0x24, 0xc7,
	0x78, 0x01, 0x88, 0x1f, 0x00, 0xf1, 0x8c, 0xc7, 0x72, 0x0c, 0x51, 0x9c, 0x70, 0x0d, 0x49, 0x6c,
	0xe0, 0xdc, 0x64, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xca, 0xd7, 0xf7, 0x75, 0x77, 0x03, 0x00,
	0x00,
}
