// Code generated by protoc-gen-gogo.
// source: paas/ci/openshift/service.proto
// DO NOT EDIT!

package openshift

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EnterWorkspaceRequest struct {
	Username    string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Credentials string `protobuf:"bytes,2,opt,name=credentials,proto3" json:"credentials,omitempty"`
}

func (m *EnterWorkspaceRequest) Reset()                    { *m = EnterWorkspaceRequest{} }
func (m *EnterWorkspaceRequest) String() string            { return proto.CompactTextString(m) }
func (*EnterWorkspaceRequest) ProtoMessage()               {}
func (*EnterWorkspaceRequest) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{0} }

type EnterWorkspaceResponse struct {
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (m *EnterWorkspaceResponse) Reset()                    { *m = EnterWorkspaceResponse{} }
func (m *EnterWorkspaceResponse) String() string            { return proto.CompactTextString(m) }
func (*EnterWorkspaceResponse) ProtoMessage()               {}
func (*EnterWorkspaceResponse) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{1} }

type LeaveWorkspaceRequest struct {
	Username   string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Identifier string `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (m *LeaveWorkspaceRequest) Reset()                    { *m = LeaveWorkspaceRequest{} }
func (m *LeaveWorkspaceRequest) String() string            { return proto.CompactTextString(m) }
func (*LeaveWorkspaceRequest) ProtoMessage()               {}
func (*LeaveWorkspaceRequest) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{2} }

type LeaveWorkspaceResponse struct {
	Flag int64 `protobuf:"varint,1,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (m *LeaveWorkspaceResponse) Reset()                    { *m = LeaveWorkspaceResponse{} }
func (m *LeaveWorkspaceResponse) String() string            { return proto.CompactTextString(m) }
func (*LeaveWorkspaceResponse) ProtoMessage()               {}
func (*LeaveWorkspaceResponse) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{3} }

type CreateProjectRequest struct {
	Identifier  string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	ProjectID   string `protobuf:"bytes,2,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ProjectName string `protobuf:"bytes,3,opt,name=projectName,proto3" json:"projectName,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *CreateProjectRequest) Reset()                    { *m = CreateProjectRequest{} }
func (m *CreateProjectRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateProjectRequest) ProtoMessage()               {}
func (*CreateProjectRequest) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{4} }

type CreateProjectResponse struct {
	ApiVersion  string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	Kind        string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	ProjectJSON []byte `protobuf:"bytes,3,opt,name=projectJSON,proto3" json:"projectJSON,omitempty"`
}

func (m *CreateProjectResponse) Reset()                    { *m = CreateProjectResponse{} }
func (m *CreateProjectResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateProjectResponse) ProtoMessage()               {}
func (*CreateProjectResponse) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{5} }

type LookupProjectsRequest struct {
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (m *LookupProjectsRequest) Reset()                    { *m = LookupProjectsRequest{} }
func (m *LookupProjectsRequest) String() string            { return proto.CompactTextString(m) }
func (*LookupProjectsRequest) ProtoMessage()               {}
func (*LookupProjectsRequest) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{6} }

type LookupProjectsResponse struct {
	ApiVersion   string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	Kind         string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	ProjectsJSON []byte `protobuf:"bytes,3,opt,name=projectsJSON,proto3" json:"projectsJSON,omitempty"`
}

func (m *LookupProjectsResponse) Reset()                    { *m = LookupProjectsResponse{} }
func (m *LookupProjectsResponse) String() string            { return proto.CompactTextString(m) }
func (*LookupProjectsResponse) ProtoMessage()               {}
func (*LookupProjectsResponse) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{7} }

type OpenProjectRequest struct {
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	ProjectID  string `protobuf:"bytes,2,opt,name=projectID,proto3" json:"projectID,omitempty"`
}

func (m *OpenProjectRequest) Reset()                    { *m = OpenProjectRequest{} }
func (m *OpenProjectRequest) String() string            { return proto.CompactTextString(m) }
func (*OpenProjectRequest) ProtoMessage()               {}
func (*OpenProjectRequest) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{8} }

type OpenProjectResponse struct {
	ApiVersion  string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	Kind        string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	ProjectJSON []byte `protobuf:"bytes,3,opt,name=projectJSON,proto3" json:"projectJSON,omitempty"`
}

func (m *OpenProjectResponse) Reset()                    { *m = OpenProjectResponse{} }
func (m *OpenProjectResponse) String() string            { return proto.CompactTextString(m) }
func (*OpenProjectResponse) ProtoMessage()               {}
func (*OpenProjectResponse) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{9} }

type DeleteProjectRequest struct {
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	ProjectID  string `protobuf:"bytes,2,opt,name=projectID,proto3" json:"projectID,omitempty"`
}

func (m *DeleteProjectRequest) Reset()                    { *m = DeleteProjectRequest{} }
func (m *DeleteProjectRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteProjectRequest) ProtoMessage()               {}
func (*DeleteProjectRequest) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{10} }

type DeleteProjectResponse struct {
	Flag int64 `protobuf:"varint,1,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (m *DeleteProjectResponse) Reset()                    { *m = DeleteProjectResponse{} }
func (m *DeleteProjectResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteProjectResponse) ProtoMessage()               {}
func (*DeleteProjectResponse) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{11} }

type BuildDockerImageRequest struct {
	DockerfileContent string `protobuf:"bytes,1,opt,name=dockerfileContent,proto3" json:"dockerfileContent,omitempty"`
	ContextArchive    string `protobuf:"bytes,2,opt,name=contextArchive,proto3" json:"contextArchive,omitempty"`
	Gitrepo           string `protobuf:"bytes,3,opt,name=gitrepo,proto3" json:"gitrepo,omitempty"`
	BinaryStream      string `protobuf:"bytes,4,opt,name=binaryStream,proto3" json:"binaryStream,omitempty"`
}

func (m *BuildDockerImageRequest) Reset()                    { *m = BuildDockerImageRequest{} }
func (m *BuildDockerImageRequest) String() string            { return proto.CompactTextString(m) }
func (*BuildDockerImageRequest) ProtoMessage()               {}
func (*BuildDockerImageRequest) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{12} }

type GitRepo struct {
	Site        string `protobuf:"bytes,1,opt,name=site,proto3" json:"site,omitempty"`
	Uri         string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	Ref         string `protobuf:"bytes,3,opt,name=ref,proto3" json:"ref,omitempty"`
	ContextPath string `protobuf:"bytes,4,opt,name=contextPath,proto3" json:"contextPath,omitempty"`
	DockerFile  string `protobuf:"bytes,5,opt,name=dockerFile,proto3" json:"dockerFile,omitempty"`
}

func (m *GitRepo) Reset()                    { *m = GitRepo{} }
func (m *GitRepo) String() string            { return proto.CompactTextString(m) }
func (*GitRepo) ProtoMessage()               {}
func (*GitRepo) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{13} }

func init() {
	proto.RegisterType((*EnterWorkspaceRequest)(nil), "paas.ci.openshift.EnterWorkspaceRequest")
	proto.RegisterType((*EnterWorkspaceResponse)(nil), "paas.ci.openshift.EnterWorkspaceResponse")
	proto.RegisterType((*LeaveWorkspaceRequest)(nil), "paas.ci.openshift.LeaveWorkspaceRequest")
	proto.RegisterType((*LeaveWorkspaceResponse)(nil), "paas.ci.openshift.LeaveWorkspaceResponse")
	proto.RegisterType((*CreateProjectRequest)(nil), "paas.ci.openshift.CreateProjectRequest")
	proto.RegisterType((*CreateProjectResponse)(nil), "paas.ci.openshift.CreateProjectResponse")
	proto.RegisterType((*LookupProjectsRequest)(nil), "paas.ci.openshift.LookupProjectsRequest")
	proto.RegisterType((*LookupProjectsResponse)(nil), "paas.ci.openshift.LookupProjectsResponse")
	proto.RegisterType((*OpenProjectRequest)(nil), "paas.ci.openshift.OpenProjectRequest")
	proto.RegisterType((*OpenProjectResponse)(nil), "paas.ci.openshift.OpenProjectResponse")
	proto.RegisterType((*DeleteProjectRequest)(nil), "paas.ci.openshift.DeleteProjectRequest")
	proto.RegisterType((*DeleteProjectResponse)(nil), "paas.ci.openshift.DeleteProjectResponse")
	proto.RegisterType((*BuildDockerImageRequest)(nil), "paas.ci.openshift.BuildDockerImageRequest")
	proto.RegisterType((*GitRepo)(nil), "paas.ci.openshift.GitRepo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for SimpleService service

type SimpleServiceClient interface {
	EnterWorkspace(ctx context.Context, in *EnterWorkspaceRequest, opts ...grpc.CallOption) (*EnterWorkspaceResponse, error)
	LeaveWorkspace(ctx context.Context, in *LeaveWorkspaceRequest, opts ...grpc.CallOption) (*LeaveWorkspaceResponse, error)
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
	LookupProjects(ctx context.Context, in *LookupProjectsRequest, opts ...grpc.CallOption) (*LookupProjectsResponse, error)
	OpenProject(ctx context.Context, in *OpenProjectRequest, opts ...grpc.CallOption) (*OpenProjectResponse, error)
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error)
}

type simpleServiceClient struct {
	cc *grpc.ClientConn
}

func NewSimpleServiceClient(cc *grpc.ClientConn) SimpleServiceClient {
	return &simpleServiceClient{cc}
}

func (c *simpleServiceClient) EnterWorkspace(ctx context.Context, in *EnterWorkspaceRequest, opts ...grpc.CallOption) (*EnterWorkspaceResponse, error) {
	out := new(EnterWorkspaceResponse)
	err := grpc.Invoke(ctx, "/paas.ci.openshift.SimpleService/EnterWorkspace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) LeaveWorkspace(ctx context.Context, in *LeaveWorkspaceRequest, opts ...grpc.CallOption) (*LeaveWorkspaceResponse, error) {
	out := new(LeaveWorkspaceResponse)
	err := grpc.Invoke(ctx, "/paas.ci.openshift.SimpleService/LeaveWorkspace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	out := new(CreateProjectResponse)
	err := grpc.Invoke(ctx, "/paas.ci.openshift.SimpleService/CreateProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) LookupProjects(ctx context.Context, in *LookupProjectsRequest, opts ...grpc.CallOption) (*LookupProjectsResponse, error) {
	out := new(LookupProjectsResponse)
	err := grpc.Invoke(ctx, "/paas.ci.openshift.SimpleService/LookupProjects", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) OpenProject(ctx context.Context, in *OpenProjectRequest, opts ...grpc.CallOption) (*OpenProjectResponse, error) {
	out := new(OpenProjectResponse)
	err := grpc.Invoke(ctx, "/paas.ci.openshift.SimpleService/OpenProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error) {
	out := new(DeleteProjectResponse)
	err := grpc.Invoke(ctx, "/paas.ci.openshift.SimpleService/DeleteProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SimpleService service

type SimpleServiceServer interface {
	EnterWorkspace(context.Context, *EnterWorkspaceRequest) (*EnterWorkspaceResponse, error)
	LeaveWorkspace(context.Context, *LeaveWorkspaceRequest) (*LeaveWorkspaceResponse, error)
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	LookupProjects(context.Context, *LookupProjectsRequest) (*LookupProjectsResponse, error)
	OpenProject(context.Context, *OpenProjectRequest) (*OpenProjectResponse, error)
	DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error)
}

func RegisterSimpleServiceServer(s *grpc.Server, srv SimpleServiceServer) {
	s.RegisterService(&_SimpleService_serviceDesc, srv)
}

func _SimpleService_EnterWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(EnterWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SimpleServiceServer).EnterWorkspace(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _SimpleService_LeaveWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(LeaveWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SimpleServiceServer).LeaveWorkspace(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _SimpleService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SimpleServiceServer).CreateProject(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _SimpleService_LookupProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(LookupProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SimpleServiceServer).LookupProjects(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _SimpleService_OpenProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(OpenProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SimpleServiceServer).OpenProject(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _SimpleService_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SimpleServiceServer).DeleteProject(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _SimpleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "paas.ci.openshift.SimpleService",
	HandlerType: (*SimpleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnterWorkspace",
			Handler:    _SimpleService_EnterWorkspace_Handler,
		},
		{
			MethodName: "LeaveWorkspace",
			Handler:    _SimpleService_LeaveWorkspace_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _SimpleService_CreateProject_Handler,
		},
		{
			MethodName: "LookupProjects",
			Handler:    _SimpleService_LookupProjects_Handler,
		},
		{
			MethodName: "OpenProject",
			Handler:    _SimpleService_OpenProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _SimpleService_DeleteProject_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func (m *EnterWorkspaceRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *EnterWorkspaceRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintService(data, i, uint64(len(m.Username)))
		i += copy(data[i:], m.Username)
	}
	if len(m.Credentials) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintService(data, i, uint64(len(m.Credentials)))
		i += copy(data[i:], m.Credentials)
	}
	return i, nil
}

func (m *EnterWorkspaceResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *EnterWorkspaceResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Identifier) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintService(data, i, uint64(len(m.Identifier)))
		i += copy(data[i:], m.Identifier)
	}
	return i, nil
}

func (m *LeaveWorkspaceRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LeaveWorkspaceRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintService(data, i, uint64(len(m.Username)))
		i += copy(data[i:], m.Username)
	}
	if len(m.Identifier) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintService(data, i, uint64(len(m.Identifier)))
		i += copy(data[i:], m.Identifier)
	}
	return i, nil
}

func (m *LeaveWorkspaceResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LeaveWorkspaceResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flag != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintService(data, i, uint64(m.Flag))
	}
	return i, nil
}

func (m *CreateProjectRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateProjectRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Identifier) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintService(data, i, uint64(len(m.Identifier)))
		i += copy(data[i:], m.Identifier)
	}
	if len(m.ProjectID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintService(data, i, uint64(len(m.ProjectID)))
		i += copy(data[i:], m.ProjectID)
	}
	if len(m.ProjectName) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintService(data, i, uint64(len(m.ProjectName)))
		i += copy(data[i:], m.ProjectName)
	}
	if len(m.Description) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintService(data, i, uint64(len(m.Description)))
		i += copy(data[i:], m.Description)
	}
	return i, nil
}

func (m *CreateProjectResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateProjectResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiVersion) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintService(data, i, uint64(len(m.ApiVersion)))
		i += copy(data[i:], m.ApiVersion)
	}
	if len(m.Kind) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintService(data, i, uint64(len(m.Kind)))
		i += copy(data[i:], m.Kind)
	}
	if m.ProjectJSON != nil {
		if len(m.ProjectJSON) > 0 {
			data[i] = 0x1a
			i++
			i = encodeVarintService(data, i, uint64(len(m.ProjectJSON)))
			i += copy(data[i:], m.ProjectJSON)
		}
	}
	return i, nil
}

func (m *LookupProjectsRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LookupProjectsRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Identifier) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintService(data, i, uint64(len(m.Identifier)))
		i += copy(data[i:], m.Identifier)
	}
	return i, nil
}

func (m *LookupProjectsResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LookupProjectsResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiVersion) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintService(data, i, uint64(len(m.ApiVersion)))
		i += copy(data[i:], m.ApiVersion)
	}
	if len(m.Kind) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintService(data, i, uint64(len(m.Kind)))
		i += copy(data[i:], m.Kind)
	}
	if m.ProjectsJSON != nil {
		if len(m.ProjectsJSON) > 0 {
			data[i] = 0x1a
			i++
			i = encodeVarintService(data, i, uint64(len(m.ProjectsJSON)))
			i += copy(data[i:], m.ProjectsJSON)
		}
	}
	return i, nil
}

func (m *OpenProjectRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *OpenProjectRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Identifier) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintService(data, i, uint64(len(m.Identifier)))
		i += copy(data[i:], m.Identifier)
	}
	if len(m.ProjectID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintService(data, i, uint64(len(m.ProjectID)))
		i += copy(data[i:], m.ProjectID)
	}
	return i, nil
}

func (m *OpenProjectResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *OpenProjectResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiVersion) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintService(data, i, uint64(len(m.ApiVersion)))
		i += copy(data[i:], m.ApiVersion)
	}
	if len(m.Kind) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintService(data, i, uint64(len(m.Kind)))
		i += copy(data[i:], m.Kind)
	}
	if m.ProjectJSON != nil {
		if len(m.ProjectJSON) > 0 {
			data[i] = 0x1a
			i++
			i = encodeVarintService(data, i, uint64(len(m.ProjectJSON)))
			i += copy(data[i:], m.ProjectJSON)
		}
	}
	return i, nil
}

func (m *DeleteProjectRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeleteProjectRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Identifier) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintService(data, i, uint64(len(m.Identifier)))
		i += copy(data[i:], m.Identifier)
	}
	if len(m.ProjectID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintService(data, i, uint64(len(m.ProjectID)))
		i += copy(data[i:], m.ProjectID)
	}
	return i, nil
}

func (m *DeleteProjectResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeleteProjectResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flag != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintService(data, i, uint64(m.Flag))
	}
	return i, nil
}

func (m *BuildDockerImageRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *BuildDockerImageRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DockerfileContent) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintService(data, i, uint64(len(m.DockerfileContent)))
		i += copy(data[i:], m.DockerfileContent)
	}
	if len(m.ContextArchive) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintService(data, i, uint64(len(m.ContextArchive)))
		i += copy(data[i:], m.ContextArchive)
	}
	if len(m.Gitrepo) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintService(data, i, uint64(len(m.Gitrepo)))
		i += copy(data[i:], m.Gitrepo)
	}
	if len(m.BinaryStream) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintService(data, i, uint64(len(m.BinaryStream)))
		i += copy(data[i:], m.BinaryStream)
	}
	return i, nil
}

func (m *GitRepo) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GitRepo) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Site) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintService(data, i, uint64(len(m.Site)))
		i += copy(data[i:], m.Site)
	}
	if len(m.Uri) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintService(data, i, uint64(len(m.Uri)))
		i += copy(data[i:], m.Uri)
	}
	if len(m.Ref) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintService(data, i, uint64(len(m.Ref)))
		i += copy(data[i:], m.Ref)
	}
	if len(m.ContextPath) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintService(data, i, uint64(len(m.ContextPath)))
		i += copy(data[i:], m.ContextPath)
	}
	if len(m.DockerFile) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintService(data, i, uint64(len(m.DockerFile)))
		i += copy(data[i:], m.DockerFile)
	}
	return i, nil
}

func encodeFixed64Service(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Service(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintService(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *EnterWorkspaceRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Credentials)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *EnterWorkspaceResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *LeaveWorkspaceRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *LeaveWorkspaceResponse) Size() (n int) {
	var l int
	_ = l
	if m.Flag != 0 {
		n += 1 + sovService(uint64(m.Flag))
	}
	return n
}

func (m *CreateProjectRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ProjectID)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ProjectName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *CreateProjectResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.ApiVersion)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.ProjectJSON != nil {
		l = len(m.ProjectJSON)
		if l > 0 {
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *LookupProjectsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *LookupProjectsResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.ApiVersion)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.ProjectsJSON != nil {
		l = len(m.ProjectsJSON)
		if l > 0 {
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *OpenProjectRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ProjectID)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *OpenProjectResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.ApiVersion)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.ProjectJSON != nil {
		l = len(m.ProjectJSON)
		if l > 0 {
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *DeleteProjectRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ProjectID)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *DeleteProjectResponse) Size() (n int) {
	var l int
	_ = l
	if m.Flag != 0 {
		n += 1 + sovService(uint64(m.Flag))
	}
	return n
}

func (m *BuildDockerImageRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.DockerfileContent)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ContextArchive)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Gitrepo)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.BinaryStream)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GitRepo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Ref)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ContextPath)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.DockerFile)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func sovService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EnterWorkspaceRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterWorkspaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterWorkspaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credentials", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Credentials = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterWorkspaceResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterWorkspaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterWorkspaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaveWorkspaceRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaveWorkspaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaveWorkspaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaveWorkspaceResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaveWorkspaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaveWorkspaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Flag |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateProjectRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateProjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateProjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateProjectResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateProjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateProjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiVersion = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectJSON", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectJSON = append(m.ProjectJSON[:0], data[iNdEx:postIndex]...)
			if m.ProjectJSON == nil {
				m.ProjectJSON = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupProjectsRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupProjectsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupProjectsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupProjectsResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupProjectsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupProjectsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiVersion = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectsJSON", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectsJSON = append(m.ProjectsJSON[:0], data[iNdEx:postIndex]...)
			if m.ProjectsJSON == nil {
				m.ProjectsJSON = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenProjectRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenProjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenProjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenProjectResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenProjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenProjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiVersion = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectJSON", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectJSON = append(m.ProjectJSON[:0], data[iNdEx:postIndex]...)
			if m.ProjectJSON == nil {
				m.ProjectJSON = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteProjectRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteProjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteProjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteProjectResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteProjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteProjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Flag |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildDockerImageRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildDockerImageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildDockerImageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DockerfileContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DockerfileContent = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextArchive", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextArchive = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gitrepo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gitrepo = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryStream", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BinaryStream = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GitRepo) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GitRepo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GitRepo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ref", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ref = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextPath = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DockerFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DockerFile = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipService(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorService = []byte{
	// 649 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x55, 0xcd, 0x6e, 0x13, 0x31,
	0x10, 0x26, 0x6d, 0xa1, 0x74, 0xfa, 0x23, 0x6a, 0x9a, 0x12, 0x05, 0x54, 0x2a, 0x4b, 0x94, 0x22,
	0xaa, 0x54, 0x82, 0x03, 0x5c, 0x69, 0x0b, 0xa8, 0x08, 0xb5, 0x55, 0xc2, 0x8f, 0x84, 0xb8, 0xb8,
	0x9b, 0x49, 0x6b, 0x92, 0xac, 0x8d, 0xed, 0x54, 0x70, 0xe6, 0x25, 0xfa, 0x12, 0xbc, 0x07, 0x47,
	0x1e, 0x01, 0xc1, 0x8d, 0xa7, 0xc0, 0xde, 0x75, 0x92, 0xdd, 0x8d, 0x21, 0x45, 0x94, 0x43, 0x24,
	0xfb, 0xdb, 0xf9, 0xf9, 0x66, 0xc6, 0xf3, 0x05, 0x6e, 0x4a, 0xc6, 0xf4, 0x66, 0xc4, 0x37, 0x85,
	0xc4, 0x58, 0x1f, 0xf3, 0x96, 0xd9, 0xd4, 0xa8, 0x4e, 0x78, 0x84, 0x35, 0xa9, 0x84, 0x11, 0x64,
	0xd1, 0x19, 0xd4, 0x22, 0x5e, 0x1b, 0x18, 0xd0, 0x97, 0x50, 0x7e, 0x1c, 0x1b, 0x54, 0xaf, 0x85,
	0x6a, 0x6b, 0xc9, 0x22, 0xac, 0xe3, 0xfb, 0x1e, 0x6a, 0x43, 0xaa, 0x70, 0xb9, 0x67, 0xbd, 0x63,
	0xd6, 0xc5, 0x4a, 0x69, 0xb5, 0xb4, 0x3e, 0x53, 0x1f, 0xdc, 0xc9, 0x2a, 0xcc, 0x46, 0x0a, 0x9b,
	0x18, 0x1b, 0xce, 0x3a, 0xba, 0x32, 0x91, 0x7c, 0xce, 0x42, 0xf4, 0x21, 0x2c, 0x17, 0xc3, 0x6a,
	0x29, 0x62, 0x8d, 0x64, 0x05, 0x80, 0x27, 0x66, 0x2d, 0x8e, 0xca, 0x47, 0xce, 0x20, 0xb4, 0x01,
	0xe5, 0xe7, 0xc8, 0x4e, 0xf0, 0xaf, 0x08, 0xe5, 0x83, 0x4e, 0x8c, 0x04, 0xdd, 0x80, 0xe5, 0x62,
	0x50, 0x4f, 0x87, 0xc0, 0x54, 0xab, 0xc3, 0x8e, 0x92, 0x88, 0x93, 0xf5, 0xe4, 0x4c, 0x4f, 0x4b,
	0xb0, 0xb4, 0xad, 0x90, 0x19, 0x3c, 0x50, 0xe2, 0x1d, 0x46, 0xa6, 0x4f, 0x61, 0x0c, 0x77, 0x72,
	0x03, 0x66, 0x64, 0xea, 0xb1, 0xbb, 0xe3, 0x59, 0x0c, 0x01, 0xd7, 0x35, 0x7f, 0xd9, 0x73, 0x35,
	0x4c, 0xa6, 0x5d, 0xcb, 0x40, 0xce, 0xa2, 0x89, 0x3a, 0x52, 0x5c, 0x1a, 0x2e, 0xe2, 0xca, 0x54,
	0x6a, 0x91, 0x81, 0x68, 0x17, 0xca, 0x05, 0x66, 0xc3, 0xb6, 0x32, 0xc9, 0x5f, 0xa1, 0xd2, 0xce,
	0xd3, 0x53, 0x1b, 0x22, 0xae, 0xce, 0x36, 0x8f, 0x9b, 0x9e, 0x55, 0x72, 0xce, 0x10, 0x7a, 0xd6,
	0xd8, 0xdf, 0x4b, 0x08, 0xcd, 0xd5, 0xb3, 0x10, 0x7d, 0x60, 0x87, 0x21, 0x44, 0xbb, 0x27, 0x7d,
	0x3a, 0x7d, 0xc6, 0x4e, 0x50, 0x69, 0x1b, 0x5e, 0x70, 0xfc, 0x07, 0xa2, 0x14, 0xe6, 0x3c, 0x2b,
	0x9d, 0x61, 0x9a, 0xc3, 0x68, 0x1d, 0xc8, 0xbe, 0x7d, 0xd5, 0xe7, 0x39, 0x31, 0xda, 0x86, 0xab,
	0xb9, 0x98, 0xff, 0xb5, 0xd7, 0x2f, 0x60, 0x69, 0x07, 0x3b, 0x78, 0xbe, 0x8f, 0x8e, 0xde, 0x85,
	0x72, 0x21, 0xea, 0x1f, 0x1e, 0xfe, 0xe7, 0x12, 0x5c, 0xdb, 0xea, 0xf1, 0x4e, 0x73, 0x47, 0x44,
	0x6d, 0x54, 0xbb, 0x5d, 0x76, 0x34, 0x58, 0xbf, 0x0d, 0x58, 0x6c, 0x26, 0x68, 0x8b, 0x77, 0x70,
	0x5b, 0xd8, 0xe5, 0x8e, 0x8d, 0x67, 0x33, 0xfa, 0x81, 0xac, 0xc1, 0x42, 0xe4, 0x8e, 0x1f, 0xcc,
	0x23, 0x15, 0x1d, 0xf3, 0x13, 0xf4, 0xcc, 0x0a, 0x28, 0xa9, 0xc0, 0xf4, 0x11, 0x37, 0x0a, 0xa5,
	0xf0, 0xfb, 0xd0, 0xbf, 0xba, 0x99, 0x1f, 0xf2, 0x98, 0xa9, 0x8f, 0x0d, 0x7b, 0x67, 0x5d, 0xbf,
	0x0c, 0x39, 0x8c, 0x7e, 0x2a, 0xc1, 0xf4, 0x53, 0x6e, 0x6b, 0xb2, 0xf6, 0xb6, 0x1e, 0xcd, 0x4d,
	0x5f, 0x1a, 0x92, 0x33, 0xb9, 0x02, 0x93, 0x3d, 0xc5, 0x7d, 0x6a, 0x77, 0x74, 0x88, 0xc2, 0x96,
	0xcf, 0xe5, 0x8e, 0x89, 0x96, 0xa5, 0x9c, 0x0e, 0x98, 0x39, 0xee, 0xef, 0x5c, 0x06, 0x72, 0x03,
	0x48, 0x0b, 0x7c, 0x62, 0x0b, 0xac, 0x5c, 0x4c, 0x07, 0x30, 0x44, 0xee, 0xfd, 0x9c, 0x82, 0xf9,
	0x06, 0xef, 0xca, 0x0e, 0x36, 0x52, 0xb5, 0x25, 0x08, 0x0b, 0x79, 0xf5, 0x23, 0xeb, 0xb5, 0x11,
	0xe9, 0xad, 0x05, 0x75, 0xb7, 0x7a, 0xe7, 0x0c, 0x96, 0x7e, 0x84, 0x36, 0x4d, 0x5e, 0xd5, 0x82,
	0x69, 0x82, 0x6a, 0x1a, 0x4c, 0xf3, 0x1b, 0x89, 0x3c, 0x84, 0xf9, 0x9c, 0xe6, 0x90, 0xdb, 0x01,
	0xdf, 0x90, 0x5e, 0x56, 0xd7, 0xc7, 0x1b, 0x66, 0x4a, 0xc9, 0xe9, 0x45, 0xb8, 0x94, 0x90, 0x16,
	0x85, 0x4b, 0x09, 0x8b, 0xcf, 0x5b, 0x98, 0xcd, 0x2c, 0x34, 0xb9, 0x15, 0xf0, 0x1c, 0x15, 0x91,
	0xea, 0xda, 0x38, 0xb3, 0x61, 0xa3, 0x72, 0xbb, 0x16, 0x6c, 0x54, 0x68, 0xc7, 0x83, 0x8d, 0x0a,
	0xae, 0xed, 0xd6, 0xf5, 0x2f, 0xdf, 0x57, 0x4a, 0x5f, 0xed, 0xef, 0x9b, 0xfd, 0x9d, 0xfe, 0x58,
	0xb9, 0xf0, 0x66, 0x66, 0xe0, 0x72, 0x78, 0x29, 0xf9, 0x9b, 0xbf, 0xff, 0x2b, 0x00, 0x00, 0xff,
	0xff, 0x03, 0x2a, 0xbe, 0xcf, 0x09, 0x08, 0x00, 0x00,
}
