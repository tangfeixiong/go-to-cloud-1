// Code generated by protoc-gen-gogo.
// source: paas/cicd/pb3/grpc.proto
// DO NOT EDIT!

package pb3

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for ContainerImageBuildService service

type ContainerImageBuildServiceClient interface {
	// Template-driven
	//
	TemplateBuildingOntoStream(ctx context.Context, opts ...grpc.CallOption) (ContainerImageBuildService_TemplateBuildingOntoStreamClient, error)
}

type containerImageBuildServiceClient struct {
	cc *grpc.ClientConn
}

func NewContainerImageBuildServiceClient(cc *grpc.ClientConn) ContainerImageBuildServiceClient {
	return &containerImageBuildServiceClient{cc}
}

func (c *containerImageBuildServiceClient) TemplateBuildingOntoStream(ctx context.Context, opts ...grpc.CallOption) (ContainerImageBuildService_TemplateBuildingOntoStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ContainerImageBuildService_serviceDesc.Streams[0], c.cc, "/paas.cicd.pb3.ContainerImageBuildService/TemplateBuildingOntoStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &containerImageBuildServiceTemplateBuildingOntoStreamClient{stream}
	return x, nil
}

type ContainerImageBuildService_TemplateBuildingOntoStreamClient interface {
	Send(*TemplatizedBuilderRequest) error
	Recv() (*TemplatizedBuilderResponse, error)
	grpc.ClientStream
}

type containerImageBuildServiceTemplateBuildingOntoStreamClient struct {
	grpc.ClientStream
}

func (x *containerImageBuildServiceTemplateBuildingOntoStreamClient) Send(m *TemplatizedBuilderRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *containerImageBuildServiceTemplateBuildingOntoStreamClient) Recv() (*TemplatizedBuilderResponse, error) {
	m := new(TemplatizedBuilderResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ContainerImageBuildService service

type ContainerImageBuildServiceServer interface {
	// Template-driven
	//
	TemplateBuildingOntoStream(ContainerImageBuildService_TemplateBuildingOntoStreamServer) error
}

func RegisterContainerImageBuildServiceServer(s *grpc.Server, srv ContainerImageBuildServiceServer) {
	s.RegisterService(&_ContainerImageBuildService_serviceDesc, srv)
}

func _ContainerImageBuildService_TemplateBuildingOntoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContainerImageBuildServiceServer).TemplateBuildingOntoStream(&containerImageBuildServiceTemplateBuildingOntoStreamServer{stream})
}

type ContainerImageBuildService_TemplateBuildingOntoStreamServer interface {
	Send(*TemplatizedBuilderResponse) error
	Recv() (*TemplatizedBuilderRequest, error)
	grpc.ServerStream
}

type containerImageBuildServiceTemplateBuildingOntoStreamServer struct {
	grpc.ServerStream
}

func (x *containerImageBuildServiceTemplateBuildingOntoStreamServer) Send(m *TemplatizedBuilderResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *containerImageBuildServiceTemplateBuildingOntoStreamServer) Recv() (*TemplatizedBuilderRequest, error) {
	m := new(TemplatizedBuilderRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ContainerImageBuildService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "paas.cicd.pb3.ContainerImageBuildService",
	HandlerType: (*ContainerImageBuildServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TemplateBuildingOntoStream",
			Handler:       _ContainerImageBuildService_TemplateBuildingOntoStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}

var fileDescriptorGrpc = []byte{
	// 256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x8f, 0xb1, 0x4e, 0xc3, 0x30,
	0x14, 0x45, 0x1b, 0x21, 0x31, 0x44, 0x62, 0xc9, 0x84, 0x0c, 0xca, 0xc0, 0x80, 0xca, 0x62, 0x23,
	0xfa, 0x07, 0xe9, 0x80, 0x98, 0x40, 0x2d, 0x13, 0x12, 0xc3, 0x8b, 0xf3, 0xb0, 0x2c, 0x25, 0x7e,
	0xae, 0xf3, 0x02, 0x82, 0xff, 0x40, 0xe2, 0x93, 0x18, 0xf9, 0x04, 0x04, 0x3f, 0x82, 0x53, 0x77,
	0x89, 0xc4, 0xd0, 0xe1, 0x2e, 0x3e, 0xd7, 0xf7, 0xdd, 0x9b, 0x1f, 0x7b, 0x80, 0x5e, 0x69, 0xab,
	0x1b, 0xe5, 0xeb, 0x85, 0x32, 0xc1, 0x6b, 0xe9, 0x03, 0x31, 0x15, 0x47, 0x23, 0x91, 0x23, 0x91,
	0x91, 0x88, 0x53, 0x43, 0x64, 0x5a, 0x54, 0xe0, 0xad, 0x02, 0xe7, 0x88, 0x81, 0x2d, 0xb9, 0x3e,
	0x99, 0xc5, 0xc9, 0x34, 0xa6, 0x1e, 0x6c, 0xdb, 0x60, 0x48, 0xf0, 0xea, 0x3d, 0xcb, 0xc5, 0x92,
	0x1c, 0x83, 0x75, 0x18, 0x6e, 0x3a, 0x30, 0x58, 0x8d, 0x7c, 0x8d, 0xe1, 0xd9, 0x6a, 0x2c, 0x5e,
	0x72, 0x71, 0x8f, 0x9d, 0x6f, 0x81, 0xd3, 0xbb, 0x75, 0xe6, 0xd6, 0x31, 0xad, 0x39, 0x20, 0x74,
	0xc5, 0x5c, 0x4e, 0x7a, 0xc8, 0x9d, 0xd5, 0xbe, 0x61, 0x53, 0xa5, 0x2b, 0x2b, 0xdc, 0x0c, 0xd8,
	0xb3, 0xb8, 0xd8, 0xc3, 0xd9, 0xfb, 0xd8, 0x19, 0xcf, 0x66, 0xf3, 0xec, 0x32, 0xab, 0x1e, 0x3f,
	0x7f, 0xca, 0xec, 0x2b, 0xea, 0x3b, 0xea, 0xe3, 0xb7, 0x9c, 0xe5, 0xe7, 0x9a, 0x3a, 0xb9, 0x89,
	0x05, 0x5e, 0x07, 0x70, 0x14, 0xb3, 0x28, 0xa0, 0x4c, 0xc3, 0xb7, 0x53, 0xea, 0xe1, 0x69, 0x8c,
	0xae, 0xca, 0x7f, 0xe6, 0x5c, 0xaf, 0xee, 0x96, 0xbb, 0x49, 0x0f, 0x07, 0xd1, 0x54, 0x1f, 0x6e,
	0xbf, 0x2c, 0xfe, 0x02, 0x00, 0x00, 0xff, 0xff, 0x3d, 0xa2, 0x65, 0xb2, 0x63, 0x01, 0x00, 0x00,
}
