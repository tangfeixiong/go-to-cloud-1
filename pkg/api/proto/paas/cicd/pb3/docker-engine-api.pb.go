// Code generated by protoc-gen-gogo.
// source: paas/cicd/pb3/docker-engine-api.proto
// DO NOT EDIT!

package pb3

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import errors "errors"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// https://github.com/docker/engine-api/blob/master/types/auth.go
type DockerAuthConfig struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Auth     string `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
	// Email is an optional value associated with the username.
	// This field is deprecated and will be removed in a later
	// version of docker.
	Email         string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	ServerAddress string `protobuf:"bytes,5,opt,name=serverAddress,proto3" json:"serverAddress,omitempty"`
	// IdentityToken is used to authenticate the user and get
	// an access token for the registry.
	IdentityToken string `protobuf:"bytes,6,opt,name=identityToken,proto3" json:"identityToken,omitempty"`
	// RegistryToken is a bearer token to be sent to a registry
	RegistryToken string `protobuf:"bytes,7,opt,name=registryToken,proto3" json:"registryToken,omitempty"`
}

func (m *DockerAuthConfig) Reset()                    { *m = DockerAuthConfig{} }
func (m *DockerAuthConfig) String() string            { return proto.CompactTextString(m) }
func (*DockerAuthConfig) ProtoMessage()               {}
func (*DockerAuthConfig) Descriptor() ([]byte, []int) { return fileDescriptorDockerEngineApi, []int{0} }

// https://github.com/docker/docker/blob/master/cliconfig/configfile/file.go
type DockerConfigFile struct {
	AuthConfigs      map[string]*DockerAuthConfig `protobuf:"bytes,1,rep,name=authConfigs" json:"authConfigs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	HttpHeaders      map[string]string            `protobuf:"bytes,2,rep,name=httpHeaders" json:"httpHeaders,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PsFormat         string                       `protobuf:"bytes,3,opt,name=psFormat,proto3" json:"psFormat,omitempty"`
	ImagesFormat     string                       `protobuf:"bytes,4,opt,name=imagesFormat,proto3" json:"imagesFormat,omitempty"`
	NetworksFormat   string                       `protobuf:"bytes,5,opt,name=networksFormat,proto3" json:"networksFormat,omitempty"`
	VolumesFormat    string                       `protobuf:"bytes,6,opt,name=volumesFormat,proto3" json:"volumesFormat,omitempty"`
	DetachKeys       string                       `protobuf:"bytes,7,opt,name=detachKeys,proto3" json:"detachKeys,omitempty"`
	CredentialsStore string                       `protobuf:"bytes,8,opt,name=credentialsStore,proto3" json:"credentialsStore,omitempty"`
	Filename         string                       `protobuf:"bytes,9,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (m *DockerConfigFile) Reset()                    { *m = DockerConfigFile{} }
func (m *DockerConfigFile) String() string            { return proto.CompactTextString(m) }
func (*DockerConfigFile) ProtoMessage()               {}
func (*DockerConfigFile) Descriptor() ([]byte, []int) { return fileDescriptorDockerEngineApi, []int{1} }

func (m *DockerConfigFile) GetAuthConfigs() map[string]*DockerAuthConfig {
	if m != nil {
		return m.AuthConfigs
	}
	return nil
}

func (m *DockerConfigFile) GetHttpHeaders() map[string]string {
	if m != nil {
		return m.HttpHeaders
	}
	return nil
}

func init() {
	proto.RegisterType((*DockerAuthConfig)(nil), "paas.cicd.pb3.DockerAuthConfig")
	proto.RegisterType((*DockerConfigFile)(nil), "paas.cicd.pb3.DockerConfigFile")
}
func (m *DockerAuthConfig) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DockerAuthConfig) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintDockerEngineApi(data, i, uint64(len(m.Username)))
		i += copy(data[i:], m.Username)
	}
	if len(m.Password) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintDockerEngineApi(data, i, uint64(len(m.Password)))
		i += copy(data[i:], m.Password)
	}
	if len(m.Auth) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintDockerEngineApi(data, i, uint64(len(m.Auth)))
		i += copy(data[i:], m.Auth)
	}
	if len(m.Email) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintDockerEngineApi(data, i, uint64(len(m.Email)))
		i += copy(data[i:], m.Email)
	}
	if len(m.ServerAddress) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintDockerEngineApi(data, i, uint64(len(m.ServerAddress)))
		i += copy(data[i:], m.ServerAddress)
	}
	if len(m.IdentityToken) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintDockerEngineApi(data, i, uint64(len(m.IdentityToken)))
		i += copy(data[i:], m.IdentityToken)
	}
	if len(m.RegistryToken) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintDockerEngineApi(data, i, uint64(len(m.RegistryToken)))
		i += copy(data[i:], m.RegistryToken)
	}
	return i, nil
}

func (m *DockerConfigFile) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DockerConfigFile) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AuthConfigs) > 0 {
		for k, _ := range m.AuthConfigs {
			data[i] = 0xa
			i++
			v := m.AuthConfigs[k]
			if v == nil {
				return 0, errors.New("proto: map has nil element")
			}
			msgSize := v.Size()
			mapSize := 1 + len(k) + sovDockerEngineApi(uint64(len(k))) + 1 + msgSize + sovDockerEngineApi(uint64(msgSize))
			i = encodeVarintDockerEngineApi(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintDockerEngineApi(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintDockerEngineApi(data, i, uint64(v.Size()))
			n1, err := v.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n1
		}
	}
	if len(m.HttpHeaders) > 0 {
		for k, _ := range m.HttpHeaders {
			data[i] = 0x12
			i++
			v := m.HttpHeaders[k]
			mapSize := 1 + len(k) + sovDockerEngineApi(uint64(len(k))) + 1 + len(v) + sovDockerEngineApi(uint64(len(v)))
			i = encodeVarintDockerEngineApi(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintDockerEngineApi(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintDockerEngineApi(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	if len(m.PsFormat) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintDockerEngineApi(data, i, uint64(len(m.PsFormat)))
		i += copy(data[i:], m.PsFormat)
	}
	if len(m.ImagesFormat) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintDockerEngineApi(data, i, uint64(len(m.ImagesFormat)))
		i += copy(data[i:], m.ImagesFormat)
	}
	if len(m.NetworksFormat) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintDockerEngineApi(data, i, uint64(len(m.NetworksFormat)))
		i += copy(data[i:], m.NetworksFormat)
	}
	if len(m.VolumesFormat) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintDockerEngineApi(data, i, uint64(len(m.VolumesFormat)))
		i += copy(data[i:], m.VolumesFormat)
	}
	if len(m.DetachKeys) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintDockerEngineApi(data, i, uint64(len(m.DetachKeys)))
		i += copy(data[i:], m.DetachKeys)
	}
	if len(m.CredentialsStore) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintDockerEngineApi(data, i, uint64(len(m.CredentialsStore)))
		i += copy(data[i:], m.CredentialsStore)
	}
	if len(m.Filename) > 0 {
		data[i] = 0x4a
		i++
		i = encodeVarintDockerEngineApi(data, i, uint64(len(m.Filename)))
		i += copy(data[i:], m.Filename)
	}
	return i, nil
}

func encodeFixed64DockerEngineApi(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32DockerEngineApi(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDockerEngineApi(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *DockerAuthConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovDockerEngineApi(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovDockerEngineApi(uint64(l))
	}
	l = len(m.Auth)
	if l > 0 {
		n += 1 + l + sovDockerEngineApi(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovDockerEngineApi(uint64(l))
	}
	l = len(m.ServerAddress)
	if l > 0 {
		n += 1 + l + sovDockerEngineApi(uint64(l))
	}
	l = len(m.IdentityToken)
	if l > 0 {
		n += 1 + l + sovDockerEngineApi(uint64(l))
	}
	l = len(m.RegistryToken)
	if l > 0 {
		n += 1 + l + sovDockerEngineApi(uint64(l))
	}
	return n
}

func (m *DockerConfigFile) Size() (n int) {
	var l int
	_ = l
	if len(m.AuthConfigs) > 0 {
		for k, v := range m.AuthConfigs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
			}
			mapEntrySize := 1 + len(k) + sovDockerEngineApi(uint64(len(k))) + 1 + l + sovDockerEngineApi(uint64(l))
			n += mapEntrySize + 1 + sovDockerEngineApi(uint64(mapEntrySize))
		}
	}
	if len(m.HttpHeaders) > 0 {
		for k, v := range m.HttpHeaders {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDockerEngineApi(uint64(len(k))) + 1 + len(v) + sovDockerEngineApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovDockerEngineApi(uint64(mapEntrySize))
		}
	}
	l = len(m.PsFormat)
	if l > 0 {
		n += 1 + l + sovDockerEngineApi(uint64(l))
	}
	l = len(m.ImagesFormat)
	if l > 0 {
		n += 1 + l + sovDockerEngineApi(uint64(l))
	}
	l = len(m.NetworksFormat)
	if l > 0 {
		n += 1 + l + sovDockerEngineApi(uint64(l))
	}
	l = len(m.VolumesFormat)
	if l > 0 {
		n += 1 + l + sovDockerEngineApi(uint64(l))
	}
	l = len(m.DetachKeys)
	if l > 0 {
		n += 1 + l + sovDockerEngineApi(uint64(l))
	}
	l = len(m.CredentialsStore)
	if l > 0 {
		n += 1 + l + sovDockerEngineApi(uint64(l))
	}
	l = len(m.Filename)
	if l > 0 {
		n += 1 + l + sovDockerEngineApi(uint64(l))
	}
	return n
}

func sovDockerEngineApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDockerEngineApi(x uint64) (n int) {
	return sovDockerEngineApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DockerAuthConfig) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDockerEngineApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DockerAuthConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DockerAuthConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDockerEngineApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDockerEngineApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDockerEngineApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDockerEngineApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDockerEngineApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDockerEngineApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auth = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDockerEngineApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDockerEngineApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDockerEngineApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDockerEngineApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerAddress = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDockerEngineApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDockerEngineApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityToken = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDockerEngineApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDockerEngineApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistryToken = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDockerEngineApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDockerEngineApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DockerConfigFile) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDockerEngineApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DockerConfigFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DockerConfigFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDockerEngineApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDockerEngineApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDockerEngineApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDockerEngineApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthDockerEngineApi
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDockerEngineApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapmsglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDockerEngineApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				mapmsglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if mapmsglen < 0 {
				return ErrInvalidLengthDockerEngineApi
			}
			postmsgIndex := iNdEx + mapmsglen
			if mapmsglen < 0 {
				return ErrInvalidLengthDockerEngineApi
			}
			if postmsgIndex > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := &DockerAuthConfig{}
			if err := mapvalue.Unmarshal(data[iNdEx:postmsgIndex]); err != nil {
				return err
			}
			iNdEx = postmsgIndex
			if m.AuthConfigs == nil {
				m.AuthConfigs = make(map[string]*DockerAuthConfig)
			}
			m.AuthConfigs[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDockerEngineApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDockerEngineApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDockerEngineApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDockerEngineApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthDockerEngineApi
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDockerEngineApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapvalue uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDockerEngineApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapvalue |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapvalue := int(stringLenmapvalue)
			if intStringLenmapvalue < 0 {
				return ErrInvalidLengthDockerEngineApi
			}
			postStringIndexmapvalue := iNdEx + intStringLenmapvalue
			if postStringIndexmapvalue > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := string(data[iNdEx:postStringIndexmapvalue])
			iNdEx = postStringIndexmapvalue
			if m.HttpHeaders == nil {
				m.HttpHeaders = make(map[string]string)
			}
			m.HttpHeaders[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PsFormat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDockerEngineApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDockerEngineApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PsFormat = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImagesFormat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDockerEngineApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDockerEngineApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImagesFormat = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworksFormat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDockerEngineApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDockerEngineApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworksFormat = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumesFormat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDockerEngineApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDockerEngineApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolumesFormat = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetachKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDockerEngineApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDockerEngineApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DetachKeys = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialsStore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDockerEngineApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDockerEngineApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialsStore = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDockerEngineApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDockerEngineApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filename = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDockerEngineApi(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDockerEngineApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDockerEngineApi(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDockerEngineApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDockerEngineApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDockerEngineApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDockerEngineApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDockerEngineApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDockerEngineApi(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDockerEngineApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDockerEngineApi   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorDockerEngineApi = []byte{
	// 516 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x53, 0xdd, 0x6e, 0xd3, 0x30,
	0x18, 0x25, 0x6b, 0x3b, 0x56, 0x97, 0xa1, 0xc8, 0xea, 0x45, 0x54, 0xa1, 0x82, 0x2a, 0x98, 0x26,
	0xa4, 0x25, 0x68, 0x13, 0x12, 0xe2, 0x02, 0x69, 0x83, 0x4d, 0x93, 0x10, 0x37, 0x1d, 0x57, 0xdc,
	0x20, 0x37, 0xf9, 0x9a, 0x5a, 0x4d, 0xec, 0x60, 0x3b, 0x45, 0x7d, 0x13, 0x1e, 0x89, 0x4b, 0x78,
	0x03, 0x04, 0x12, 0xcf, 0x81, 0x7f, 0x92, 0x36, 0x29, 0xbb, 0xd8, 0x45, 0xa4, 0x7c, 0xe7, 0x3b,
	0x3e, 0x9f, 0xcf, 0xb1, 0x8d, 0x9e, 0x15, 0x84, 0xc8, 0x28, 0xa6, 0x71, 0x12, 0x15, 0xb3, 0xb3,
	0x28, 0xe1, 0xf1, 0x12, 0xc4, 0x09, 0xb0, 0x94, 0x32, 0x38, 0x21, 0x05, 0x0d, 0x0b, 0xc1, 0x15,
	0xc7, 0x87, 0x86, 0x16, 0x1a, 0x5a, 0xa8, 0x69, 0xa3, 0x47, 0x29, 0xe7, 0x69, 0x06, 0x91, 0x26,
	0x44, 0x84, 0x31, 0xae, 0x88, 0xa2, 0x9c, 0x49, 0x47, 0x9e, 0xfc, 0xf5, 0x90, 0xff, 0xce, 0x0a,
	0x9d, 0x97, 0x6a, 0xf1, 0x96, 0xb3, 0x39, 0x4d, 0xf1, 0x08, 0x1d, 0x94, 0x12, 0x04, 0x23, 0x39,
	0x04, 0xde, 0x13, 0xef, 0xb8, 0x3f, 0xdd, 0xd4, 0xa6, 0x57, 0x10, 0x29, 0xbf, 0x72, 0x91, 0x04,
	0x7b, 0xae, 0x57, 0xd7, 0x18, 0xa3, 0x2e, 0xd1, 0x2a, 0x41, 0xc7, 0xe2, 0xf6, 0x1f, 0x0f, 0x51,
	0x0f, 0x72, 0x42, 0xb3, 0xa0, 0x6b, 0x41, 0x57, 0xe0, 0xa7, 0xe8, 0x50, 0x0b, 0xae, 0xf4, 0xd4,
	0x24, 0x11, 0x20, 0x65, 0xd0, 0xb3, 0xdd, 0x36, 0x68, 0x58, 0x34, 0x01, 0xa6, 0xa8, 0x5a, 0x7f,
	0xe4, 0x4b, 0x60, 0xc1, 0xbe, 0x63, 0xb5, 0x40, 0xc3, 0x12, 0x90, 0x52, 0xa9, 0x44, 0xc5, 0xba,
	0xef, 0x58, 0x2d, 0x70, 0xf2, 0xb3, 0x5b, 0x1b, 0x75, 0x26, 0xaf, 0x68, 0x06, 0x78, 0x8a, 0x06,
	0x64, 0x63, 0x5b, 0x6a, 0xaf, 0x9d, 0xe3, 0xc1, 0xe9, 0x8b, 0xb0, 0x15, 0x60, 0xb8, 0xbb, 0x2a,
	0xdc, 0x26, 0x25, 0x2f, 0x99, 0x1e, 0x30, 0x6d, 0x8a, 0x18, 0xcd, 0x85, 0x52, 0xc5, 0x35, 0x90,
	0x04, 0x84, 0xd4, 0x19, 0xdd, 0x49, 0xf3, 0x7a, 0xbb, 0xa4, 0xd2, 0x6c, 0x88, 0xd8, 0xd0, 0xe5,
	0x15, 0x17, 0x39, 0x51, 0x55, 0xb8, 0x9b, 0x1a, 0x4f, 0xd0, 0x03, 0x9a, 0x93, 0x14, 0xea, 0xbe,
	0xcb, 0xb9, 0x85, 0xe1, 0x23, 0xf4, 0x90, 0x81, 0xd2, 0x67, 0xb4, 0xac, 0x59, 0x2e, 0xef, 0x1d,
	0xd4, 0x44, 0xb9, 0xe2, 0x59, 0x99, 0x6f, 0xc4, 0xaa, 0xc0, 0x5b, 0x20, 0x1e, 0x23, 0x94, 0x80,
	0x22, 0xf1, 0xe2, 0x3d, 0xac, 0x65, 0x95, 0x76, 0x03, 0xc1, 0xcf, 0x91, 0x1f, 0x0b, 0xb0, 0x67,
	0x44, 0x32, 0x79, 0xa3, 0xb8, 0x80, 0xe0, 0xc0, 0xb2, 0xfe, 0xc3, 0x8d, 0xb3, 0xb9, 0xf6, 0x6f,
	0xaf, 0x5a, 0xdf, 0x39, 0xab, 0xeb, 0xd1, 0x67, 0xe4, 0xef, 0x46, 0x8d, 0x7d, 0xd4, 0x59, 0xc2,
	0xba, 0xba, 0x95, 0xe6, 0x17, 0xbf, 0x44, 0xbd, 0x15, 0xc9, 0x4a, 0xb0, 0xb7, 0x71, 0x70, 0xfa,
	0xf8, 0xd6, 0xa4, 0xb7, 0x3a, 0x53, 0xc7, 0x7e, 0xbd, 0xf7, 0xca, 0x1b, 0xbd, 0x41, 0xfe, 0x6e,
	0xee, 0xb7, 0x0c, 0x18, 0x36, 0x07, 0xf4, 0x1b, 0xeb, 0x2f, 0x6e, 0xbe, 0xff, 0x1e, 0x7b, 0x3f,
	0xf4, 0xf7, 0x4b, 0x7f, 0xdf, 0xfe, 0x8c, 0xef, 0xa1, 0xa3, 0x98, 0xe7, 0xe1, 0x17, 0xca, 0xd2,
	0x75, 0x49, 0x18, 0xd7, 0xdb, 0xd0, 0x1e, 0x43, 0xf7, 0x00, 0xed, 0x7b, 0x9b, 0x95, 0x73, 0xb3,
	0xab, 0x8b, 0xa1, 0xdb, 0xd6, 0xa5, 0x7d, 0xbb, 0xe7, 0x05, 0xfd, 0xc0, 0x13, 0xc8, 0x3e, 0x75,
	0x74, 0x6b, 0xb6, 0x6f, 0x89, 0x67, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x98, 0x03, 0xbb, 0x6d,
	0xee, 0x03, 0x00, 0x00,
}
