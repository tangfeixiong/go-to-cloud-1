// Code generated by protoc-gen-gogo.
// source: paas/cicd/pb3/builder.proto
// DO NOT EDIT!

/*
	Package pb3 is a generated protocol buffer package.

	It is generated from these files:
		paas/cicd/pb3/builder.proto
		paas/cicd/pb3/docker-engine-api.proto
		paas/cicd/pb3/grpc.proto
		paas/cicd/pb3/metadata.proto

	It has these top-level messages:
		TemplatizedBuilderRequest
		TemplatizedBuilderResponse
		IdentifiedAuth
		VendorAnnotation
		Feed
		FeedList
		Stream
		StreamList
		BuildConfigOption
		GitSource
		ImageSource
		ImagePathMappingDir
		GitSourceRevision
		CustomBuildStrategy
		DockerBuildStrategy
		SourceBuildStrategy
		JenkinsPipelineStrategy
		GitHubWebHookTrigger
		GenericWebHookTrigger
		ImageChangeHookTrigger
		DockerAuthConfig
		DockerConfigFile
		ObjectMeta
		Template
		TemplateList
*/
package pb3

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type BuildSourceType int32

const (
	// BuildSourceGit instructs a build to use a Git source control repository as the build input.
	BuildSourceType_Git BuildSourceType = 0
	// BuildSourceDockerfile uses a Dockerfile as the start of a build
	BuildSourceType_Dockerfile BuildSourceType = 1
	// BuildSourceBinary indicates the build will accept a Binary file as input.
	BuildSourceType_Binary BuildSourceType = 2
	// BuildSourceImage indicates the build will accept an image as input
	BuildSourceType_Image BuildSourceType = 3
	// BuildSourceNone indicates the build has no predefined input (only valid for Source and Custom Strategies)
	BuildSourceType_None BuildSourceType = 4
)

var BuildSourceType_name = map[int32]string{
	0: "Git",
	1: "Dockerfile",
	2: "Binary",
	3: "Image",
	4: "None",
}
var BuildSourceType_value = map[string]int32{
	"Git":        0,
	"Dockerfile": 1,
	"Binary":     2,
	"Image":      3,
	"None":       4,
}

func (x BuildSourceType) String() string {
	return proto.EnumName(BuildSourceType_name, int32(x))
}
func (BuildSourceType) EnumDescriptor() ([]byte, []int) { return fileDescriptorBuilder, []int{0} }

type BuildStrategyType int32

const (
	// DockerBuildStrategyType performs builds using a Dockerfile.
	BuildStrategyType_Docker BuildStrategyType = 0
	// SourceBuildStrategyType performs builds build using Source To Images with a Git repository
	// and a builder image.
	BuildStrategyType_Source BuildStrategyType = 1
	// CustomBuildStrategyType performs builds using custom builder Docker image.
	BuildStrategyType_Custom BuildStrategyType = 2
	// JenkinsPipelineBuildStrategyType indicates the build will run via Jenkine Pipeline.
	BuildStrategyType_JenkinsPipeline BuildStrategyType = 3
)

var BuildStrategyType_name = map[int32]string{
	0: "Docker",
	1: "Source",
	2: "Custom",
	3: "JenkinsPipeline",
}
var BuildStrategyType_value = map[string]int32{
	"Docker":          0,
	"Source":          1,
	"Custom":          2,
	"JenkinsPipeline": 3,
}

func (x BuildStrategyType) String() string {
	return proto.EnumName(BuildStrategyType_name, int32(x))
}
func (BuildStrategyType) EnumDescriptor() ([]byte, []int) { return fileDescriptorBuilder, []int{1} }

type ImageKindType int32

const (
	ImageKindType_DockerImage      ImageKindType = 0
	ImageKindType_ImageStreamTag   ImageKindType = 1
	ImageKindType_ImageStreamImage ImageKindType = 2
)

var ImageKindType_name = map[int32]string{
	0: "DockerImage",
	1: "ImageStreamTag",
	2: "ImageStreamImage",
}
var ImageKindType_value = map[string]int32{
	"DockerImage":      0,
	"ImageStreamTag":   1,
	"ImageStreamImage": 2,
}

func (x ImageKindType) String() string {
	return proto.EnumName(ImageKindType_name, int32(x))
}
func (ImageKindType) EnumDescriptor() ([]byte, []int) { return fileDescriptorBuilder, []int{2} }

type SourceRevisionType int32

const (
	SourceRevisionType_Source_rev     SourceRevisionType = 0
	SourceRevisionType_Dockerfile_rev SourceRevisionType = 1
	SourceRevisionType_Binary_rev     SourceRevisionType = 2
	SourceRevisionType_Images_rev     SourceRevisionType = 3
)

var SourceRevisionType_name = map[int32]string{
	0: "Source_rev",
	1: "Dockerfile_rev",
	2: "Binary_rev",
	3: "Images_rev",
}
var SourceRevisionType_value = map[string]int32{
	"Source_rev":     0,
	"Dockerfile_rev": 1,
	"Binary_rev":     2,
	"Images_rev":     3,
}

func (x SourceRevisionType) String() string {
	return proto.EnumName(SourceRevisionType_name, int32(x))
}
func (SourceRevisionType) EnumDescriptor() ([]byte, []int) { return fileDescriptorBuilder, []int{3} }

type BuildPolicyType int32

const (
	// BuildRunPolicyParallel schedules new builds immediately after they are
	// created. Builds will be executed in parallel.
	BuildPolicyType_Parallel BuildPolicyType = 0
	// BuildRunPolicySerial schedules new builds to execute in a sequence as
	// they are created. Every build gets queued up and will execute when the
	// previous build completes. This is the default policy.
	BuildPolicyType_Serial BuildPolicyType = 1
	// BuildRunPolicySerialLatestOnly schedules only the latest build to execute,
	// cancelling all the previously queued build.
	BuildPolicyType_SerialLatestOnly BuildPolicyType = 2
)

var BuildPolicyType_name = map[int32]string{
	0: "Parallel",
	1: "Serial",
	2: "SerialLatestOnly",
}
var BuildPolicyType_value = map[string]int32{
	"Parallel":         0,
	"Serial":           1,
	"SerialLatestOnly": 2,
}

func (x BuildPolicyType) String() string {
	return proto.EnumName(BuildPolicyType_name, int32(x))
}
func (BuildPolicyType) EnumDescriptor() ([]byte, []int) { return fileDescriptorBuilder, []int{4} }

type BuildTriggerType int32

const (
	// GitHubWebHookBuildTriggerType represents a trigger that launches builds on
	// GitHub webhook invocations
	BuildTriggerType_GitHub BuildTriggerType = 0
	// GitHubWebHookBuildTriggerTypeDeprecated BuildTriggerType = "github"
	BuildTriggerType_github BuildTriggerType = 0
	// GenericWebHookBuildTriggerType represents a trigger that launches builds on
	// generic webhook invocations
	BuildTriggerType_Generic BuildTriggerType = 1
	// GenericWebHookBuildTriggerTypeDeprecated BuildTriggerType = "generic"
	BuildTriggerType_generic BuildTriggerType = 1
	// ImageChangeBuildTriggerType represents a trigger that launches builds on
	// availability of a new version of an image
	BuildTriggerType_ImageChange BuildTriggerType = 2
	// ImageChangeBuildTriggerTypeDeprecated BuildTriggerType = "imageChange"
	BuildTriggerType_imageChange BuildTriggerType = 2
	// ConfigChangeBuildTriggerType will trigger a build on an initial build config creation
	// WARNING: In the future the behavior will change to trigger a build on any config change
	BuildTriggerType_ConfigChange BuildTriggerType = 3
)

var BuildTriggerType_name = map[int32]string{
	0: "GitHub",
	// Duplicate value: 0: "github",
	1: "Generic",
	// Duplicate value: 1: "generic",
	2: "ImageChange",
	// Duplicate value: 2: "imageChange",
	3: "ConfigChange",
}
var BuildTriggerType_value = map[string]int32{
	"GitHub":       0,
	"github":       0,
	"Generic":      1,
	"generic":      1,
	"ImageChange":  2,
	"imageChange":  2,
	"ConfigChange": 3,
}

func (x BuildTriggerType) String() string {
	return proto.EnumName(BuildTriggerType_name, int32(x))
}
func (BuildTriggerType) EnumDescriptor() ([]byte, []int) { return fileDescriptorBuilder, []int{5} }

type BuildPhaseType int32

const (
	// BuildPhaseNew is automatically assigned to a newly created build.
	BuildPhaseType_New BuildPhaseType = 0
	// BuildPhasePending indicates that a pod name has been assigned and a build is
	// about to start running.
	BuildPhaseType_Pending BuildPhaseType = 1
	// BuildPhaseRunning indicates that a pod has been created and a build is running.
	BuildPhaseType_Running BuildPhaseType = 2
	// BuildPhaseComplete indicates that a build has been successful.
	BuildPhaseType_Complete BuildPhaseType = 3
	// BuildPhaseFailed indicates that a build has executed and failed.
	BuildPhaseType_Failed BuildPhaseType = 4
	// BuildPhaseError indicates that an error prevented the build from executing.
	BuildPhaseType_Error BuildPhaseType = 5
	// BuildPhaseCancelled indicates that a running/pending build was stopped from executing.
	BuildPhaseType_Cancelled BuildPhaseType = 6
)

var BuildPhaseType_name = map[int32]string{
	0: "New",
	1: "Pending",
	2: "Running",
	3: "Complete",
	4: "Failed",
	5: "Error",
	6: "Cancelled",
}
var BuildPhaseType_value = map[string]int32{
	"New":       0,
	"Pending":   1,
	"Running":   2,
	"Complete":  3,
	"Failed":    4,
	"Error":     5,
	"Cancelled": 6,
}

func (x BuildPhaseType) String() string {
	return proto.EnumName(BuildPhaseType_name, int32(x))
}
func (BuildPhaseType) EnumDescriptor() ([]byte, []int) { return fileDescriptorBuilder, []int{6} }

type Feed_FeedSpec_BuilderType int32

const (
	Feed_FeedSpec_OPENSHIFT_ORIGIN_V3  Feed_FeedSpec_BuilderType = 0
	Feed_FeedSpec_DRONE                Feed_FeedSpec_BuilderType = 1
	Feed_FeedSpec_DIRECT_DOCKER_ENGINE Feed_FeedSpec_BuilderType = 2
	Feed_FeedSpec_FSOUZA_DOCKER_CLIENT Feed_FeedSpec_BuilderType = 3
)

var Feed_FeedSpec_BuilderType_name = map[int32]string{
	0: "OPENSHIFT_ORIGIN_V3",
	1: "DRONE",
	2: "DIRECT_DOCKER_ENGINE",
	3: "FSOUZA_DOCKER_CLIENT",
}
var Feed_FeedSpec_BuilderType_value = map[string]int32{
	"OPENSHIFT_ORIGIN_V3":  0,
	"DRONE":                1,
	"DIRECT_DOCKER_ENGINE": 2,
	"FSOUZA_DOCKER_CLIENT": 3,
}

func (x Feed_FeedSpec_BuilderType) String() string {
	return proto.EnumName(Feed_FeedSpec_BuilderType_name, int32(x))
}
func (Feed_FeedSpec_BuilderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorBuilder, []int{4, 0, 0}
}

type Stream_StreamSpec_StreamType int32

const (
	Stream_StreamSpec_FILE Stream_StreamSpec_StreamType = 0
	Stream_StreamSpec_URL  Stream_StreamSpec_StreamType = 1
)

var Stream_StreamSpec_StreamType_name = map[int32]string{
	0: "FILE",
	1: "URL",
}
var Stream_StreamSpec_StreamType_value = map[string]int32{
	"FILE": 0,
	"URL":  1,
}

func (x Stream_StreamSpec_StreamType) String() string {
	return proto.EnumName(Stream_StreamSpec_StreamType_name, int32(x))
}
func (Stream_StreamSpec_StreamType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorBuilder, []int{6, 1, 0}
}

type Stream_StreamSpec_FileType int32

const (
	Stream_StreamSpec_REGULAR Stream_StreamSpec_FileType = 0
	Stream_StreamSpec_ARCHIVE Stream_StreamSpec_FileType = 1
)

var Stream_StreamSpec_FileType_name = map[int32]string{
	0: "REGULAR",
	1: "ARCHIVE",
}
var Stream_StreamSpec_FileType_value = map[string]int32{
	"REGULAR": 0,
	"ARCHIVE": 1,
}

func (x Stream_StreamSpec_FileType) String() string {
	return proto.EnumName(Stream_StreamSpec_FileType_name, int32(x))
}
func (Stream_StreamSpec_FileType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorBuilder, []int{6, 1, 1}
}

type TemplatizedBuilderRequest struct {
	// Template and Option for build definition
	Feed *Feed_FeedSpec `protobuf:"bytes,1,opt,name=feed" json:"feed,omitempty"`
	// File and Archive for binary build
	Archive *Stream_StreamSpec `protobuf:"bytes,2,opt,name=archive" json:"archive,omitempty"`
}

func (m *TemplatizedBuilderRequest) Reset()                    { *m = TemplatizedBuilderRequest{} }
func (m *TemplatizedBuilderRequest) String() string            { return proto.CompactTextString(m) }
func (*TemplatizedBuilderRequest) ProtoMessage()               {}
func (*TemplatizedBuilderRequest) Descriptor() ([]byte, []int) { return fileDescriptorBuilder, []int{0} }

func (m *TemplatizedBuilderRequest) GetFeed() *Feed_FeedSpec {
	if m != nil {
		return m.Feed
	}
	return nil
}

func (m *TemplatizedBuilderRequest) GetArchive() *Stream_StreamSpec {
	if m != nil {
		return m.Archive
	}
	return nil
}

type TemplatizedBuilderResponse struct {
	Feedback *Feed `protobuf:"bytes,1,opt,name=feedback" json:"feedback,omitempty"`
}

func (m *TemplatizedBuilderResponse) Reset()         { *m = TemplatizedBuilderResponse{} }
func (m *TemplatizedBuilderResponse) String() string { return proto.CompactTextString(m) }
func (*TemplatizedBuilderResponse) ProtoMessage()    {}
func (*TemplatizedBuilderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorBuilder, []int{1}
}

func (m *TemplatizedBuilderResponse) GetFeedback() *Feed {
	if m != nil {
		return m.Feedback
	}
	return nil
}

type IdentifiedAuth struct {
	// map Kubernetes secret name
	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Auth   string `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
	Server string `protobuf:"bytes,3,opt,name=server,proto3" json:"server,omitempty"`
	// Credentials
	Username string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	Token    string `protobuf:"bytes,6,opt,name=token,proto3" json:"token,omitempty"`
	// SSH
	SshAuthPrivate string `protobuf:"bytes,7,opt,name=sshAuthPrivate,proto3" json:"sshAuthPrivate,omitempty"`
	// TLS
	TlsCert       string `protobuf:"bytes,8,opt,name=tlsCert,proto3" json:"tlsCert,omitempty"`
	TlsPrivateKey string `protobuf:"bytes,9,opt,name=tlsPrivateKey,proto3" json:"tlsPrivateKey,omitempty"`
	// Docker config.json
	DockerConfigFile *DockerConfigFile `protobuf:"bytes,10,opt,name=dockerConfigFile" json:"dockerConfigFile,omitempty"`
}

func (m *IdentifiedAuth) Reset()                    { *m = IdentifiedAuth{} }
func (m *IdentifiedAuth) String() string            { return proto.CompactTextString(m) }
func (*IdentifiedAuth) ProtoMessage()               {}
func (*IdentifiedAuth) Descriptor() ([]byte, []int) { return fileDescriptorBuilder, []int{2} }

func (m *IdentifiedAuth) GetDockerConfigFile() *DockerConfigFile {
	if m != nil {
		return m.DockerConfigFile
	}
	return nil
}

type VendorAnnotation struct {
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	Kind       string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Vendor     string `protobuf:"bytes,3,opt,name=vendor,proto3" json:"vendor,omitempty"`
}

func (m *VendorAnnotation) Reset()                    { *m = VendorAnnotation{} }
func (m *VendorAnnotation) String() string            { return proto.CompactTextString(m) }
func (*VendorAnnotation) ProtoMessage()               {}
func (*VendorAnnotation) Descriptor() ([]byte, []int) { return fileDescriptorBuilder, []int{3} }

type Feed struct {
	Metadata *ObjectMeta      `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	Spec     *Feed_FeedSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status   *Feed_FeedStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *Feed) Reset()                    { *m = Feed{} }
func (m *Feed) String() string            { return proto.CompactTextString(m) }
func (*Feed) ProtoMessage()               {}
func (*Feed) Descriptor() ([]byte, []int) { return fileDescriptorBuilder, []int{4} }

func (m *Feed) GetMetadata() *ObjectMeta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Feed) GetSpec() *Feed_FeedSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Feed) GetStatus() *Feed_FeedStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// Spec
type Feed_FeedSpec struct {
	Builder            Feed_FeedSpec_BuilderType `protobuf:"varint,1,opt,name=builder,proto3,enum=paas.cicd.pb3.Feed_FeedSpec_BuilderType" json:"builder,omitempty"`
	Template           *Template                 `protobuf:"bytes,2,opt,name=template" json:"template,omitempty"`
	Option             *BuildConfigOption        `protobuf:"bytes,3,opt,name=option" json:"option,omitempty"`
	Auth               []*IdentifiedAuth         `protobuf:"bytes,4,rep,name=auth" json:"auth,omitempty"`
	BuildAtOnceName    string                    `protobuf:"bytes,5,opt,name=buildAtOnceName,proto3" json:"buildAtOnceName,omitempty"`
	ArchiveFilePath    []string                  `protobuf:"bytes,6,rep,name=archiveFilePath" json:"archiveFilePath,omitempty"`
	BuildAtOnceMessage string                    `protobuf:"bytes,7,opt,name=buildAtOnceMessage,proto3" json:"buildAtOnceMessage,omitempty"`
	DisableBuildAtOnce bool                      `protobuf:"varint,8,opt,name=disableBuildAtOnce,proto3" json:"disableBuildAtOnce,omitempty"`
}

func (m *Feed_FeedSpec) Reset()                    { *m = Feed_FeedSpec{} }
func (m *Feed_FeedSpec) String() string            { return proto.CompactTextString(m) }
func (*Feed_FeedSpec) ProtoMessage()               {}
func (*Feed_FeedSpec) Descriptor() ([]byte, []int) { return fileDescriptorBuilder, []int{4, 0} }

func (m *Feed_FeedSpec) GetTemplate() *Template {
	if m != nil {
		return m.Template
	}
	return nil
}

func (m *Feed_FeedSpec) GetOption() *BuildConfigOption {
	if m != nil {
		return m.Option
	}
	return nil
}

func (m *Feed_FeedSpec) GetAuth() []*IdentifiedAuth {
	if m != nil {
		return m.Auth
	}
	return nil
}

// Status
type Feed_FeedStatus struct {
	Phase   string `protobuf:"bytes,1,opt,name=phase,proto3" json:"phase,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Reason  string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *Feed_FeedStatus) Reset()                    { *m = Feed_FeedStatus{} }
func (m *Feed_FeedStatus) String() string            { return proto.CompactTextString(m) }
func (*Feed_FeedStatus) ProtoMessage()               {}
func (*Feed_FeedStatus) Descriptor() ([]byte, []int) { return fileDescriptorBuilder, []int{4, 1} }

type FeedList struct {
	Items []*Feed `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *FeedList) Reset()                    { *m = FeedList{} }
func (m *FeedList) String() string            { return proto.CompactTextString(m) }
func (*FeedList) ProtoMessage()               {}
func (*FeedList) Descriptor() ([]byte, []int) { return fileDescriptorBuilder, []int{5} }

func (m *FeedList) GetItems() []*Feed {
	if m != nil {
		return m.Items
	}
	return nil
}

type Stream struct {
	Metadata *Stream_StreamMeta   `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	Spec     *Stream_StreamSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status   *Stream_StreamStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *Stream) Reset()                    { *m = Stream{} }
func (m *Stream) String() string            { return proto.CompactTextString(m) }
func (*Stream) ProtoMessage()               {}
func (*Stream) Descriptor() ([]byte, []int) { return fileDescriptorBuilder, []int{6} }

func (m *Stream) GetMetadata() *Stream_StreamMeta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Stream) GetSpec() *Stream_StreamSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Stream) GetStatus() *Stream_StreamStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type Stream_StreamMeta struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *Stream_StreamMeta) Reset()                    { *m = Stream_StreamMeta{} }
func (m *Stream_StreamMeta) String() string            { return proto.CompactTextString(m) }
func (*Stream_StreamMeta) ProtoMessage()               {}
func (*Stream_StreamMeta) Descriptor() ([]byte, []int) { return fileDescriptorBuilder, []int{6, 0} }

// Spec
type Stream_StreamSpec struct {
	StreamType  Stream_StreamSpec_StreamType `protobuf:"varint,1,opt,name=streamType,proto3,enum=paas.cicd.pb3.Stream_StreamSpec_StreamType" json:"streamType,omitempty"`
	FileContent []byte                       `protobuf:"bytes,2,opt,name=fileContent,proto3" json:"fileContent,omitempty"`
	Url         string                       `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	FileType    Stream_StreamSpec_FileType   `protobuf:"varint,4,opt,name=fileType,proto3,enum=paas.cicd.pb3.Stream_StreamSpec_FileType" json:"fileType,omitempty"`
	FilePath    string                       `protobuf:"bytes,5,opt,name=filePath,proto3" json:"filePath,omitempty"`
}

func (m *Stream_StreamSpec) Reset()                    { *m = Stream_StreamSpec{} }
func (m *Stream_StreamSpec) String() string            { return proto.CompactTextString(m) }
func (*Stream_StreamSpec) ProtoMessage()               {}
func (*Stream_StreamSpec) Descriptor() ([]byte, []int) { return fileDescriptorBuilder, []int{6, 1} }

// Status
type Stream_StreamStatus struct {
	Phase  string `protobuf:"bytes,1,opt,name=phase,proto3" json:"phase,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *Stream_StreamStatus) Reset()                    { *m = Stream_StreamStatus{} }
func (m *Stream_StreamStatus) String() string            { return proto.CompactTextString(m) }
func (*Stream_StreamStatus) ProtoMessage()               {}
func (*Stream_StreamStatus) Descriptor() ([]byte, []int) { return fileDescriptorBuilder, []int{6, 2} }

type StreamList struct {
	Items []*Stream `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *StreamList) Reset()                    { *m = StreamList{} }
func (m *StreamList) String() string            { return proto.CompactTextString(m) }
func (*StreamList) ProtoMessage()               {}
func (*StreamList) Descriptor() ([]byte, []int) { return fileDescriptorBuilder, []int{7} }

func (m *StreamList) GetItems() []*Stream {
	if m != nil {
		return m.Items
	}
	return nil
}

//
// Definitions
// -----------
// Name: A non-empty string guaranteed to be unique within a given scope at a particular time; used in resource URLs; provided by clients at creation time and encouraged to be human friendly; intended to facilitate creation idempotence and space-uniqueness of singleton objects, distinguish distinct entities, and reference particular entities across operations.
// rfc1035/rfc1123 label (DNS_LABEL): An alphanumeric (a-z, and 0-9) string, with a maximum length of 63 characters, with the '-' character allowed anywhere except the first or last character, suitable for use as a hostname or segment in a domain name.
//
type BuildConfigOption struct {
	Name        string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Project     string            `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Labels      map[string]string `protobuf:"bytes,3,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations map[string]string `protobuf:"bytes,4,rep,name=annotations" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Trigger
	GithubWebHook    []*GitHubWebHookTrigger   `protobuf:"bytes,5,rep,name=githubWebHook" json:"githubWebHook,omitempty"`
	GenericWebHook   []*GenericWebHookTrigger  `protobuf:"bytes,6,rep,name=genericWebHook" json:"genericWebHook,omitempty"`
	ImageChangeHook  []*ImageChangeHookTrigger `protobuf:"bytes,7,rep,name=imageChangeHook" json:"imageChangeHook,omitempty"`
	ConfigChangeHook bool                      `protobuf:"varint,8,opt,name=configChangeHook,proto3" json:"configChangeHook,omitempty"`
	// Run policy
	RunPolicy string `protobuf:"bytes,9,opt,name=runPolicy,proto3" json:"runPolicy,omitempty"`
	// Source
	SourceType         string                                 `protobuf:"bytes,10,opt,name=sourceType,proto3" json:"sourceType,omitempty"`
	BinaryAsFile       string                                 `protobuf:"bytes,11,opt,name=binaryAsFile,proto3" json:"binaryAsFile,omitempty"`
	Dockerfile         string                                 `protobuf:"bytes,12,opt,name=dockerfile,proto3" json:"dockerfile,omitempty"`
	GitSource          *GitSource                             `protobuf:"bytes,13,opt,name=gitSource" json:"gitSource,omitempty"`
	SidecarImageSource []*ImageSource                         `protobuf:"bytes,14,rep,name=sidecarImageSource" json:"sidecarImageSource,omitempty"`
	ContextDir         string                                 `protobuf:"bytes,15,opt,name=contextDir,proto3" json:"contextDir,omitempty"`
	RepositoryAuth     *IdentifiedAuth                        `protobuf:"bytes,16,opt,name=repositoryAuth" json:"repositoryAuth,omitempty"`
	AuthAsBuildSource  []*BuildConfigOption_AuthAsBuildSource `protobuf:"bytes,17,rep,name=authAsBuildSource" json:"authAsBuildSource,omitempty"`
	// Source Revision
	SourceRevisionType string             `protobuf:"bytes,18,opt,name=sourceRevisionType,proto3" json:"sourceRevisionType,omitempty"`
	GitSourceRevision  *GitSourceRevision `protobuf:"bytes,19,opt,name=gitSourceRevision" json:"gitSourceRevision,omitempty"`
	// Build Strategy
	BuildStrategyType       string                   `protobuf:"bytes,20,opt,name=buildStrategyType,proto3" json:"buildStrategyType,omitempty"`
	CustomBuildStrategy     *CustomBuildStrategy     `protobuf:"bytes,21,opt,name=customBuildStrategy" json:"customBuildStrategy,omitempty"`
	DockerBuildStrategy     *DockerBuildStrategy     `protobuf:"bytes,22,opt,name=dockerBuildStrategy" json:"dockerBuildStrategy,omitempty"`
	SourceBuildStrategy     *SourceBuildStrategy     `protobuf:"bytes,23,opt,name=sourceBuildStrategy" json:"sourceBuildStrategy,omitempty"`
	JenkinsPipelineStrategy *JenkinsPipelineStrategy `protobuf:"bytes,24,opt,name=jenkinsPipelineStrategy" json:"jenkinsPipelineStrategy,omitempty"`
	// Output
	ImageKind    string          `protobuf:"bytes,25,opt,name=imageKind,proto3" json:"imageKind,omitempty"`
	ImageName    string          `protobuf:"bytes,26,opt,name=imageName,proto3" json:"imageName,omitempty"`
	RegistryAuth *IdentifiedAuth `protobuf:"bytes,27,opt,name=registryAuth" json:"registryAuth,omitempty"`
	// Resource
	ResourceLimits   map[string]string `protobuf:"bytes,28,rep,name=resourceLimits" json:"resourceLimits,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ResourceRequests map[string]string `protobuf:"bytes,29,rep,name=resourceRequests" json:"resourceRequests,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Commit Hook
	PostCommitCommand []string `protobuf:"bytes,30,rep,name=postCommitCommand" json:"postCommitCommand,omitempty"`
	PostCommitArgs    []string `protobuf:"bytes,31,rep,name=postCommitArgs" json:"postCommitArgs,omitempty"`
	PostCommitScript  string   `protobuf:"bytes,32,opt,name=postCommitScript,proto3" json:"postCommitScript,omitempty"`
	// Timeout
	CompletionDeadlineSeconds int64 `protobuf:"varint,33,opt,name=completionDeadlineSeconds,proto3" json:"completionDeadlineSeconds,omitempty"`
}

func (m *BuildConfigOption) Reset()                    { *m = BuildConfigOption{} }
func (m *BuildConfigOption) String() string            { return proto.CompactTextString(m) }
func (*BuildConfigOption) ProtoMessage()               {}
func (*BuildConfigOption) Descriptor() ([]byte, []int) { return fileDescriptorBuilder, []int{8} }

func (m *BuildConfigOption) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *BuildConfigOption) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *BuildConfigOption) GetGithubWebHook() []*GitHubWebHookTrigger {
	if m != nil {
		return m.GithubWebHook
	}
	return nil
}

func (m *BuildConfigOption) GetGenericWebHook() []*GenericWebHookTrigger {
	if m != nil {
		return m.GenericWebHook
	}
	return nil
}

func (m *BuildConfigOption) GetImageChangeHook() []*ImageChangeHookTrigger {
	if m != nil {
		return m.ImageChangeHook
	}
	return nil
}

func (m *BuildConfigOption) GetGitSource() *GitSource {
	if m != nil {
		return m.GitSource
	}
	return nil
}

func (m *BuildConfigOption) GetSidecarImageSource() []*ImageSource {
	if m != nil {
		return m.SidecarImageSource
	}
	return nil
}

func (m *BuildConfigOption) GetRepositoryAuth() *IdentifiedAuth {
	if m != nil {
		return m.RepositoryAuth
	}
	return nil
}

func (m *BuildConfigOption) GetAuthAsBuildSource() []*BuildConfigOption_AuthAsBuildSource {
	if m != nil {
		return m.AuthAsBuildSource
	}
	return nil
}

func (m *BuildConfigOption) GetGitSourceRevision() *GitSourceRevision {
	if m != nil {
		return m.GitSourceRevision
	}
	return nil
}

func (m *BuildConfigOption) GetCustomBuildStrategy() *CustomBuildStrategy {
	if m != nil {
		return m.CustomBuildStrategy
	}
	return nil
}

func (m *BuildConfigOption) GetDockerBuildStrategy() *DockerBuildStrategy {
	if m != nil {
		return m.DockerBuildStrategy
	}
	return nil
}

func (m *BuildConfigOption) GetSourceBuildStrategy() *SourceBuildStrategy {
	if m != nil {
		return m.SourceBuildStrategy
	}
	return nil
}

func (m *BuildConfigOption) GetJenkinsPipelineStrategy() *JenkinsPipelineStrategy {
	if m != nil {
		return m.JenkinsPipelineStrategy
	}
	return nil
}

func (m *BuildConfigOption) GetRegistryAuth() *IdentifiedAuth {
	if m != nil {
		return m.RegistryAuth
	}
	return nil
}

func (m *BuildConfigOption) GetResourceLimits() map[string]string {
	if m != nil {
		return m.ResourceLimits
	}
	return nil
}

func (m *BuildConfigOption) GetResourceRequests() map[string]string {
	if m != nil {
		return m.ResourceRequests
	}
	return nil
}

type BuildConfigOption_AuthAsBuildSource struct {
	Auth           *IdentifiedAuth `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	DestinationDir string          `protobuf:"bytes,2,opt,name=destinationDir,proto3" json:"destinationDir,omitempty"`
}

func (m *BuildConfigOption_AuthAsBuildSource) Reset()         { *m = BuildConfigOption_AuthAsBuildSource{} }
func (m *BuildConfigOption_AuthAsBuildSource) String() string { return proto.CompactTextString(m) }
func (*BuildConfigOption_AuthAsBuildSource) ProtoMessage()    {}
func (*BuildConfigOption_AuthAsBuildSource) Descriptor() ([]byte, []int) {
	return fileDescriptorBuilder, []int{8, 2}
}

func (m *BuildConfigOption_AuthAsBuildSource) GetAuth() *IdentifiedAuth {
	if m != nil {
		return m.Auth
	}
	return nil
}

type GitSource struct {
	Uri        string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Ref        string `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	Path       string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	HttpProxy  string `protobuf:"bytes,4,opt,name=httpProxy,proto3" json:"httpProxy,omitempty"`
	HttpsProxy string `protobuf:"bytes,5,opt,name=httpsProxy,proto3" json:"httpsProxy,omitempty"`
}

func (m *GitSource) Reset()                    { *m = GitSource{} }
func (m *GitSource) String() string            { return proto.CompactTextString(m) }
func (*GitSource) ProtoMessage()               {}
func (*GitSource) Descriptor() ([]byte, []int) { return fileDescriptorBuilder, []int{9} }

type ImageSource struct {
	Kind         string                 `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Name         string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Paths        []*ImagePathMappingDir `protobuf:"bytes,3,rep,name=paths" json:"paths,omitempty"`
	RegistryAuth *IdentifiedAuth        `protobuf:"bytes,4,opt,name=registryAuth" json:"registryAuth,omitempty"`
}

func (m *ImageSource) Reset()                    { *m = ImageSource{} }
func (m *ImageSource) String() string            { return proto.CompactTextString(m) }
func (*ImageSource) ProtoMessage()               {}
func (*ImageSource) Descriptor() ([]byte, []int) { return fileDescriptorBuilder, []int{10} }

func (m *ImageSource) GetPaths() []*ImagePathMappingDir {
	if m != nil {
		return m.Paths
	}
	return nil
}

func (m *ImageSource) GetRegistryAuth() *IdentifiedAuth {
	if m != nil {
		return m.RegistryAuth
	}
	return nil
}

type ImagePathMappingDir struct {
	SourcePath     string `protobuf:"bytes,1,opt,name=sourcePath,proto3" json:"sourcePath,omitempty"`
	DestinationDir string `protobuf:"bytes,2,opt,name=destinationDir,proto3" json:"destinationDir,omitempty"`
}

func (m *ImagePathMappingDir) Reset()                    { *m = ImagePathMappingDir{} }
func (m *ImagePathMappingDir) String() string            { return proto.CompactTextString(m) }
func (*ImagePathMappingDir) ProtoMessage()               {}
func (*ImagePathMappingDir) Descriptor() ([]byte, []int) { return fileDescriptorBuilder, []int{11} }

type GitSourceRevision struct {
	Commit    string                               `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	Author    *GitSourceRevision_SourceControlUser `protobuf:"bytes,2,opt,name=author" json:"author,omitempty"`
	Committer *GitSourceRevision_SourceControlUser `protobuf:"bytes,3,opt,name=committer" json:"committer,omitempty"`
	Message   string                               `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *GitSourceRevision) Reset()                    { *m = GitSourceRevision{} }
func (m *GitSourceRevision) String() string            { return proto.CompactTextString(m) }
func (*GitSourceRevision) ProtoMessage()               {}
func (*GitSourceRevision) Descriptor() ([]byte, []int) { return fileDescriptorBuilder, []int{12} }

func (m *GitSourceRevision) GetAuthor() *GitSourceRevision_SourceControlUser {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *GitSourceRevision) GetCommitter() *GitSourceRevision_SourceControlUser {
	if m != nil {
		return m.Committer
	}
	return nil
}

type GitSourceRevision_SourceControlUser struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
}

func (m *GitSourceRevision_SourceControlUser) Reset()         { *m = GitSourceRevision_SourceControlUser{} }
func (m *GitSourceRevision_SourceControlUser) String() string { return proto.CompactTextString(m) }
func (*GitSourceRevision_SourceControlUser) ProtoMessage()    {}
func (*GitSourceRevision_SourceControlUser) Descriptor() ([]byte, []int) {
	return fileDescriptorBuilder, []int{12, 0}
}

type CustomBuildStrategy struct {
	ImageKind          string                           `protobuf:"bytes,1,opt,name=imageKind,proto3" json:"imageKind,omitempty"`
	ImageName          string                           `protobuf:"bytes,2,opt,name=imageName,proto3" json:"imageName,omitempty"`
	RegistryAuth       *IdentifiedAuth                  `protobuf:"bytes,3,opt,name=registryAuth" json:"registryAuth,omitempty"`
	Env                map[string]string                `protobuf:"bytes,4,rep,name=env" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ExposeDockerSocket bool                             `protobuf:"varint,5,opt,name=exposeDockerSocket,proto3" json:"exposeDockerSocket,omitempty"`
	ForcePull          bool                             `protobuf:"varint,6,opt,name=forcePull,proto3" json:"forcePull,omitempty"`
	AuthVol            []*CustomBuildStrategy_AuthMount `protobuf:"bytes,7,rep,name=authVol" json:"authVol,omitempty"`
	BuildAPIVersion    string                           `protobuf:"bytes,8,opt,name=buildAPIVersion,proto3" json:"buildAPIVersion,omitempty"`
}

func (m *CustomBuildStrategy) Reset()                    { *m = CustomBuildStrategy{} }
func (m *CustomBuildStrategy) String() string            { return proto.CompactTextString(m) }
func (*CustomBuildStrategy) ProtoMessage()               {}
func (*CustomBuildStrategy) Descriptor() ([]byte, []int) { return fileDescriptorBuilder, []int{13} }

func (m *CustomBuildStrategy) GetRegistryAuth() *IdentifiedAuth {
	if m != nil {
		return m.RegistryAuth
	}
	return nil
}

func (m *CustomBuildStrategy) GetEnv() map[string]string {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *CustomBuildStrategy) GetAuthVol() []*CustomBuildStrategy_AuthMount {
	if m != nil {
		return m.AuthVol
	}
	return nil
}

type CustomBuildStrategy_AuthMount struct {
	Auth      *IdentifiedAuth `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	MountPath string          `protobuf:"bytes,2,opt,name=mountPath,proto3" json:"mountPath,omitempty"`
}

func (m *CustomBuildStrategy_AuthMount) Reset()         { *m = CustomBuildStrategy_AuthMount{} }
func (m *CustomBuildStrategy_AuthMount) String() string { return proto.CompactTextString(m) }
func (*CustomBuildStrategy_AuthMount) ProtoMessage()    {}
func (*CustomBuildStrategy_AuthMount) Descriptor() ([]byte, []int) {
	return fileDescriptorBuilder, []int{13, 1}
}

func (m *CustomBuildStrategy_AuthMount) GetAuth() *IdentifiedAuth {
	if m != nil {
		return m.Auth
	}
	return nil
}

type DockerBuildStrategy struct {
	ImageKind      string            `protobuf:"bytes,1,opt,name=imageKind,proto3" json:"imageKind,omitempty"`
	ImageName      string            `protobuf:"bytes,2,opt,name=imageName,proto3" json:"imageName,omitempty"`
	RegistryAuth   *IdentifiedAuth   `protobuf:"bytes,3,opt,name=registryAuth" json:"registryAuth,omitempty"`
	NoCache        bool              `protobuf:"varint,4,opt,name=noCache,proto3" json:"noCache,omitempty"`
	Env            map[string]string `protobuf:"bytes,5,rep,name=env" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ForcePull      bool              `protobuf:"varint,6,opt,name=forcePull,proto3" json:"forcePull,omitempty"`
	DockerfilePath string            `protobuf:"bytes,7,opt,name=dockerfilePath,proto3" json:"dockerfilePath,omitempty"`
}

func (m *DockerBuildStrategy) Reset()                    { *m = DockerBuildStrategy{} }
func (m *DockerBuildStrategy) String() string            { return proto.CompactTextString(m) }
func (*DockerBuildStrategy) ProtoMessage()               {}
func (*DockerBuildStrategy) Descriptor() ([]byte, []int) { return fileDescriptorBuilder, []int{14} }

func (m *DockerBuildStrategy) GetRegistryAuth() *IdentifiedAuth {
	if m != nil {
		return m.RegistryAuth
	}
	return nil
}

func (m *DockerBuildStrategy) GetEnv() map[string]string {
	if m != nil {
		return m.Env
	}
	return nil
}

type SourceBuildStrategy struct {
	ImageKind        string                 `protobuf:"bytes,1,opt,name=imageKind,proto3" json:"imageKind,omitempty"`
	ImageName        string                 `protobuf:"bytes,2,opt,name=imageName,proto3" json:"imageName,omitempty"`
	RegistryAuth     *IdentifiedAuth        `protobuf:"bytes,3,opt,name=registryAuth" json:"registryAuth,omitempty"`
	Env              map[string]string      `protobuf:"bytes,4,rep,name=env" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Scripts          string                 `protobuf:"bytes,5,opt,name=scripts,proto3" json:"scripts,omitempty"`
	Incremental      bool                   `protobuf:"varint,6,opt,name=incremental,proto3" json:"incremental,omitempty"`
	ForcePull        bool                   `protobuf:"varint,7,opt,name=forcePull,proto3" json:"forcePull,omitempty"`
	RuntimeImageKind string                 `protobuf:"bytes,8,opt,name=runtimeImageKind,proto3" json:"runtimeImageKind,omitempty"`
	RuntimeImageName string                 `protobuf:"bytes,9,opt,name=runtimeImageName,proto3" json:"runtimeImageName,omitempty"`
	RuntimeArtifacts []*ImagePathMappingDir `protobuf:"bytes,10,rep,name=runtimeArtifacts" json:"runtimeArtifacts,omitempty"`
}

func (m *SourceBuildStrategy) Reset()                    { *m = SourceBuildStrategy{} }
func (m *SourceBuildStrategy) String() string            { return proto.CompactTextString(m) }
func (*SourceBuildStrategy) ProtoMessage()               {}
func (*SourceBuildStrategy) Descriptor() ([]byte, []int) { return fileDescriptorBuilder, []int{15} }

func (m *SourceBuildStrategy) GetRegistryAuth() *IdentifiedAuth {
	if m != nil {
		return m.RegistryAuth
	}
	return nil
}

func (m *SourceBuildStrategy) GetEnv() map[string]string {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *SourceBuildStrategy) GetRuntimeArtifacts() []*ImagePathMappingDir {
	if m != nil {
		return m.RuntimeArtifacts
	}
	return nil
}

type JenkinsPipelineStrategy struct {
	JenkinsfilePath string `protobuf:"bytes,1,opt,name=jenkinsfilePath,proto3" json:"jenkinsfilePath,omitempty"`
	Jenkinsfile     string `protobuf:"bytes,2,opt,name=jenkinsfile,proto3" json:"jenkinsfile,omitempty"`
}

func (m *JenkinsPipelineStrategy) Reset()                    { *m = JenkinsPipelineStrategy{} }
func (m *JenkinsPipelineStrategy) String() string            { return proto.CompactTextString(m) }
func (*JenkinsPipelineStrategy) ProtoMessage()               {}
func (*JenkinsPipelineStrategy) Descriptor() ([]byte, []int) { return fileDescriptorBuilder, []int{16} }

type GitHubWebHookTrigger struct {
	Auth *IdentifiedAuth `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
}

func (m *GitHubWebHookTrigger) Reset()                    { *m = GitHubWebHookTrigger{} }
func (m *GitHubWebHookTrigger) String() string            { return proto.CompactTextString(m) }
func (*GitHubWebHookTrigger) ProtoMessage()               {}
func (*GitHubWebHookTrigger) Descriptor() ([]byte, []int) { return fileDescriptorBuilder, []int{17} }

func (m *GitHubWebHookTrigger) GetAuth() *IdentifiedAuth {
	if m != nil {
		return m.Auth
	}
	return nil
}

type GenericWebHookTrigger struct {
	Auth     *IdentifiedAuth `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	AllowEnv bool            `protobuf:"varint,2,opt,name=allowEnv,proto3" json:"allowEnv,omitempty"`
}

func (m *GenericWebHookTrigger) Reset()                    { *m = GenericWebHookTrigger{} }
func (m *GenericWebHookTrigger) String() string            { return proto.CompactTextString(m) }
func (*GenericWebHookTrigger) ProtoMessage()               {}
func (*GenericWebHookTrigger) Descriptor() ([]byte, []int) { return fileDescriptorBuilder, []int{18} }

func (m *GenericWebHookTrigger) GetAuth() *IdentifiedAuth {
	if m != nil {
		return m.Auth
	}
	return nil
}

type ImageChangeHookTrigger struct {
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ImageChangeHookTrigger) Reset()                    { *m = ImageChangeHookTrigger{} }
func (m *ImageChangeHookTrigger) String() string            { return proto.CompactTextString(m) }
func (*ImageChangeHookTrigger) ProtoMessage()               {}
func (*ImageChangeHookTrigger) Descriptor() ([]byte, []int) { return fileDescriptorBuilder, []int{19} }

func init() {
	proto.RegisterType((*TemplatizedBuilderRequest)(nil), "paas.cicd.pb3.TemplatizedBuilderRequest")
	proto.RegisterType((*TemplatizedBuilderResponse)(nil), "paas.cicd.pb3.TemplatizedBuilderResponse")
	proto.RegisterType((*IdentifiedAuth)(nil), "paas.cicd.pb3.IdentifiedAuth")
	proto.RegisterType((*VendorAnnotation)(nil), "paas.cicd.pb3.VendorAnnotation")
	proto.RegisterType((*Feed)(nil), "paas.cicd.pb3.Feed")
	proto.RegisterType((*Feed_FeedSpec)(nil), "paas.cicd.pb3.Feed.FeedSpec")
	proto.RegisterType((*Feed_FeedStatus)(nil), "paas.cicd.pb3.Feed.FeedStatus")
	proto.RegisterType((*FeedList)(nil), "paas.cicd.pb3.FeedList")
	proto.RegisterType((*Stream)(nil), "paas.cicd.pb3.Stream")
	proto.RegisterType((*Stream_StreamMeta)(nil), "paas.cicd.pb3.Stream.StreamMeta")
	proto.RegisterType((*Stream_StreamSpec)(nil), "paas.cicd.pb3.Stream.StreamSpec")
	proto.RegisterType((*Stream_StreamStatus)(nil), "paas.cicd.pb3.Stream.StreamStatus")
	proto.RegisterType((*StreamList)(nil), "paas.cicd.pb3.StreamList")
	proto.RegisterType((*BuildConfigOption)(nil), "paas.cicd.pb3.BuildConfigOption")
	proto.RegisterType((*BuildConfigOption_AuthAsBuildSource)(nil), "paas.cicd.pb3.BuildConfigOption.AuthAsBuildSource")
	proto.RegisterType((*GitSource)(nil), "paas.cicd.pb3.GitSource")
	proto.RegisterType((*ImageSource)(nil), "paas.cicd.pb3.ImageSource")
	proto.RegisterType((*ImagePathMappingDir)(nil), "paas.cicd.pb3.ImagePathMappingDir")
	proto.RegisterType((*GitSourceRevision)(nil), "paas.cicd.pb3.GitSourceRevision")
	proto.RegisterType((*GitSourceRevision_SourceControlUser)(nil), "paas.cicd.pb3.GitSourceRevision.SourceControlUser")
	proto.RegisterType((*CustomBuildStrategy)(nil), "paas.cicd.pb3.CustomBuildStrategy")
	proto.RegisterType((*CustomBuildStrategy_AuthMount)(nil), "paas.cicd.pb3.CustomBuildStrategy.AuthMount")
	proto.RegisterType((*DockerBuildStrategy)(nil), "paas.cicd.pb3.DockerBuildStrategy")
	proto.RegisterType((*SourceBuildStrategy)(nil), "paas.cicd.pb3.SourceBuildStrategy")
	proto.RegisterType((*JenkinsPipelineStrategy)(nil), "paas.cicd.pb3.JenkinsPipelineStrategy")
	proto.RegisterType((*GitHubWebHookTrigger)(nil), "paas.cicd.pb3.GitHubWebHookTrigger")
	proto.RegisterType((*GenericWebHookTrigger)(nil), "paas.cicd.pb3.GenericWebHookTrigger")
	proto.RegisterType((*ImageChangeHookTrigger)(nil), "paas.cicd.pb3.ImageChangeHookTrigger")
	proto.RegisterEnum("paas.cicd.pb3.BuildSourceType", BuildSourceType_name, BuildSourceType_value)
	proto.RegisterEnum("paas.cicd.pb3.BuildStrategyType", BuildStrategyType_name, BuildStrategyType_value)
	proto.RegisterEnum("paas.cicd.pb3.ImageKindType", ImageKindType_name, ImageKindType_value)
	proto.RegisterEnum("paas.cicd.pb3.SourceRevisionType", SourceRevisionType_name, SourceRevisionType_value)
	proto.RegisterEnum("paas.cicd.pb3.BuildPolicyType", BuildPolicyType_name, BuildPolicyType_value)
	proto.RegisterEnum("paas.cicd.pb3.BuildTriggerType", BuildTriggerType_name, BuildTriggerType_value)
	proto.RegisterEnum("paas.cicd.pb3.BuildPhaseType", BuildPhaseType_name, BuildPhaseType_value)
	proto.RegisterEnum("paas.cicd.pb3.Feed_FeedSpec_BuilderType", Feed_FeedSpec_BuilderType_name, Feed_FeedSpec_BuilderType_value)
	proto.RegisterEnum("paas.cicd.pb3.Stream_StreamSpec_StreamType", Stream_StreamSpec_StreamType_name, Stream_StreamSpec_StreamType_value)
	proto.RegisterEnum("paas.cicd.pb3.Stream_StreamSpec_FileType", Stream_StreamSpec_FileType_name, Stream_StreamSpec_FileType_value)
}
func (m *TemplatizedBuilderRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *TemplatizedBuilderRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Feed != nil {
		data[i] = 0xa
		i++
		i = encodeVarintBuilder(data, i, uint64(m.Feed.Size()))
		n1, err := m.Feed.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Archive != nil {
		data[i] = 0x12
		i++
		i = encodeVarintBuilder(data, i, uint64(m.Archive.Size()))
		n2, err := m.Archive.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *TemplatizedBuilderResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *TemplatizedBuilderResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Feedback != nil {
		data[i] = 0xa
		i++
		i = encodeVarintBuilder(data, i, uint64(m.Feedback.Size()))
		n3, err := m.Feedback.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *IdentifiedAuth) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *IdentifiedAuth) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	if len(m.Auth) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.Auth)))
		i += copy(data[i:], m.Auth)
	}
	if len(m.Server) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.Server)))
		i += copy(data[i:], m.Server)
	}
	if len(m.Username) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.Username)))
		i += copy(data[i:], m.Username)
	}
	if len(m.Password) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.Password)))
		i += copy(data[i:], m.Password)
	}
	if len(m.Token) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	if len(m.SshAuthPrivate) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.SshAuthPrivate)))
		i += copy(data[i:], m.SshAuthPrivate)
	}
	if len(m.TlsCert) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.TlsCert)))
		i += copy(data[i:], m.TlsCert)
	}
	if len(m.TlsPrivateKey) > 0 {
		data[i] = 0x4a
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.TlsPrivateKey)))
		i += copy(data[i:], m.TlsPrivateKey)
	}
	if m.DockerConfigFile != nil {
		data[i] = 0x52
		i++
		i = encodeVarintBuilder(data, i, uint64(m.DockerConfigFile.Size()))
		n4, err := m.DockerConfigFile.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *VendorAnnotation) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *VendorAnnotation) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiVersion) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.ApiVersion)))
		i += copy(data[i:], m.ApiVersion)
	}
	if len(m.Kind) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.Kind)))
		i += copy(data[i:], m.Kind)
	}
	if len(m.Vendor) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.Vendor)))
		i += copy(data[i:], m.Vendor)
	}
	return i, nil
}

func (m *Feed) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Feed) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		data[i] = 0xa
		i++
		i = encodeVarintBuilder(data, i, uint64(m.Metadata.Size()))
		n5, err := m.Metadata.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Spec != nil {
		data[i] = 0x12
		i++
		i = encodeVarintBuilder(data, i, uint64(m.Spec.Size()))
		n6, err := m.Spec.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Status != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintBuilder(data, i, uint64(m.Status.Size()))
		n7, err := m.Status.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *Feed_FeedSpec) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Feed_FeedSpec) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Builder != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintBuilder(data, i, uint64(m.Builder))
	}
	if m.Template != nil {
		data[i] = 0x12
		i++
		i = encodeVarintBuilder(data, i, uint64(m.Template.Size()))
		n8, err := m.Template.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Option != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintBuilder(data, i, uint64(m.Option.Size()))
		n9, err := m.Option.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if len(m.Auth) > 0 {
		for _, msg := range m.Auth {
			data[i] = 0x22
			i++
			i = encodeVarintBuilder(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.BuildAtOnceName) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.BuildAtOnceName)))
		i += copy(data[i:], m.BuildAtOnceName)
	}
	if len(m.ArchiveFilePath) > 0 {
		for _, s := range m.ArchiveFilePath {
			data[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if len(m.BuildAtOnceMessage) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.BuildAtOnceMessage)))
		i += copy(data[i:], m.BuildAtOnceMessage)
	}
	if m.DisableBuildAtOnce {
		data[i] = 0x40
		i++
		if m.DisableBuildAtOnce {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Feed_FeedStatus) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Feed_FeedStatus) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Phase) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.Phase)))
		i += copy(data[i:], m.Phase)
	}
	if len(m.Message) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.Message)))
		i += copy(data[i:], m.Message)
	}
	if len(m.Reason) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.Reason)))
		i += copy(data[i:], m.Reason)
	}
	return i, nil
}

func (m *FeedList) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *FeedList) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			data[i] = 0xa
			i++
			i = encodeVarintBuilder(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Stream) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Stream) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		data[i] = 0xa
		i++
		i = encodeVarintBuilder(data, i, uint64(m.Metadata.Size()))
		n10, err := m.Metadata.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Spec != nil {
		data[i] = 0x12
		i++
		i = encodeVarintBuilder(data, i, uint64(m.Spec.Size()))
		n11, err := m.Spec.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Status != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintBuilder(data, i, uint64(m.Status.Size()))
		n12, err := m.Status.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *Stream_StreamMeta) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Stream_StreamMeta) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	return i, nil
}

func (m *Stream_StreamSpec) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Stream_StreamSpec) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StreamType != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintBuilder(data, i, uint64(m.StreamType))
	}
	if m.FileContent != nil {
		if len(m.FileContent) > 0 {
			data[i] = 0x12
			i++
			i = encodeVarintBuilder(data, i, uint64(len(m.FileContent)))
			i += copy(data[i:], m.FileContent)
		}
	}
	if len(m.Url) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.Url)))
		i += copy(data[i:], m.Url)
	}
	if m.FileType != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintBuilder(data, i, uint64(m.FileType))
	}
	if len(m.FilePath) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.FilePath)))
		i += copy(data[i:], m.FilePath)
	}
	return i, nil
}

func (m *Stream_StreamStatus) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Stream_StreamStatus) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Phase) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.Phase)))
		i += copy(data[i:], m.Phase)
	}
	if len(m.Reason) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.Reason)))
		i += copy(data[i:], m.Reason)
	}
	return i, nil
}

func (m *StreamList) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StreamList) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			data[i] = 0xa
			i++
			i = encodeVarintBuilder(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BuildConfigOption) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *BuildConfigOption) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Project) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.Project)))
		i += copy(data[i:], m.Project)
	}
	if len(m.Labels) > 0 {
		for k, _ := range m.Labels {
			data[i] = 0x1a
			i++
			v := m.Labels[k]
			mapSize := 1 + len(k) + sovBuilder(uint64(len(k))) + 1 + len(v) + sovBuilder(uint64(len(v)))
			i = encodeVarintBuilder(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintBuilder(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintBuilder(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	if len(m.Annotations) > 0 {
		for k, _ := range m.Annotations {
			data[i] = 0x22
			i++
			v := m.Annotations[k]
			mapSize := 1 + len(k) + sovBuilder(uint64(len(k))) + 1 + len(v) + sovBuilder(uint64(len(v)))
			i = encodeVarintBuilder(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintBuilder(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintBuilder(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	if len(m.GithubWebHook) > 0 {
		for _, msg := range m.GithubWebHook {
			data[i] = 0x2a
			i++
			i = encodeVarintBuilder(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.GenericWebHook) > 0 {
		for _, msg := range m.GenericWebHook {
			data[i] = 0x32
			i++
			i = encodeVarintBuilder(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ImageChangeHook) > 0 {
		for _, msg := range m.ImageChangeHook {
			data[i] = 0x3a
			i++
			i = encodeVarintBuilder(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ConfigChangeHook {
		data[i] = 0x40
		i++
		if m.ConfigChangeHook {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.RunPolicy) > 0 {
		data[i] = 0x4a
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.RunPolicy)))
		i += copy(data[i:], m.RunPolicy)
	}
	if len(m.SourceType) > 0 {
		data[i] = 0x52
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.SourceType)))
		i += copy(data[i:], m.SourceType)
	}
	if len(m.BinaryAsFile) > 0 {
		data[i] = 0x5a
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.BinaryAsFile)))
		i += copy(data[i:], m.BinaryAsFile)
	}
	if len(m.Dockerfile) > 0 {
		data[i] = 0x62
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.Dockerfile)))
		i += copy(data[i:], m.Dockerfile)
	}
	if m.GitSource != nil {
		data[i] = 0x6a
		i++
		i = encodeVarintBuilder(data, i, uint64(m.GitSource.Size()))
		n13, err := m.GitSource.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if len(m.SidecarImageSource) > 0 {
		for _, msg := range m.SidecarImageSource {
			data[i] = 0x72
			i++
			i = encodeVarintBuilder(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ContextDir) > 0 {
		data[i] = 0x7a
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.ContextDir)))
		i += copy(data[i:], m.ContextDir)
	}
	if m.RepositoryAuth != nil {
		data[i] = 0x82
		i++
		data[i] = 0x1
		i++
		i = encodeVarintBuilder(data, i, uint64(m.RepositoryAuth.Size()))
		n14, err := m.RepositoryAuth.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if len(m.AuthAsBuildSource) > 0 {
		for _, msg := range m.AuthAsBuildSource {
			data[i] = 0x8a
			i++
			data[i] = 0x1
			i++
			i = encodeVarintBuilder(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.SourceRevisionType) > 0 {
		data[i] = 0x92
		i++
		data[i] = 0x1
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.SourceRevisionType)))
		i += copy(data[i:], m.SourceRevisionType)
	}
	if m.GitSourceRevision != nil {
		data[i] = 0x9a
		i++
		data[i] = 0x1
		i++
		i = encodeVarintBuilder(data, i, uint64(m.GitSourceRevision.Size()))
		n15, err := m.GitSourceRevision.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if len(m.BuildStrategyType) > 0 {
		data[i] = 0xa2
		i++
		data[i] = 0x1
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.BuildStrategyType)))
		i += copy(data[i:], m.BuildStrategyType)
	}
	if m.CustomBuildStrategy != nil {
		data[i] = 0xaa
		i++
		data[i] = 0x1
		i++
		i = encodeVarintBuilder(data, i, uint64(m.CustomBuildStrategy.Size()))
		n16, err := m.CustomBuildStrategy.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.DockerBuildStrategy != nil {
		data[i] = 0xb2
		i++
		data[i] = 0x1
		i++
		i = encodeVarintBuilder(data, i, uint64(m.DockerBuildStrategy.Size()))
		n17, err := m.DockerBuildStrategy.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.SourceBuildStrategy != nil {
		data[i] = 0xba
		i++
		data[i] = 0x1
		i++
		i = encodeVarintBuilder(data, i, uint64(m.SourceBuildStrategy.Size()))
		n18, err := m.SourceBuildStrategy.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.JenkinsPipelineStrategy != nil {
		data[i] = 0xc2
		i++
		data[i] = 0x1
		i++
		i = encodeVarintBuilder(data, i, uint64(m.JenkinsPipelineStrategy.Size()))
		n19, err := m.JenkinsPipelineStrategy.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if len(m.ImageKind) > 0 {
		data[i] = 0xca
		i++
		data[i] = 0x1
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.ImageKind)))
		i += copy(data[i:], m.ImageKind)
	}
	if len(m.ImageName) > 0 {
		data[i] = 0xd2
		i++
		data[i] = 0x1
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.ImageName)))
		i += copy(data[i:], m.ImageName)
	}
	if m.RegistryAuth != nil {
		data[i] = 0xda
		i++
		data[i] = 0x1
		i++
		i = encodeVarintBuilder(data, i, uint64(m.RegistryAuth.Size()))
		n20, err := m.RegistryAuth.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if len(m.ResourceLimits) > 0 {
		for k, _ := range m.ResourceLimits {
			data[i] = 0xe2
			i++
			data[i] = 0x1
			i++
			v := m.ResourceLimits[k]
			mapSize := 1 + len(k) + sovBuilder(uint64(len(k))) + 1 + len(v) + sovBuilder(uint64(len(v)))
			i = encodeVarintBuilder(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintBuilder(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintBuilder(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	if len(m.ResourceRequests) > 0 {
		for k, _ := range m.ResourceRequests {
			data[i] = 0xea
			i++
			data[i] = 0x1
			i++
			v := m.ResourceRequests[k]
			mapSize := 1 + len(k) + sovBuilder(uint64(len(k))) + 1 + len(v) + sovBuilder(uint64(len(v)))
			i = encodeVarintBuilder(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintBuilder(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintBuilder(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	if len(m.PostCommitCommand) > 0 {
		for _, s := range m.PostCommitCommand {
			data[i] = 0xf2
			i++
			data[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if len(m.PostCommitArgs) > 0 {
		for _, s := range m.PostCommitArgs {
			data[i] = 0xfa
			i++
			data[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if len(m.PostCommitScript) > 0 {
		data[i] = 0x82
		i++
		data[i] = 0x2
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.PostCommitScript)))
		i += copy(data[i:], m.PostCommitScript)
	}
	if m.CompletionDeadlineSeconds != 0 {
		data[i] = 0x88
		i++
		data[i] = 0x2
		i++
		i = encodeVarintBuilder(data, i, uint64(m.CompletionDeadlineSeconds))
	}
	return i, nil
}

func (m *BuildConfigOption_AuthAsBuildSource) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *BuildConfigOption_AuthAsBuildSource) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Auth != nil {
		data[i] = 0xa
		i++
		i = encodeVarintBuilder(data, i, uint64(m.Auth.Size()))
		n21, err := m.Auth.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if len(m.DestinationDir) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.DestinationDir)))
		i += copy(data[i:], m.DestinationDir)
	}
	return i, nil
}

func (m *GitSource) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GitSource) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uri) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.Uri)))
		i += copy(data[i:], m.Uri)
	}
	if len(m.Ref) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.Ref)))
		i += copy(data[i:], m.Ref)
	}
	if len(m.Path) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.Path)))
		i += copy(data[i:], m.Path)
	}
	if len(m.HttpProxy) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.HttpProxy)))
		i += copy(data[i:], m.HttpProxy)
	}
	if len(m.HttpsProxy) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.HttpsProxy)))
		i += copy(data[i:], m.HttpsProxy)
	}
	return i, nil
}

func (m *ImageSource) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ImageSource) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Kind) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.Kind)))
		i += copy(data[i:], m.Kind)
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Paths) > 0 {
		for _, msg := range m.Paths {
			data[i] = 0x1a
			i++
			i = encodeVarintBuilder(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.RegistryAuth != nil {
		data[i] = 0x22
		i++
		i = encodeVarintBuilder(data, i, uint64(m.RegistryAuth.Size()))
		n22, err := m.RegistryAuth.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}

func (m *ImagePathMappingDir) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ImagePathMappingDir) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SourcePath) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.SourcePath)))
		i += copy(data[i:], m.SourcePath)
	}
	if len(m.DestinationDir) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.DestinationDir)))
		i += copy(data[i:], m.DestinationDir)
	}
	return i, nil
}

func (m *GitSourceRevision) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GitSourceRevision) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Commit) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.Commit)))
		i += copy(data[i:], m.Commit)
	}
	if m.Author != nil {
		data[i] = 0x12
		i++
		i = encodeVarintBuilder(data, i, uint64(m.Author.Size()))
		n23, err := m.Author.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.Committer != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintBuilder(data, i, uint64(m.Committer.Size()))
		n24, err := m.Committer.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if len(m.Message) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.Message)))
		i += copy(data[i:], m.Message)
	}
	return i, nil
}

func (m *GitSourceRevision_SourceControlUser) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GitSourceRevision_SourceControlUser) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Email) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.Email)))
		i += copy(data[i:], m.Email)
	}
	return i, nil
}

func (m *CustomBuildStrategy) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CustomBuildStrategy) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ImageKind) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.ImageKind)))
		i += copy(data[i:], m.ImageKind)
	}
	if len(m.ImageName) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.ImageName)))
		i += copy(data[i:], m.ImageName)
	}
	if m.RegistryAuth != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintBuilder(data, i, uint64(m.RegistryAuth.Size()))
		n25, err := m.RegistryAuth.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if len(m.Env) > 0 {
		for k, _ := range m.Env {
			data[i] = 0x22
			i++
			v := m.Env[k]
			mapSize := 1 + len(k) + sovBuilder(uint64(len(k))) + 1 + len(v) + sovBuilder(uint64(len(v)))
			i = encodeVarintBuilder(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintBuilder(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintBuilder(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	if m.ExposeDockerSocket {
		data[i] = 0x28
		i++
		if m.ExposeDockerSocket {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.ForcePull {
		data[i] = 0x30
		i++
		if m.ForcePull {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.AuthVol) > 0 {
		for _, msg := range m.AuthVol {
			data[i] = 0x3a
			i++
			i = encodeVarintBuilder(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.BuildAPIVersion) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.BuildAPIVersion)))
		i += copy(data[i:], m.BuildAPIVersion)
	}
	return i, nil
}

func (m *CustomBuildStrategy_AuthMount) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CustomBuildStrategy_AuthMount) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Auth != nil {
		data[i] = 0xa
		i++
		i = encodeVarintBuilder(data, i, uint64(m.Auth.Size()))
		n26, err := m.Auth.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if len(m.MountPath) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.MountPath)))
		i += copy(data[i:], m.MountPath)
	}
	return i, nil
}

func (m *DockerBuildStrategy) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DockerBuildStrategy) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ImageKind) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.ImageKind)))
		i += copy(data[i:], m.ImageKind)
	}
	if len(m.ImageName) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.ImageName)))
		i += copy(data[i:], m.ImageName)
	}
	if m.RegistryAuth != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintBuilder(data, i, uint64(m.RegistryAuth.Size()))
		n27, err := m.RegistryAuth.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if m.NoCache {
		data[i] = 0x20
		i++
		if m.NoCache {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.Env) > 0 {
		for k, _ := range m.Env {
			data[i] = 0x2a
			i++
			v := m.Env[k]
			mapSize := 1 + len(k) + sovBuilder(uint64(len(k))) + 1 + len(v) + sovBuilder(uint64(len(v)))
			i = encodeVarintBuilder(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintBuilder(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintBuilder(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	if m.ForcePull {
		data[i] = 0x30
		i++
		if m.ForcePull {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.DockerfilePath) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.DockerfilePath)))
		i += copy(data[i:], m.DockerfilePath)
	}
	return i, nil
}

func (m *SourceBuildStrategy) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SourceBuildStrategy) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ImageKind) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.ImageKind)))
		i += copy(data[i:], m.ImageKind)
	}
	if len(m.ImageName) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.ImageName)))
		i += copy(data[i:], m.ImageName)
	}
	if m.RegistryAuth != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintBuilder(data, i, uint64(m.RegistryAuth.Size()))
		n28, err := m.RegistryAuth.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if len(m.Env) > 0 {
		for k, _ := range m.Env {
			data[i] = 0x22
			i++
			v := m.Env[k]
			mapSize := 1 + len(k) + sovBuilder(uint64(len(k))) + 1 + len(v) + sovBuilder(uint64(len(v)))
			i = encodeVarintBuilder(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintBuilder(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintBuilder(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	if len(m.Scripts) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.Scripts)))
		i += copy(data[i:], m.Scripts)
	}
	if m.Incremental {
		data[i] = 0x30
		i++
		if m.Incremental {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.ForcePull {
		data[i] = 0x38
		i++
		if m.ForcePull {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.RuntimeImageKind) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.RuntimeImageKind)))
		i += copy(data[i:], m.RuntimeImageKind)
	}
	if len(m.RuntimeImageName) > 0 {
		data[i] = 0x4a
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.RuntimeImageName)))
		i += copy(data[i:], m.RuntimeImageName)
	}
	if len(m.RuntimeArtifacts) > 0 {
		for _, msg := range m.RuntimeArtifacts {
			data[i] = 0x52
			i++
			i = encodeVarintBuilder(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *JenkinsPipelineStrategy) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *JenkinsPipelineStrategy) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.JenkinsfilePath) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.JenkinsfilePath)))
		i += copy(data[i:], m.JenkinsfilePath)
	}
	if len(m.Jenkinsfile) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.Jenkinsfile)))
		i += copy(data[i:], m.Jenkinsfile)
	}
	return i, nil
}

func (m *GitHubWebHookTrigger) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GitHubWebHookTrigger) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Auth != nil {
		data[i] = 0xa
		i++
		i = encodeVarintBuilder(data, i, uint64(m.Auth.Size()))
		n29, err := m.Auth.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}

func (m *GenericWebHookTrigger) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GenericWebHookTrigger) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Auth != nil {
		data[i] = 0xa
		i++
		i = encodeVarintBuilder(data, i, uint64(m.Auth.Size()))
		n30, err := m.Auth.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.AllowEnv {
		data[i] = 0x10
		i++
		if m.AllowEnv {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ImageChangeHookTrigger) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ImageChangeHookTrigger) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Kind) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.Kind)))
		i += copy(data[i:], m.Kind)
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBuilder(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	return i, nil
}

func encodeFixed64Builder(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Builder(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintBuilder(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *TemplatizedBuilderRequest) Size() (n int) {
	var l int
	_ = l
	if m.Feed != nil {
		l = m.Feed.Size()
		n += 1 + l + sovBuilder(uint64(l))
	}
	if m.Archive != nil {
		l = m.Archive.Size()
		n += 1 + l + sovBuilder(uint64(l))
	}
	return n
}

func (m *TemplatizedBuilderResponse) Size() (n int) {
	var l int
	_ = l
	if m.Feedback != nil {
		l = m.Feedback.Size()
		n += 1 + l + sovBuilder(uint64(l))
	}
	return n
}

func (m *IdentifiedAuth) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	l = len(m.Auth)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	l = len(m.Server)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	l = len(m.SshAuthPrivate)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	l = len(m.TlsCert)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	l = len(m.TlsPrivateKey)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	if m.DockerConfigFile != nil {
		l = m.DockerConfigFile.Size()
		n += 1 + l + sovBuilder(uint64(l))
	}
	return n
}

func (m *VendorAnnotation) Size() (n int) {
	var l int
	_ = l
	l = len(m.ApiVersion)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	l = len(m.Vendor)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	return n
}

func (m *Feed) Size() (n int) {
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovBuilder(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovBuilder(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovBuilder(uint64(l))
	}
	return n
}

func (m *Feed_FeedSpec) Size() (n int) {
	var l int
	_ = l
	if m.Builder != 0 {
		n += 1 + sovBuilder(uint64(m.Builder))
	}
	if m.Template != nil {
		l = m.Template.Size()
		n += 1 + l + sovBuilder(uint64(l))
	}
	if m.Option != nil {
		l = m.Option.Size()
		n += 1 + l + sovBuilder(uint64(l))
	}
	if len(m.Auth) > 0 {
		for _, e := range m.Auth {
			l = e.Size()
			n += 1 + l + sovBuilder(uint64(l))
		}
	}
	l = len(m.BuildAtOnceName)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	if len(m.ArchiveFilePath) > 0 {
		for _, s := range m.ArchiveFilePath {
			l = len(s)
			n += 1 + l + sovBuilder(uint64(l))
		}
	}
	l = len(m.BuildAtOnceMessage)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	if m.DisableBuildAtOnce {
		n += 2
	}
	return n
}

func (m *Feed_FeedStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.Phase)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	return n
}

func (m *FeedList) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovBuilder(uint64(l))
		}
	}
	return n
}

func (m *Stream) Size() (n int) {
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovBuilder(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovBuilder(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovBuilder(uint64(l))
	}
	return n
}

func (m *Stream_StreamMeta) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	return n
}

func (m *Stream_StreamSpec) Size() (n int) {
	var l int
	_ = l
	if m.StreamType != 0 {
		n += 1 + sovBuilder(uint64(m.StreamType))
	}
	if m.FileContent != nil {
		l = len(m.FileContent)
		if l > 0 {
			n += 1 + l + sovBuilder(uint64(l))
		}
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	if m.FileType != 0 {
		n += 1 + sovBuilder(uint64(m.FileType))
	}
	l = len(m.FilePath)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	return n
}

func (m *Stream_StreamStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.Phase)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	return n
}

func (m *StreamList) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovBuilder(uint64(l))
		}
	}
	return n
}

func (m *BuildConfigOption) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	l = len(m.Project)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBuilder(uint64(len(k))) + 1 + len(v) + sovBuilder(uint64(len(v)))
			n += mapEntrySize + 1 + sovBuilder(uint64(mapEntrySize))
		}
	}
	if len(m.Annotations) > 0 {
		for k, v := range m.Annotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBuilder(uint64(len(k))) + 1 + len(v) + sovBuilder(uint64(len(v)))
			n += mapEntrySize + 1 + sovBuilder(uint64(mapEntrySize))
		}
	}
	if len(m.GithubWebHook) > 0 {
		for _, e := range m.GithubWebHook {
			l = e.Size()
			n += 1 + l + sovBuilder(uint64(l))
		}
	}
	if len(m.GenericWebHook) > 0 {
		for _, e := range m.GenericWebHook {
			l = e.Size()
			n += 1 + l + sovBuilder(uint64(l))
		}
	}
	if len(m.ImageChangeHook) > 0 {
		for _, e := range m.ImageChangeHook {
			l = e.Size()
			n += 1 + l + sovBuilder(uint64(l))
		}
	}
	if m.ConfigChangeHook {
		n += 2
	}
	l = len(m.RunPolicy)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	l = len(m.SourceType)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	l = len(m.BinaryAsFile)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	l = len(m.Dockerfile)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	if m.GitSource != nil {
		l = m.GitSource.Size()
		n += 1 + l + sovBuilder(uint64(l))
	}
	if len(m.SidecarImageSource) > 0 {
		for _, e := range m.SidecarImageSource {
			l = e.Size()
			n += 1 + l + sovBuilder(uint64(l))
		}
	}
	l = len(m.ContextDir)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	if m.RepositoryAuth != nil {
		l = m.RepositoryAuth.Size()
		n += 2 + l + sovBuilder(uint64(l))
	}
	if len(m.AuthAsBuildSource) > 0 {
		for _, e := range m.AuthAsBuildSource {
			l = e.Size()
			n += 2 + l + sovBuilder(uint64(l))
		}
	}
	l = len(m.SourceRevisionType)
	if l > 0 {
		n += 2 + l + sovBuilder(uint64(l))
	}
	if m.GitSourceRevision != nil {
		l = m.GitSourceRevision.Size()
		n += 2 + l + sovBuilder(uint64(l))
	}
	l = len(m.BuildStrategyType)
	if l > 0 {
		n += 2 + l + sovBuilder(uint64(l))
	}
	if m.CustomBuildStrategy != nil {
		l = m.CustomBuildStrategy.Size()
		n += 2 + l + sovBuilder(uint64(l))
	}
	if m.DockerBuildStrategy != nil {
		l = m.DockerBuildStrategy.Size()
		n += 2 + l + sovBuilder(uint64(l))
	}
	if m.SourceBuildStrategy != nil {
		l = m.SourceBuildStrategy.Size()
		n += 2 + l + sovBuilder(uint64(l))
	}
	if m.JenkinsPipelineStrategy != nil {
		l = m.JenkinsPipelineStrategy.Size()
		n += 2 + l + sovBuilder(uint64(l))
	}
	l = len(m.ImageKind)
	if l > 0 {
		n += 2 + l + sovBuilder(uint64(l))
	}
	l = len(m.ImageName)
	if l > 0 {
		n += 2 + l + sovBuilder(uint64(l))
	}
	if m.RegistryAuth != nil {
		l = m.RegistryAuth.Size()
		n += 2 + l + sovBuilder(uint64(l))
	}
	if len(m.ResourceLimits) > 0 {
		for k, v := range m.ResourceLimits {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBuilder(uint64(len(k))) + 1 + len(v) + sovBuilder(uint64(len(v)))
			n += mapEntrySize + 2 + sovBuilder(uint64(mapEntrySize))
		}
	}
	if len(m.ResourceRequests) > 0 {
		for k, v := range m.ResourceRequests {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBuilder(uint64(len(k))) + 1 + len(v) + sovBuilder(uint64(len(v)))
			n += mapEntrySize + 2 + sovBuilder(uint64(mapEntrySize))
		}
	}
	if len(m.PostCommitCommand) > 0 {
		for _, s := range m.PostCommitCommand {
			l = len(s)
			n += 2 + l + sovBuilder(uint64(l))
		}
	}
	if len(m.PostCommitArgs) > 0 {
		for _, s := range m.PostCommitArgs {
			l = len(s)
			n += 2 + l + sovBuilder(uint64(l))
		}
	}
	l = len(m.PostCommitScript)
	if l > 0 {
		n += 2 + l + sovBuilder(uint64(l))
	}
	if m.CompletionDeadlineSeconds != 0 {
		n += 2 + sovBuilder(uint64(m.CompletionDeadlineSeconds))
	}
	return n
}

func (m *BuildConfigOption_AuthAsBuildSource) Size() (n int) {
	var l int
	_ = l
	if m.Auth != nil {
		l = m.Auth.Size()
		n += 1 + l + sovBuilder(uint64(l))
	}
	l = len(m.DestinationDir)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	return n
}

func (m *GitSource) Size() (n int) {
	var l int
	_ = l
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	l = len(m.Ref)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	l = len(m.HttpProxy)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	l = len(m.HttpsProxy)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	return n
}

func (m *ImageSource) Size() (n int) {
	var l int
	_ = l
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	if len(m.Paths) > 0 {
		for _, e := range m.Paths {
			l = e.Size()
			n += 1 + l + sovBuilder(uint64(l))
		}
	}
	if m.RegistryAuth != nil {
		l = m.RegistryAuth.Size()
		n += 1 + l + sovBuilder(uint64(l))
	}
	return n
}

func (m *ImagePathMappingDir) Size() (n int) {
	var l int
	_ = l
	l = len(m.SourcePath)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	l = len(m.DestinationDir)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	return n
}

func (m *GitSourceRevision) Size() (n int) {
	var l int
	_ = l
	l = len(m.Commit)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	if m.Author != nil {
		l = m.Author.Size()
		n += 1 + l + sovBuilder(uint64(l))
	}
	if m.Committer != nil {
		l = m.Committer.Size()
		n += 1 + l + sovBuilder(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	return n
}

func (m *GitSourceRevision_SourceControlUser) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	return n
}

func (m *CustomBuildStrategy) Size() (n int) {
	var l int
	_ = l
	l = len(m.ImageKind)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	l = len(m.ImageName)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	if m.RegistryAuth != nil {
		l = m.RegistryAuth.Size()
		n += 1 + l + sovBuilder(uint64(l))
	}
	if len(m.Env) > 0 {
		for k, v := range m.Env {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBuilder(uint64(len(k))) + 1 + len(v) + sovBuilder(uint64(len(v)))
			n += mapEntrySize + 1 + sovBuilder(uint64(mapEntrySize))
		}
	}
	if m.ExposeDockerSocket {
		n += 2
	}
	if m.ForcePull {
		n += 2
	}
	if len(m.AuthVol) > 0 {
		for _, e := range m.AuthVol {
			l = e.Size()
			n += 1 + l + sovBuilder(uint64(l))
		}
	}
	l = len(m.BuildAPIVersion)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	return n
}

func (m *CustomBuildStrategy_AuthMount) Size() (n int) {
	var l int
	_ = l
	if m.Auth != nil {
		l = m.Auth.Size()
		n += 1 + l + sovBuilder(uint64(l))
	}
	l = len(m.MountPath)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	return n
}

func (m *DockerBuildStrategy) Size() (n int) {
	var l int
	_ = l
	l = len(m.ImageKind)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	l = len(m.ImageName)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	if m.RegistryAuth != nil {
		l = m.RegistryAuth.Size()
		n += 1 + l + sovBuilder(uint64(l))
	}
	if m.NoCache {
		n += 2
	}
	if len(m.Env) > 0 {
		for k, v := range m.Env {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBuilder(uint64(len(k))) + 1 + len(v) + sovBuilder(uint64(len(v)))
			n += mapEntrySize + 1 + sovBuilder(uint64(mapEntrySize))
		}
	}
	if m.ForcePull {
		n += 2
	}
	l = len(m.DockerfilePath)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	return n
}

func (m *SourceBuildStrategy) Size() (n int) {
	var l int
	_ = l
	l = len(m.ImageKind)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	l = len(m.ImageName)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	if m.RegistryAuth != nil {
		l = m.RegistryAuth.Size()
		n += 1 + l + sovBuilder(uint64(l))
	}
	if len(m.Env) > 0 {
		for k, v := range m.Env {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBuilder(uint64(len(k))) + 1 + len(v) + sovBuilder(uint64(len(v)))
			n += mapEntrySize + 1 + sovBuilder(uint64(mapEntrySize))
		}
	}
	l = len(m.Scripts)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	if m.Incremental {
		n += 2
	}
	if m.ForcePull {
		n += 2
	}
	l = len(m.RuntimeImageKind)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	l = len(m.RuntimeImageName)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	if len(m.RuntimeArtifacts) > 0 {
		for _, e := range m.RuntimeArtifacts {
			l = e.Size()
			n += 1 + l + sovBuilder(uint64(l))
		}
	}
	return n
}

func (m *JenkinsPipelineStrategy) Size() (n int) {
	var l int
	_ = l
	l = len(m.JenkinsfilePath)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	l = len(m.Jenkinsfile)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	return n
}

func (m *GitHubWebHookTrigger) Size() (n int) {
	var l int
	_ = l
	if m.Auth != nil {
		l = m.Auth.Size()
		n += 1 + l + sovBuilder(uint64(l))
	}
	return n
}

func (m *GenericWebHookTrigger) Size() (n int) {
	var l int
	_ = l
	if m.Auth != nil {
		l = m.Auth.Size()
		n += 1 + l + sovBuilder(uint64(l))
	}
	if m.AllowEnv {
		n += 2
	}
	return n
}

func (m *ImageChangeHookTrigger) Size() (n int) {
	var l int
	_ = l
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBuilder(uint64(l))
	}
	return n
}

func sovBuilder(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBuilder(x uint64) (n int) {
	return sovBuilder(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TemplatizedBuilderRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuilder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TemplatizedBuilderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TemplatizedBuilderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Feed == nil {
				m.Feed = &Feed_FeedSpec{}
			}
			if err := m.Feed.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Archive == nil {
				m.Archive = &Stream_StreamSpec{}
			}
			if err := m.Archive.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuilder(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuilder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TemplatizedBuilderResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuilder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TemplatizedBuilderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TemplatizedBuilderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feedback", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Feedback == nil {
				m.Feedback = &Feed{}
			}
			if err := m.Feedback.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuilder(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuilder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IdentifiedAuth) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuilder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IdentifiedAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IdentifiedAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auth = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Server = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshAuthPrivate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshAuthPrivate = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsCert", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlsCert = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsPrivateKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlsPrivateKey = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DockerConfigFile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DockerConfigFile == nil {
				m.DockerConfigFile = &DockerConfigFile{}
			}
			if err := m.DockerConfigFile.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuilder(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuilder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VendorAnnotation) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuilder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VendorAnnotation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VendorAnnotation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiVersion = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vendor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vendor = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuilder(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuilder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Feed) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuilder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Feed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Feed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &ObjectMeta{}
			}
			if err := m.Metadata.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &Feed_FeedSpec{}
			}
			if err := m.Spec.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Feed_FeedStatus{}
			}
			if err := m.Status.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuilder(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuilder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Feed_FeedSpec) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuilder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Builder", wireType)
			}
			m.Builder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Builder |= (Feed_FeedSpec_BuilderType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Template", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Template == nil {
				m.Template = &Template{}
			}
			if err := m.Template.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Option == nil {
				m.Option = &BuildConfigOption{}
			}
			if err := m.Option.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auth = append(m.Auth, &IdentifiedAuth{})
			if err := m.Auth[len(m.Auth)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildAtOnceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildAtOnceName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArchiveFilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArchiveFilePath = append(m.ArchiveFilePath, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildAtOnceMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildAtOnceMessage = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableBuildAtOnce", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableBuildAtOnce = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBuilder(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuilder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Feed_FeedStatus) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuilder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phase = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuilder(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuilder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedList) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuilder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Feed{})
			if err := m.Items[len(m.Items)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuilder(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuilder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Stream) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuilder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &Stream_StreamMeta{}
			}
			if err := m.Metadata.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &Stream_StreamSpec{}
			}
			if err := m.Spec.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Stream_StreamStatus{}
			}
			if err := m.Status.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuilder(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuilder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Stream_StreamMeta) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuilder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuilder(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuilder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Stream_StreamSpec) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuilder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamType", wireType)
			}
			m.StreamType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.StreamType |= (Stream_StreamSpec_StreamType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileContent", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileContent = append(m.FileContent[:0], data[iNdEx:postIndex]...)
			if m.FileContent == nil {
				m.FileContent = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileType", wireType)
			}
			m.FileType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.FileType |= (Stream_StreamSpec_FileType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilePath = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuilder(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuilder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Stream_StreamStatus) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuilder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phase = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuilder(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuilder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamList) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuilder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Stream{})
			if err := m.Items[len(m.Items)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuilder(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuilder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildConfigOption) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuilder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildConfigOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildConfigOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Project", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Project = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthBuilder
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapvalue uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapvalue |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapvalue := int(stringLenmapvalue)
			if intStringLenmapvalue < 0 {
				return ErrInvalidLengthBuilder
			}
			postStringIndexmapvalue := iNdEx + intStringLenmapvalue
			if postStringIndexmapvalue > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := string(data[iNdEx:postStringIndexmapvalue])
			iNdEx = postStringIndexmapvalue
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthBuilder
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapvalue uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapvalue |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapvalue := int(stringLenmapvalue)
			if intStringLenmapvalue < 0 {
				return ErrInvalidLengthBuilder
			}
			postStringIndexmapvalue := iNdEx + intStringLenmapvalue
			if postStringIndexmapvalue > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := string(data[iNdEx:postStringIndexmapvalue])
			iNdEx = postStringIndexmapvalue
			if m.Annotations == nil {
				m.Annotations = make(map[string]string)
			}
			m.Annotations[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GithubWebHook", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GithubWebHook = append(m.GithubWebHook, &GitHubWebHookTrigger{})
			if err := m.GithubWebHook[len(m.GithubWebHook)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenericWebHook", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenericWebHook = append(m.GenericWebHook, &GenericWebHookTrigger{})
			if err := m.GenericWebHook[len(m.GenericWebHook)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageChangeHook", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageChangeHook = append(m.ImageChangeHook, &ImageChangeHookTrigger{})
			if err := m.ImageChangeHook[len(m.ImageChangeHook)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigChangeHook", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConfigChangeHook = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunPolicy = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceType = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryAsFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BinaryAsFile = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dockerfile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dockerfile = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GitSource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GitSource == nil {
				m.GitSource = &GitSource{}
			}
			if err := m.GitSource.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SidecarImageSource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SidecarImageSource = append(m.SidecarImageSource, &ImageSource{})
			if err := m.SidecarImageSource[len(m.SidecarImageSource)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextDir = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositoryAuth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RepositoryAuth == nil {
				m.RepositoryAuth = &IdentifiedAuth{}
			}
			if err := m.RepositoryAuth.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthAsBuildSource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthAsBuildSource = append(m.AuthAsBuildSource, &BuildConfigOption_AuthAsBuildSource{})
			if err := m.AuthAsBuildSource[len(m.AuthAsBuildSource)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceRevisionType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceRevisionType = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GitSourceRevision", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GitSourceRevision == nil {
				m.GitSourceRevision = &GitSourceRevision{}
			}
			if err := m.GitSourceRevision.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildStrategyType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildStrategyType = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomBuildStrategy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomBuildStrategy == nil {
				m.CustomBuildStrategy = &CustomBuildStrategy{}
			}
			if err := m.CustomBuildStrategy.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DockerBuildStrategy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DockerBuildStrategy == nil {
				m.DockerBuildStrategy = &DockerBuildStrategy{}
			}
			if err := m.DockerBuildStrategy.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceBuildStrategy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SourceBuildStrategy == nil {
				m.SourceBuildStrategy = &SourceBuildStrategy{}
			}
			if err := m.SourceBuildStrategy.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JenkinsPipelineStrategy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JenkinsPipelineStrategy == nil {
				m.JenkinsPipelineStrategy = &JenkinsPipelineStrategy{}
			}
			if err := m.JenkinsPipelineStrategy.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageKind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageKind = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryAuth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegistryAuth == nil {
				m.RegistryAuth = &IdentifiedAuth{}
			}
			if err := m.RegistryAuth.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceLimits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthBuilder
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapvalue uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapvalue |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapvalue := int(stringLenmapvalue)
			if intStringLenmapvalue < 0 {
				return ErrInvalidLengthBuilder
			}
			postStringIndexmapvalue := iNdEx + intStringLenmapvalue
			if postStringIndexmapvalue > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := string(data[iNdEx:postStringIndexmapvalue])
			iNdEx = postStringIndexmapvalue
			if m.ResourceLimits == nil {
				m.ResourceLimits = make(map[string]string)
			}
			m.ResourceLimits[mapkey] = mapvalue
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthBuilder
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapvalue uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapvalue |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapvalue := int(stringLenmapvalue)
			if intStringLenmapvalue < 0 {
				return ErrInvalidLengthBuilder
			}
			postStringIndexmapvalue := iNdEx + intStringLenmapvalue
			if postStringIndexmapvalue > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := string(data[iNdEx:postStringIndexmapvalue])
			iNdEx = postStringIndexmapvalue
			if m.ResourceRequests == nil {
				m.ResourceRequests = make(map[string]string)
			}
			m.ResourceRequests[mapkey] = mapvalue
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostCommitCommand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostCommitCommand = append(m.PostCommitCommand, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostCommitArgs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostCommitArgs = append(m.PostCommitArgs, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostCommitScript", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostCommitScript = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionDeadlineSeconds", wireType)
			}
			m.CompletionDeadlineSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CompletionDeadlineSeconds |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuilder(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuilder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildConfigOption_AuthAsBuildSource) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuilder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthAsBuildSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthAsBuildSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Auth == nil {
				m.Auth = &IdentifiedAuth{}
			}
			if err := m.Auth.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationDir = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuilder(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuilder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GitSource) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuilder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GitSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GitSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ref", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ref = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpProxy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HttpProxy = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsProxy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HttpsProxy = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuilder(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuilder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageSource) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuilder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paths", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Paths = append(m.Paths, &ImagePathMappingDir{})
			if err := m.Paths[len(m.Paths)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryAuth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegistryAuth == nil {
				m.RegistryAuth = &IdentifiedAuth{}
			}
			if err := m.RegistryAuth.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuilder(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuilder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImagePathMappingDir) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuilder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImagePathMappingDir: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImagePathMappingDir: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourcePath = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationDir = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuilder(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuilder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GitSourceRevision) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuilder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GitSourceRevision: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GitSourceRevision: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commit = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Author == nil {
				m.Author = &GitSourceRevision_SourceControlUser{}
			}
			if err := m.Author.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Committer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Committer == nil {
				m.Committer = &GitSourceRevision_SourceControlUser{}
			}
			if err := m.Committer.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuilder(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuilder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GitSourceRevision_SourceControlUser) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuilder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SourceControlUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SourceControlUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuilder(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuilder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomBuildStrategy) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuilder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomBuildStrategy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomBuildStrategy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageKind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageKind = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryAuth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegistryAuth == nil {
				m.RegistryAuth = &IdentifiedAuth{}
			}
			if err := m.RegistryAuth.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthBuilder
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapvalue uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapvalue |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapvalue := int(stringLenmapvalue)
			if intStringLenmapvalue < 0 {
				return ErrInvalidLengthBuilder
			}
			postStringIndexmapvalue := iNdEx + intStringLenmapvalue
			if postStringIndexmapvalue > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := string(data[iNdEx:postStringIndexmapvalue])
			iNdEx = postStringIndexmapvalue
			if m.Env == nil {
				m.Env = make(map[string]string)
			}
			m.Env[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExposeDockerSocket", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExposeDockerSocket = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForcePull", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForcePull = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthVol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthVol = append(m.AuthVol, &CustomBuildStrategy_AuthMount{})
			if err := m.AuthVol[len(m.AuthVol)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildAPIVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildAPIVersion = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuilder(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuilder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomBuildStrategy_AuthMount) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuilder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthMount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthMount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Auth == nil {
				m.Auth = &IdentifiedAuth{}
			}
			if err := m.Auth.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MountPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MountPath = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuilder(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuilder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DockerBuildStrategy) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuilder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DockerBuildStrategy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DockerBuildStrategy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageKind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageKind = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryAuth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegistryAuth == nil {
				m.RegistryAuth = &IdentifiedAuth{}
			}
			if err := m.RegistryAuth.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoCache", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoCache = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthBuilder
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapvalue uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapvalue |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapvalue := int(stringLenmapvalue)
			if intStringLenmapvalue < 0 {
				return ErrInvalidLengthBuilder
			}
			postStringIndexmapvalue := iNdEx + intStringLenmapvalue
			if postStringIndexmapvalue > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := string(data[iNdEx:postStringIndexmapvalue])
			iNdEx = postStringIndexmapvalue
			if m.Env == nil {
				m.Env = make(map[string]string)
			}
			m.Env[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForcePull", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForcePull = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DockerfilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DockerfilePath = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuilder(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuilder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SourceBuildStrategy) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuilder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SourceBuildStrategy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SourceBuildStrategy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageKind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageKind = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryAuth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegistryAuth == nil {
				m.RegistryAuth = &IdentifiedAuth{}
			}
			if err := m.RegistryAuth.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthBuilder
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapvalue uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapvalue |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapvalue := int(stringLenmapvalue)
			if intStringLenmapvalue < 0 {
				return ErrInvalidLengthBuilder
			}
			postStringIndexmapvalue := iNdEx + intStringLenmapvalue
			if postStringIndexmapvalue > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := string(data[iNdEx:postStringIndexmapvalue])
			iNdEx = postStringIndexmapvalue
			if m.Env == nil {
				m.Env = make(map[string]string)
			}
			m.Env[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scripts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scripts = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Incremental", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Incremental = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForcePull", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForcePull = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeImageKind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuntimeImageKind = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeImageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuntimeImageName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeArtifacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuntimeArtifacts = append(m.RuntimeArtifacts, &ImagePathMappingDir{})
			if err := m.RuntimeArtifacts[len(m.RuntimeArtifacts)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuilder(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuilder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JenkinsPipelineStrategy) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuilder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JenkinsPipelineStrategy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JenkinsPipelineStrategy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JenkinsfilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JenkinsfilePath = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jenkinsfile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Jenkinsfile = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuilder(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuilder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GitHubWebHookTrigger) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuilder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GitHubWebHookTrigger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GitHubWebHookTrigger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Auth == nil {
				m.Auth = &IdentifiedAuth{}
			}
			if err := m.Auth.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuilder(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuilder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenericWebHookTrigger) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuilder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenericWebHookTrigger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenericWebHookTrigger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Auth == nil {
				m.Auth = &IdentifiedAuth{}
			}
			if err := m.Auth.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowEnv", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowEnv = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBuilder(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuilder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageChangeHookTrigger) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuilder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageChangeHookTrigger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageChangeHookTrigger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuilder(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuilder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBuilder(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBuilder
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBuilder
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBuilder
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBuilder(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBuilder = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBuilder   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorBuilder = []byte{
	// 2586 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x59, 0x4b, 0x73, 0x1b, 0xc7,
	0x11, 0x16, 0x1e, 0x04, 0x81, 0xe6, 0x6b, 0x39, 0xd4, 0x63, 0x05, 0xcb, 0x32, 0xb3, 0xb1, 0x55,
	0x32, 0x25, 0x83, 0xb1, 0x64, 0xab, 0x64, 0x95, 0x9d, 0x0a, 0x08, 0x82, 0x12, 0x44, 0x8a, 0x60,
	0x2d, 0x29, 0x25, 0xe5, 0x72, 0xa2, 0x2c, 0x16, 0x43, 0x70, 0xcd, 0xc5, 0x2e, 0xbc, 0xbb, 0xa0,
	0xc4, 0x54, 0x2e, 0x39, 0xa6, 0x5c, 0xb9, 0xe7, 0x9c, 0x5b, 0xae, 0xb9, 0xe4, 0x27, 0x24, 0xb7,
	0xa4, 0xf2, 0x0b, 0x52, 0xc9, 0x31, 0x7f, 0x22, 0x3d, 0x8f, 0x5d, 0xec, 0x8b, 0x02, 0xc9, 0x4b,
	0x72, 0x10, 0xb5, 0xd3, 0xd3, 0xfd, 0x4d, 0x4f, 0x4f, 0xbf, 0x66, 0x00, 0xef, 0x8d, 0x0c, 0xc3,
	0x5f, 0x37, 0x2d, 0xb3, 0xbf, 0x3e, 0xea, 0x3d, 0x5c, 0xef, 0x8d, 0x2d, 0xbb, 0x4f, 0xbd, 0xc6,
	0xc8, 0x73, 0x03, 0x97, 0x2c, 0xb0, 0xc9, 0x06, 0x9b, 0x6c, 0xe0, 0x64, 0xfd, 0xd6, 0xc0, 0x75,
	0x07, 0x36, 0x5d, 0x37, 0x46, 0xd6, 0xba, 0xe1, 0x38, 0x6e, 0x60, 0x04, 0x96, 0xeb, 0xf8, 0x82,
	0xb9, 0x7e, 0x2b, 0x89, 0x34, 0xa4, 0x81, 0xd1, 0x37, 0x02, 0x43, 0xce, 0x7e, 0x94, 0x9c, 0xed,
	0xbb, 0xe6, 0x31, 0xf5, 0x3e, 0xa1, 0xce, 0xc0, 0x72, 0xe8, 0x27, 0x08, 0x28, 0xd8, 0xb4, 0xdf,
	0x16, 0xe0, 0xe6, 0x01, 0x1d, 0x8e, 0x6c, 0x84, 0xfe, 0x15, 0xed, 0x6f, 0x08, 0x75, 0x74, 0xfa,
	0xdd, 0x98, 0xfa, 0x01, 0xf9, 0x11, 0x94, 0x0f, 0x29, 0xed, 0xab, 0x85, 0xd5, 0xc2, 0xdd, 0xb9,
	0x07, 0xb7, 0x1a, 0x09, 0xf5, 0x1a, 0x5b, 0x38, 0xc5, 0xff, 0xec, 0x8f, 0xa8, 0xa9, 0x73, 0x4e,
	0xf2, 0x04, 0x66, 0x0d, 0xcf, 0x3c, 0xb2, 0x4e, 0xa8, 0x5a, 0xe4, 0x42, 0xab, 0x29, 0xa1, 0xfd,
	0xc0, 0xa3, 0xc6, 0x50, 0xfe, 0xc7, 0x05, 0x43, 0x01, 0xed, 0x05, 0xd4, 0xf3, 0x54, 0xf1, 0x47,
	0xb8, 0x67, 0x4a, 0xd6, 0xa1, 0xca, 0x56, 0xe8, 0x19, 0xe6, 0xb1, 0xd4, 0x67, 0x25, 0x47, 0x1f,
	0x3d, 0x62, 0xd2, 0xfe, 0x56, 0x84, 0xc5, 0x4e, 0x9f, 0x3a, 0x81, 0x75, 0x68, 0xd1, 0x7e, 0x73,
	0x1c, 0x1c, 0x91, 0x45, 0x28, 0x5a, 0x62, 0x37, 0x35, 0x1d, 0xbf, 0x08, 0x81, 0xb2, 0x81, 0x74,
	0xae, 0x6a, 0x4d, 0xe7, 0xdf, 0xe4, 0x3a, 0x54, 0x7c, 0xea, 0x9d, 0x50, 0x4f, 0x2d, 0x71, 0xaa,
	0x1c, 0x91, 0x3a, 0x54, 0xc7, 0xf8, 0xe9, 0x18, 0x43, 0xaa, 0x96, 0xf9, 0x4c, 0x34, 0x66, 0x73,
	0x23, 0xc3, 0xf7, 0xdf, 0xb8, 0x5e, 0x5f, 0x9d, 0x11, 0x73, 0xe1, 0x98, 0x5c, 0x85, 0x99, 0xc0,
	0x3d, 0xa6, 0x8e, 0x5a, 0xe1, 0x13, 0x62, 0x40, 0xee, 0xc0, 0xa2, 0xef, 0x1f, 0x31, 0xa5, 0xf6,
	0x3c, 0xeb, 0xc4, 0x08, 0xa8, 0x3a, 0xcb, 0xa7, 0x53, 0x54, 0xa2, 0xc2, 0x6c, 0x60, 0xfb, 0x2d,
	0xea, 0x05, 0x6a, 0x95, 0x33, 0x84, 0x43, 0xf2, 0x21, 0x2c, 0xe0, 0xa7, 0xe4, 0xdb, 0xa6, 0xa7,
	0x6a, 0x8d, 0xcf, 0x27, 0x89, 0x64, 0x1b, 0x14, 0x71, 0xf4, 0x2d, 0xd7, 0x39, 0xb4, 0x06, 0x5b,
	0x96, 0x4d, 0x55, 0xe0, 0xd6, 0xfb, 0x20, 0x65, 0xbd, 0xcd, 0x14, 0x9b, 0x9e, 0x11, 0xd4, 0x7e,
	0x01, 0xca, 0x2b, 0xea, 0xf4, 0x5d, 0xaf, 0x19, 0x39, 0x23, 0xb9, 0x0d, 0x80, 0xde, 0xf4, 0x8a,
	0x7a, 0x3e, 0x8e, 0xa4, 0x69, 0x63, 0x14, 0x66, 0xe2, 0x63, 0xcb, 0xe9, 0x87, 0x26, 0x66, 0xdf,
	0xcc, 0xc4, 0x27, 0x1c, 0x27, 0x34, 0xb1, 0x18, 0x69, 0xdf, 0x57, 0xa0, 0xcc, 0x0e, 0x91, 0x7c,
	0x0e, 0xd5, 0xd0, 0x9d, 0xe5, 0x59, 0xdf, 0x4c, 0x69, 0xdb, 0xed, 0x7d, 0x4b, 0xcd, 0xe0, 0x05,
	0x32, 0xe9, 0x11, 0x2b, 0x73, 0x57, 0x1f, 0x3d, 0x4a, 0x7a, 0xde, 0x14, 0x77, 0x65, 0x9c, 0xe4,
	0x11, 0x1e, 0x36, 0x6e, 0x64, 0xec, 0x73, 0x4d, 0xe6, 0x1e, 0xdc, 0x3e, 0x53, 0x86, 0x73, 0xe9,
	0x92, 0xbb, 0xfe, 0x7d, 0x19, 0xaa, 0x21, 0x14, 0xd9, 0x80, 0x59, 0x19, 0xc6, 0x5c, 0xd9, 0xc5,
	0x07, 0x77, 0xdf, 0xb5, 0x72, 0x43, 0x3a, 0xf6, 0xc1, 0xe9, 0x88, 0xea, 0xa1, 0x20, 0x79, 0x08,
	0xd5, 0x40, 0xf8, 0x7e, 0x18, 0x38, 0x37, 0x52, 0x20, 0x32, 0x34, 0xa8, 0x1e, 0x31, 0x92, 0xc7,
	0x50, 0x71, 0x47, 0xec, 0x14, 0xa4, 0xf6, 0xe9, 0x58, 0xe3, 0x2b, 0x89, 0xf3, 0xeb, 0x72, 0x3e,
	0x5d, 0xf2, 0x93, 0x4f, 0xa5, 0xe3, 0x97, 0x57, 0x4b, 0x28, 0xf7, 0x7e, 0x4a, 0x2e, 0x19, 0x35,
	0x32, 0x2e, 0xee, 0xc2, 0x12, 0x57, 0xb6, 0x19, 0x74, 0x1d, 0x93, 0xee, 0xb2, 0x30, 0x10, 0xae,
	0x9e, 0x26, 0x33, 0x4e, 0x19, 0xd2, 0xcc, 0x6b, 0xf6, 0x0c, 0x5c, 0xa7, 0x82, 0xeb, 0x20, 0x67,
	0x8a, 0x4c, 0x1a, 0x40, 0x62, 0xc2, 0x2f, 0xa8, 0xef, 0x1b, 0x83, 0x30, 0x12, 0x72, 0x66, 0x18,
	0x7f, 0xdf, 0xf2, 0x8d, 0x9e, 0x4d, 0x37, 0x26, 0x93, 0x3c, 0x30, 0xaa, 0x7a, 0xce, 0x8c, 0x46,
	0x61, 0x2e, 0x66, 0x6d, 0x72, 0x03, 0x56, 0xba, 0x7b, 0xed, 0xdd, 0xfd, 0x67, 0x9d, 0xad, 0x83,
	0xd7, 0x5d, 0xbd, 0xf3, 0xb4, 0xb3, 0xfb, 0xfa, 0xd5, 0x43, 0xe5, 0x0a, 0xa9, 0xc1, 0xcc, 0xa6,
	0xde, 0xdd, 0x6d, 0x2b, 0x05, 0x0c, 0xb8, 0xab, 0x9b, 0x1d, 0xbd, 0xdd, 0x3a, 0x78, 0xbd, 0xd9,
	0x6d, 0x6d, 0xb7, 0xf5, 0xd7, 0xed, 0x5d, 0x64, 0x6b, 0x2b, 0x45, 0x36, 0xb3, 0xb5, 0xdf, 0x7d,
	0xf9, 0x75, 0x33, 0x9c, 0x69, 0xed, 0x74, 0xda, 0xbb, 0x07, 0x4a, 0xa9, 0x7e, 0x00, 0x30, 0xf1,
	0x11, 0x16, 0xf0, 0xa3, 0x23, 0xc3, 0xa7, 0x32, 0x18, 0xc4, 0x80, 0x05, 0xf2, 0x50, 0xee, 0x4f,
	0x84, 0x42, 0x38, 0x64, 0xd1, 0x80, 0xb9, 0xd0, 0x97, 0xa7, 0x88, 0xd1, 0x20, 0x46, 0xda, 0xe7,
	0xc2, 0xc5, 0x76, 0x2c, 0x4c, 0xc4, 0x1f, 0xc3, 0x8c, 0x85, 0xc7, 0xee, 0x23, 0x66, 0xe9, 0xac,
	0xcc, 0x27, 0x38, 0xb4, 0x7f, 0x94, 0xa1, 0x22, 0xb2, 0x2b, 0xf9, 0x32, 0x13, 0x46, 0xef, 0xcc,
	0xc6, 0xa9, 0x68, 0xfa, 0x2c, 0x11, 0x4d, 0xd3, 0xf3, 0xb8, 0x88, 0xa8, 0x27, 0xa9, 0x88, 0xd2,
	0xde, 0x29, 0x97, 0x8c, 0xaa, 0x55, 0x80, 0x89, 0x26, 0x2c, 0x73, 0xf0, 0x64, 0x2b, 0xcc, 0xc8,
	0xbf, 0xeb, 0x7f, 0x2e, 0x86, 0x2c, 0x3c, 0xf2, 0xb6, 0x01, 0x7c, 0x3e, 0x62, 0xc7, 0x2b, 0x83,
	0xef, 0xde, 0x34, 0x45, 0xe5, 0x27, 0x8f, 0xbf, 0x98, 0x38, 0x59, 0x85, 0xb9, 0x43, 0x74, 0x4c,
	0x8c, 0x97, 0x00, 0xdd, 0x9f, 0x6f, 0x7b, 0x5e, 0x8f, 0x93, 0x88, 0x02, 0xa5, 0xb1, 0x67, 0xcb,
	0x63, 0x62, 0x9f, 0xa4, 0x8d, 0x45, 0x09, 0x19, 0xf8, 0xf2, 0x65, 0xbe, 0xfc, 0xc7, 0x53, 0x97,
	0xdf, 0x92, 0x02, 0x7a, 0x24, 0xca, 0xea, 0xc7, 0x61, 0x18, 0x2a, 0xb2, 0x7e, 0x84, 0x63, 0xed,
	0x83, 0x70, 0xc7, 0x9c, 0xb3, 0x8a, 0x19, 0xb2, 0xb3, 0xd3, 0x46, 0x9f, 0x9d, 0x85, 0xd2, 0x4b,
	0x7d, 0x47, 0x29, 0x68, 0x1f, 0xa2, 0x9f, 0x84, 0x40, 0x73, 0x30, 0xab, 0xb7, 0x9f, 0xbe, 0xdc,
	0x69, 0xea, 0xc8, 0x81, 0x83, 0xa6, 0xde, 0x7a, 0xd6, 0x79, 0x85, 0x7e, 0x5d, 0xff, 0x12, 0xe6,
	0xe3, 0x36, 0x3f, 0xc3, 0x4b, 0x27, 0xbe, 0x58, 0x4c, 0xf8, 0xe2, 0x17, 0xa1, 0x12, 0xdc, 0x1b,
	0xef, 0x25, 0xbd, 0xf1, 0x5a, 0xee, 0x96, 0x43, 0x7f, 0xfc, 0x0b, 0x81, 0xe5, 0x4c, 0x22, 0xca,
	0x3b, 0x5c, 0x16, 0x22, 0xd8, 0x94, 0xb0, 0xbc, 0x1e, 0x86, 0x88, 0x1c, 0x92, 0x4d, 0xa8, 0xd8,
	0x46, 0x8f, 0xda, 0xcc, 0xa9, 0xd8, 0x8a, 0xf7, 0xa7, 0x25, 0xba, 0xc6, 0x0e, 0x67, 0x6f, 0x3b,
	0x81, 0x77, 0xaa, 0x4b, 0x59, 0xb2, 0x0f, 0x73, 0xb1, 0x2e, 0x4a, 0xe6, 0xbe, 0x4f, 0xa7, 0x42,
	0x4d, 0x8a, 0x9d, 0xc4, 0x8b, 0xa3, 0x90, 0x0e, 0x2c, 0x0c, 0xac, 0xe0, 0x68, 0xdc, 0xfb, 0x29,
	0xed, 0x3d, 0x73, 0xdd, 0x63, 0x3c, 0x3f, 0x06, 0xfb, 0xc3, 0x14, 0xec, 0x53, 0x2b, 0x78, 0x16,
	0xf1, 0x1c, 0x78, 0xd6, 0x60, 0x80, 0xad, 0x4d, 0x52, 0x92, 0xec, 0xc0, 0xe2, 0x80, 0x3a, 0xd4,
	0xb3, 0xcc, 0x10, 0xab, 0xc2, 0xb1, 0x3e, 0x4c, 0x63, 0x25, 0x98, 0x42, 0xb0, 0x94, 0x2c, 0xe9,
	0xc2, 0x92, 0x35, 0xc4, 0xfc, 0xd2, 0x3a, 0x32, 0x9c, 0x01, 0xe5, 0x70, 0xb3, 0x1c, 0xee, 0xa3,
	0x74, 0xb6, 0x4f, 0x72, 0x85, 0x78, 0x69, 0x69, 0xb2, 0x06, 0x8a, 0xc9, 0xed, 0x12, 0x43, 0x14,
	0xa9, 0x37, 0x43, 0x27, 0xb7, 0xa0, 0xe6, 0x8d, 0x9d, 0x3d, 0xd7, 0xb6, 0xcc, 0xb0, 0x31, 0x99,
	0x10, 0x58, 0xcf, 0xe0, 0xbb, 0x63, 0xcf, 0x14, 0x71, 0x03, 0xa2, 0x67, 0x98, 0x50, 0x88, 0x06,
	0xf3, 0x3d, 0xcb, 0x31, 0xbc, 0xd3, 0xa6, 0xcf, 0x1b, 0x96, 0x39, 0xce, 0x91, 0xa0, 0x31, 0x0c,
	0xd1, 0x9f, 0xb0, 0x40, 0x51, 0xe7, 0x05, 0xc6, 0x84, 0x82, 0x95, 0xbd, 0x86, 0xd6, 0xdd, 0xe7,
	0xa0, 0xea, 0x02, 0x4f, 0x45, 0x6a, 0xf6, 0x4c, 0xc4, 0xbc, 0x3e, 0x61, 0x25, 0xcf, 0x81, 0xf8,
	0x56, 0x9f, 0x9a, 0x86, 0xc7, 0xed, 0x22, 0x01, 0x16, 0xb9, 0xe5, 0xea, 0x79, 0x96, 0x93, 0x10,
	0x39, 0x52, 0x4c, 0x47, 0x93, 0xa5, 0x8e, 0xb7, 0xc1, 0xa6, 0xe5, 0xa9, 0x4b, 0x42, 0xc7, 0x09,
	0x05, 0xb3, 0xc7, 0xa2, 0x47, 0x47, 0xae, 0x6f, 0x05, 0x2e, 0xee, 0x8b, 0xd5, 0x63, 0x85, 0x2b,
	0x3a, 0xa5, 0x1e, 0xa7, 0x84, 0xc8, 0x2f, 0x61, 0x99, 0x55, 0xe8, 0xa6, 0xcf, 0x7d, 0x57, 0x6a,
	0xbc, 0xcc, 0x35, 0x7e, 0x30, 0xdd, 0xbb, 0xd3, 0x92, 0x7a, 0x16, 0x8c, 0xd5, 0x5d, 0x71, 0x3c,
	0x3a, 0x3d, 0xb1, 0x58, 0x5b, 0xc7, 0x0f, 0x8e, 0x88, 0x3a, 0x9d, 0x9d, 0x21, 0xbb, 0xb0, 0x1c,
	0x59, 0x34, 0x9c, 0x50, 0x57, 0x72, 0xeb, 0xc8, 0xd3, 0x34, 0x9f, 0x9e, 0x15, 0x25, 0xf7, 0x61,
	0x99, 0x77, 0x03, 0x98, 0x59, 0xb0, 0xef, 0x19, 0x9c, 0xf2, 0xe5, 0xaf, 0xf2, 0xe5, 0xb3, 0x13,
	0xe4, 0x00, 0x56, 0xcc, 0xb1, 0x1f, 0xb8, 0xc3, 0x8d, 0xf8, 0x94, 0x7a, 0x2d, 0xb7, 0x1e, 0xb5,
	0xb2, 0x9c, 0x7a, 0x9e, 0x38, 0x43, 0x15, 0xee, 0x95, 0x44, 0xbd, 0x9e, 0x8b, 0xba, 0x99, 0xe5,
	0xd4, 0xf3, 0xc4, 0x19, 0xaa, 0xb0, 0x5f, 0x12, 0xf5, 0x46, 0x7e, 0xed, 0xcc, 0x72, 0xea, 0x79,
	0xe2, 0xe8, 0x11, 0x37, 0xbe, 0xa5, 0x0e, 0xf6, 0xda, 0xfe, 0x9e, 0x35, 0xa2, 0x36, 0x5e, 0xf9,
	0x22, 0x64, 0x95, 0x23, 0xdf, 0x49, 0x21, 0x3f, 0xcf, 0xe7, 0xd6, 0xcf, 0x82, 0x61, 0x01, 0xce,
	0xf3, 0xc3, 0x36, 0xeb, 0xed, 0x6f, 0x8a, 0x00, 0x8f, 0x08, 0xd1, 0x2c, 0xef, 0x12, 0xeb, 0xb1,
	0x59, 0xde, 0x1f, 0x36, 0x61, 0xde, 0xa3, 0x03, 0x2c, 0x24, 0xd2, 0xe9, 0xdf, 0x3b, 0x8f, 0xd3,
	0x27, 0x44, 0xc8, 0x37, 0x2c, 0x72, 0xc4, 0xce, 0x77, 0xac, 0xa1, 0x15, 0xf8, 0xea, 0x2d, 0xee,
	0xef, 0x9f, 0x4d, 0xf5, 0x77, 0x3d, 0x21, 0x26, 0x12, 0x7a, 0x0a, 0x8b, 0xf4, 0x40, 0x09, 0x29,
	0xf2, 0x26, 0xec, 0xab, 0xef, 0x73, 0xfc, 0x47, 0xe7, 0xc6, 0x0f, 0x05, 0xc5, 0x0a, 0x19, 0x3c,
	0xe6, 0xd2, 0x18, 0xc4, 0x41, 0xcb, 0x1d, 0xe2, 0x92, 0xec, 0xaf, 0x81, 0x86, 0xbc, 0xcd, 0xdb,
	0xe4, 0xec, 0x04, 0xbb, 0x2e, 0x4e, 0x88, 0x4d, 0x6f, 0xe0, 0xab, 0x1f, 0x70, 0xd6, 0x14, 0x95,
	0xe5, 0xe8, 0x09, 0x65, 0xdf, 0xf4, 0xac, 0x51, 0xa0, 0xae, 0x72, 0xfb, 0x67, 0xe8, 0xd8, 0x1d,
	0xde, 0x34, 0x5d, 0xbc, 0x49, 0x50, 0xa6, 0xf7, 0x26, 0x35, 0xfa, 0xfc, 0x80, 0x29, 0xe6, 0xa7,
	0xbe, 0xaf, 0xfe, 0x00, 0x85, 0x4a, 0xfa, 0xd9, 0x0c, 0xf5, 0x2f, 0x60, 0x2e, 0x56, 0x63, 0x59,
	0x6b, 0x74, 0x8c, 0x77, 0x50, 0x51, 0xce, 0xd9, 0x27, 0x6b, 0x30, 0x4e, 0x0c, 0x7b, 0x1c, 0xb6,
	0xbb, 0x62, 0xf0, 0xa4, 0xf8, 0xb8, 0x50, 0xff, 0x31, 0x28, 0xe9, 0x9a, 0x7a, 0x21, 0x79, 0x07,
	0x96, 0x33, 0x59, 0x2b, 0xba, 0xd1, 0x14, 0xce, 0xe3, 0x4c, 0xe2, 0x46, 0x83, 0x46, 0xed, 0xe3,
	0x59, 0x60, 0x55, 0xe1, 0x1b, 0xc4, 0x14, 0x2d, 0x96, 0x4a, 0x51, 0xeb, 0x4d, 0x58, 0xc9, 0xf1,
	0x9a, 0x0b, 0xa9, 0xdc, 0x82, 0x6b, 0xb9, 0x8e, 0x71, 0x11, 0x10, 0xed, 0x37, 0x05, 0xa8, 0x45,
	0xe9, 0x52, 0x34, 0xa3, 0x56, 0x28, 0x89, 0x9f, 0x8c, 0xe2, 0xd1, 0x43, 0x29, 0xc7, 0x3e, 0x59,
	0x97, 0x35, 0x62, 0x3d, 0xa5, 0xe8, 0x58, 0xf9, 0x37, 0x8b, 0xcd, 0xa3, 0x20, 0x18, 0xed, 0x79,
	0xee, 0xdb, 0x53, 0xf9, 0x90, 0x31, 0x21, 0xb0, 0x92, 0xc5, 0x06, 0xbe, 0x98, 0x16, 0xbd, 0x68,
	0x8c, 0xa2, 0xfd, 0xa9, 0x00, 0x73, 0xf1, 0x12, 0x17, 0x5e, 0xef, 0x0b, 0xb1, 0xeb, 0x7d, 0xd8,
	0xdb, 0x15, 0x63, 0xbd, 0xdd, 0x63, 0x6c, 0x37, 0x71, 0xf5, 0xb0, 0x81, 0xd3, 0xf2, 0x2a, 0x29,
	0x6b, 0x77, 0x5f, 0x18, 0xa3, 0x91, 0xe5, 0x0c, 0xd0, 0xec, 0xba, 0x10, 0xc8, 0x64, 0x8b, 0xf2,
	0x85, 0xb3, 0x85, 0xf6, 0x73, 0x58, 0xc9, 0x59, 0x60, 0xd2, 0x86, 0xf0, 0xbe, 0xbb, 0x10, 0x6f,
	0x43, 0xf8, 0xed, 0xf4, 0x9c, 0xfe, 0xa1, 0xfd, 0xa1, 0x08, 0xcb, 0x99, 0x32, 0xc6, 0x5a, 0x69,
	0x93, 0x87, 0x9b, 0x44, 0x96, 0x23, 0x6c, 0x30, 0x2a, 0xcc, 0xfb, 0x5c, 0x4f, 0x5e, 0xac, 0x1e,
	0x4c, 0x2b, 0x88, 0x32, 0xed, 0xb3, 0x4b, 0x88, 0xe7, 0xda, 0x2f, 0x7d, 0xec, 0xcd, 0x24, 0x02,
	0xd9, 0x83, 0x9a, 0x40, 0x0d, 0xe4, 0x73, 0xd5, 0xe5, 0xe0, 0x26, 0x20, 0xf1, 0x6b, 0x6a, 0x39,
	0x71, 0x4d, 0xad, 0x7f, 0x05, 0xcb, 0x19, 0xc9, 0xdc, 0x36, 0x1e, 0x1d, 0x98, 0x0e, 0x0d, 0xcb,
	0x0e, 0x1d, 0x98, 0x0f, 0xb4, 0x3f, 0x96, 0x61, 0x25, 0xa7, 0xd6, 0x26, 0x0b, 0x49, 0xe1, 0x9d,
	0x85, 0xa4, 0x38, 0xad, 0x90, 0x94, 0x2e, 0x5e, 0x48, 0xbe, 0x82, 0x12, 0x75, 0x4e, 0xe4, 0x5d,
	0xe0, 0xde, 0xf4, 0xde, 0xa0, 0xd1, 0x76, 0x4e, 0x44, 0x4a, 0x67, 0x72, 0xac, 0x31, 0xa2, 0x6f,
	0x31, 0xb3, 0x52, 0x51, 0xf0, 0xf7, 0xd9, 0xdf, 0x80, 0x87, 0x4d, 0x55, 0xcf, 0x99, 0x61, 0xfb,
	0x39, 0x74, 0x99, 0x7f, 0x8d, 0x6d, 0x9b, 0x3f, 0x08, 0x56, 0xf5, 0x09, 0x81, 0x6c, 0xc1, 0x2c,
	0x3b, 0xd8, 0x57, 0xae, 0x2d, 0x5b, 0xf5, 0xfb, 0xe7, 0x50, 0x88, 0x6d, 0xe3, 0x85, 0x3b, 0x76,
	0x02, 0x3d, 0x14, 0x9e, 0x3c, 0xd5, 0xec, 0x75, 0xc2, 0x87, 0xb9, 0x6a, 0xfc, 0xa9, 0x26, 0x22,
	0xd7, 0x1f, 0x41, 0x35, 0xdc, 0xd0, 0x85, 0xf2, 0xd9, 0x37, 0x50, 0x8b, 0xd6, 0xbd, 0x4c, 0xea,
	0x45, 0x3b, 0x0c, 0x99, 0x2c, 0x8f, 0x3c, 0x79, 0xae, 0x11, 0x41, 0xfb, 0x4f, 0x11, 0x56, 0x72,
	0x3a, 0xa8, 0xff, 0xb5, 0xaf, 0x60, 0x6c, 0x38, 0x6e, 0xcb, 0x30, 0x8f, 0x44, 0x6c, 0x54, 0xf5,
	0x70, 0x18, 0x7a, 0xd1, 0x4c, 0xae, 0x17, 0xe5, 0xec, 0x24, 0xe5, 0x45, 0xef, 0xf6, 0x0a, 0x96,
	0x86, 0xa2, 0x7b, 0x0d, 0x37, 0x98, 0x7c, 0x2a, 0x4e, 0x52, 0x2f, 0x7b, 0x96, 0xda, 0xef, 0x30,
	0x32, 0x73, 0x3a, 0xcb, 0xff, 0xeb, 0xc8, 0xcc, 0xd1, 0x37, 0x65, 0x53, 0x3c, 0x2c, 0x9f, 0xf7,
	0x39, 0xbe, 0xac, 0x62, 0xe1, 0x90, 0xbd, 0xf3, 0x58, 0x8e, 0xe9, 0xd1, 0x21, 0x2e, 0x6e, 0x84,
	0xf6, 0x8e, 0x93, 0x92, 0xe7, 0x31, 0x9b, 0x3e, 0x0f, 0xec, 0xb1, 0xf0, 0x2a, 0x1b, 0x58, 0x43,
	0xda, 0x89, 0xcc, 0x23, 0xc2, 0x2b, 0x43, 0x4f, 0xf3, 0x72, 0x63, 0xd5, 0xb2, 0xbc, 0xdc, 0x66,
	0xbb, 0x11, 0x6f, 0xd3, 0x43, 0xab, 0x18, 0x26, 0xaa, 0x0e, 0xe7, 0xae, 0x96, 0x19, 0xd9, 0x4b,
	0xfb, 0x03, 0x85, 0x1b, 0x67, 0x5c, 0x07, 0x58, 0x62, 0x91, 0x17, 0x82, 0xc8, 0x17, 0x05, 0x64,
	0x9a, 0xcc, 0x8c, 0x1c, 0x23, 0xc9, 0x45, 0xe2, 0x24, 0xad, 0x03, 0x57, 0xf3, 0x1e, 0x45, 0x2e,
	0x91, 0x4d, 0xb4, 0x43, 0xb8, 0x96, 0xfb, 0x26, 0x72, 0x99, 0xcc, 0x54, 0x87, 0xaa, 0x61, 0xdb,
	0xee, 0x1b, 0x34, 0x1d, 0xd7, 0xba, 0xaa, 0x47, 0x63, 0xed, 0x27, 0x70, 0x3d, 0xff, 0xb1, 0xe4,
	0xbc, 0x6d, 0xd0, 0xda, 0x36, 0x2c, 0xc5, 0x9a, 0x56, 0x7e, 0x5b, 0x9d, 0x85, 0x12, 0xda, 0x41,
	0xb9, 0x42, 0x16, 0x01, 0x36, 0xa3, 0x88, 0x56, 0x0a, 0x04, 0xa0, 0xb2, 0xc1, 0x5f, 0x3c, 0x94,
	0x22, 0x7b, 0xa0, 0xe6, 0x2b, 0x2b, 0x25, 0xf6, 0x02, 0xb8, 0xeb, 0x3a, 0x54, 0x29, 0xaf, 0xed,
	0xc8, 0x87, 0xb5, 0xc4, 0xe5, 0x17, 0xa5, 0x04, 0x0a, 0x22, 0xe2, 0xb7, 0x58, 0x48, 0xa0, 0x89,
	0xea, 0x81, 0x68, 0x2b, 0xb0, 0x94, 0x3a, 0x61, 0xa5, 0xb4, 0xf6, 0x1c, 0x16, 0x22, 0xbf, 0xe5,
	0x48, 0x4b, 0x30, 0x27, 0x90, 0xc4, 0xca, 0x57, 0x70, 0x43, 0x8b, 0xa2, 0xf5, 0x13, 0xcf, 0x91,
	0xc6, 0x00, 0x61, 0xaf, 0x82, 0x12, 0xa3, 0x09, 0xce, 0xe2, 0xda, 0xcf, 0x80, 0xec, 0x67, 0x5f,
	0x05, 0x70, 0x83, 0x82, 0xfa, 0xda, 0xa3, 0x27, 0x02, 0x6f, 0xb2, 0x61, 0x4e, 0x2b, 0x30, 0x1e,
	0xb1, 0x69, 0x3e, 0x2e, 0xb2, 0x31, 0x07, 0xf5, 0xf9, 0xb8, 0xb4, 0xd6, 0x94, 0x06, 0x14, 0x2f,
	0x49, 0x1c, 0x76, 0x1e, 0xaa, 0x7b, 0x86, 0x87, 0x87, 0x44, 0x6d, 0xb9, 0x67, 0xf4, 0x04, 0xc3,
	0x16, 0xca, 0x89, 0xef, 0x1d, 0xb4, 0x8f, 0x1f, 0x74, 0x1d, 0x1b, 0x6d, 0xb9, 0xf6, 0x6b, 0x50,
	0x38, 0x84, 0x3c, 0xbb, 0xd0, 0x6a, 0xc2, 0x19, 0x05, 0x82, 0x78, 0x97, 0x13, 0x4f, 0xa8, 0xd2,
	0xb3, 0x10, 0x0e, 0x07, 0x83, 0x68, 0xb0, 0x24, 0xfb, 0x60, 0xe1, 0x0b, 0xa8, 0x29, 0x12, 0xac,
	0x04, 0x41, 0x81, 0xf9, 0x56, 0xec, 0x5d, 0x4c, 0x29, 0xd5, 0x8b, 0x4a, 0x61, 0x6d, 0x00, 0x8b,
	0x62, 0x03, 0xec, 0xbd, 0x35, 0x74, 0x80, 0x5d, 0xfa, 0x46, 0x2c, 0xb6, 0x47, 0x9d, 0x3e, 0x06,
	0xb4, 0x58, 0x4c, 0x1f, 0x3b, 0x0e, 0x1b, 0x14, 0xd9, 0x16, 0x5b, 0xe2, 0x26, 0xc6, 0x3c, 0x00,
	0x15, 0xdc, 0xc2, 0x96, 0x8a, 0xf6, 0x95, 0x32, 0x73, 0x8c, 0xb6, 0xe7, 0xb9, 0x9e, 0x32, 0x43,
	0x16, 0xa0, 0xd6, 0x32, 0x1c, 0x93, 0xda, 0x6c, 0xa6, 0xb2, 0xf1, 0xf2, 0xaf, 0xff, 0xba, 0x5d,
	0xf8, 0x3b, 0xfe, 0xfb, 0x27, 0xfe, 0xfb, 0xfd, 0xbf, 0x6f, 0x5f, 0x81, 0x3b, 0xd8, 0xe6, 0x35,
	0xbe, 0x43, 0xc4, 0xd3, 0xb1, 0xe1, 0xb8, 0x18, 0x08, 0xae, 0x47, 0x1b, 0xe2, 0x27, 0x66, 0xfe,
	0x63, 0x70, 0x6f, 0x7c, 0xc8, 0xe2, 0x62, 0xe3, 0xba, 0x50, 0x7b, 0xec, 0x45, 0x3f, 0xa7, 0x50,
	0x6f, 0xf3, 0xa0, 0xfb, 0x75, 0x09, 0x27, 0x7b, 0x15, 0xce, 0xfa, 0xf0, 0xbf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xc6, 0xf0, 0x34, 0xc5, 0xc8, 0x1e, 0x00, 0x00,
}
