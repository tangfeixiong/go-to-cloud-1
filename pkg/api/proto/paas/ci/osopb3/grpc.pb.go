// Code generated by protoc-gen-gogo.
// source: paas/ci/osopb3/grpc.proto
// DO NOT EDIT!

package osopb3

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import k8s_io_kubernetes_pkg_api_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
import k8s_io_kubernetes_pkg_api_v1 "k8s.io/kubernetes/pkg/api/v1"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type K8SNamespacePhase int32

const (
	K8SNamespacePhase_Active      K8SNamespacePhase = 0
	K8SNamespacePhase_Terminating K8SNamespacePhase = 1
)

var K8SNamespacePhase_name = map[int32]string{
	0: "Active",
	1: "Terminating",
}
var K8SNamespacePhase_value = map[string]int32{
	"Active":      0,
	"Terminating": 1,
}

func (x K8SNamespacePhase) String() string {
	return proto.EnumName(K8SNamespacePhase_name, int32(x))
}
func (K8SNamespacePhase) EnumDescriptor() ([]byte, []int) { return fileDescriptorGrpc, []int{0} }

type DockerBuildConfigRequestData_OsoBuildRunPolicy int32

const (
	DockerBuildConfigRequestData_Parallel         DockerBuildConfigRequestData_OsoBuildRunPolicy = 0
	DockerBuildConfigRequestData_Serial           DockerBuildConfigRequestData_OsoBuildRunPolicy = 1
	DockerBuildConfigRequestData_SerialLatestOnly DockerBuildConfigRequestData_OsoBuildRunPolicy = 2
)

var DockerBuildConfigRequestData_OsoBuildRunPolicy_name = map[int32]string{
	0: "Parallel",
	1: "Serial",
	2: "SerialLatestOnly",
}
var DockerBuildConfigRequestData_OsoBuildRunPolicy_value = map[string]int32{
	"Parallel":         0,
	"Serial":           1,
	"SerialLatestOnly": 2,
}

func (x DockerBuildConfigRequestData_OsoBuildRunPolicy) String() string {
	return proto.EnumName(DockerBuildConfigRequestData_OsoBuildRunPolicy_name, int32(x))
}
func (DockerBuildConfigRequestData_OsoBuildRunPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorGrpc, []int{14, 0}
}

//
// Project
//
type ProjectResponseDataArbitrary struct {
	Name          string                                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Result        string                                          `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	Finalizers    []string                                        `protobuf:"bytes,3,rep,name=finalizers" json:"finalizers,omitempty"`
	Datatype      *k8s_io_kubernetes_pkg_api_unversioned.TypeMeta `protobuf:"bytes,4,opt,name=datatype" json:"datatype,omitempty"`
	Metadata      *k8s_io_kubernetes_pkg_api_v1.ObjectMeta        `protobuf:"bytes,5,opt,name=metadata" json:"metadata,omitempty"`
	ResultingCode K8SNamespacePhase                               `protobuf:"varint,6,opt,name=resultingCode,proto3,enum=paas.ci.osopb3.K8SNamespacePhase" json:"resultingCode,omitempty"`
	Raw           *RawData                                        `protobuf:"bytes,7,opt,name=raw" json:"raw,omitempty"`
}

func (m *ProjectResponseDataArbitrary) Reset()                    { *m = ProjectResponseDataArbitrary{} }
func (m *ProjectResponseDataArbitrary) String() string            { return proto.CompactTextString(m) }
func (*ProjectResponseDataArbitrary) ProtoMessage()               {}
func (*ProjectResponseDataArbitrary) Descriptor() ([]byte, []int) { return fileDescriptorGrpc, []int{0} }

func (m *ProjectResponseDataArbitrary) GetDatatype() *k8s_io_kubernetes_pkg_api_unversioned.TypeMeta {
	if m != nil {
		return m.Datatype
	}
	return nil
}

func (m *ProjectResponseDataArbitrary) GetMetadata() *k8s_io_kubernetes_pkg_api_v1.ObjectMeta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ProjectResponseDataArbitrary) GetRaw() *RawData {
	if m != nil {
		return m.Raw
	}
	return nil
}

type ProjectCreationRequestData struct {
	Name        string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Labels      map[string]string `protobuf:"bytes,2,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations map[string]string `protobuf:"bytes,3,rep,name=annotations" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Finalizers  []string          `protobuf:"bytes,4,rep,name=finalizers" json:"finalizers,omitempty"`
}

func (m *ProjectCreationRequestData) Reset()                    { *m = ProjectCreationRequestData{} }
func (m *ProjectCreationRequestData) String() string            { return proto.CompactTextString(m) }
func (*ProjectCreationRequestData) ProtoMessage()               {}
func (*ProjectCreationRequestData) Descriptor() ([]byte, []int) { return fileDescriptorGrpc, []int{1} }

func (m *ProjectCreationRequestData) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ProjectCreationRequestData) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

type ProjectCreationResponseData struct {
	Name       string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status     string            `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Finalizers []string          `protobuf:"bytes,3,rep,name=finalizers" json:"finalizers,omitempty"`
	Phase      K8SNamespacePhase `protobuf:"varint,4,opt,name=phase,proto3,enum=paas.ci.osopb3.K8SNamespacePhase" json:"phase,omitempty"`
	Raw        *RawData          `protobuf:"bytes,5,opt,name=raw" json:"raw,omitempty"`
}

func (m *ProjectCreationResponseData) Reset()                    { *m = ProjectCreationResponseData{} }
func (m *ProjectCreationResponseData) String() string            { return proto.CompactTextString(m) }
func (*ProjectCreationResponseData) ProtoMessage()               {}
func (*ProjectCreationResponseData) Descriptor() ([]byte, []int) { return fileDescriptorGrpc, []int{2} }

func (m *ProjectCreationResponseData) GetRaw() *RawData {
	if m != nil {
		return m.Raw
	}
	return nil
}

type ProjectRetrieveRequestData struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ProjectRetrieveRequestData) Reset()                    { *m = ProjectRetrieveRequestData{} }
func (m *ProjectRetrieveRequestData) String() string            { return proto.CompactTextString(m) }
func (*ProjectRetrieveRequestData) ProtoMessage()               {}
func (*ProjectRetrieveRequestData) Descriptor() ([]byte, []int) { return fileDescriptorGrpc, []int{3} }

type ProjectRetrieveResponseData struct {
	Name       string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status     string            `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Finalizers []string          `protobuf:"bytes,3,rep,name=finalizers" json:"finalizers,omitempty"`
	Phase      K8SNamespacePhase `protobuf:"varint,4,opt,name=phase,proto3,enum=paas.ci.osopb3.K8SNamespacePhase" json:"phase,omitempty"`
	Raw        *RawData          `protobuf:"bytes,5,opt,name=raw" json:"raw,omitempty"`
}

func (m *ProjectRetrieveResponseData) Reset()                    { *m = ProjectRetrieveResponseData{} }
func (m *ProjectRetrieveResponseData) String() string            { return proto.CompactTextString(m) }
func (*ProjectRetrieveResponseData) ProtoMessage()               {}
func (*ProjectRetrieveResponseData) Descriptor() ([]byte, []int) { return fileDescriptorGrpc, []int{4} }

func (m *ProjectRetrieveResponseData) GetRaw() *RawData {
	if m != nil {
		return m.Raw
	}
	return nil
}

type ProjectUpdationRequestData struct {
	Name        string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Labels      map[string]string `protobuf:"bytes,2,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations map[string]string `protobuf:"bytes,3,rep,name=annotations" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ProjectUpdationRequestData) Reset()                    { *m = ProjectUpdationRequestData{} }
func (m *ProjectUpdationRequestData) String() string            { return proto.CompactTextString(m) }
func (*ProjectUpdationRequestData) ProtoMessage()               {}
func (*ProjectUpdationRequestData) Descriptor() ([]byte, []int) { return fileDescriptorGrpc, []int{5} }

func (m *ProjectUpdationRequestData) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ProjectUpdationRequestData) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

type ProjectDeletionRequestData struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ProjectDeletionRequestData) Reset()                    { *m = ProjectDeletionRequestData{} }
func (m *ProjectDeletionRequestData) String() string            { return proto.CompactTextString(m) }
func (*ProjectDeletionRequestData) ProtoMessage()               {}
func (*ProjectDeletionRequestData) Descriptor() ([]byte, []int) { return fileDescriptorGrpc, []int{6} }

type ProjectDeletionResponseData struct {
	Name       string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status     string            `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Finalizers []string          `protobuf:"bytes,3,rep,name=finalizers" json:"finalizers,omitempty"`
	Phase      K8SNamespacePhase `protobuf:"varint,4,opt,name=phase,proto3,enum=paas.ci.osopb3.K8SNamespacePhase" json:"phase,omitempty"`
	Raw        *RawData          `protobuf:"bytes,5,opt,name=raw" json:"raw,omitempty"`
}

func (m *ProjectDeletionResponseData) Reset()                    { *m = ProjectDeletionResponseData{} }
func (m *ProjectDeletionResponseData) String() string            { return proto.CompactTextString(m) }
func (*ProjectDeletionResponseData) ProtoMessage()               {}
func (*ProjectDeletionResponseData) Descriptor() ([]byte, []int) { return fileDescriptorGrpc, []int{7} }

func (m *ProjectDeletionResponseData) GetRaw() *RawData {
	if m != nil {
		return m.Raw
	}
	return nil
}

type CreateOriginProjectRequest struct {
	Name       string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Finalizers []string `protobuf:"bytes,2,rep,name=finalizers" json:"finalizers,omitempty"`
}

func (m *CreateOriginProjectRequest) Reset()                    { *m = CreateOriginProjectRequest{} }
func (m *CreateOriginProjectRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateOriginProjectRequest) ProtoMessage()               {}
func (*CreateOriginProjectRequest) Descriptor() ([]byte, []int) { return fileDescriptorGrpc, []int{8} }

type CreateOriginProjectResponse struct {
	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Phase string `protobuf:"bytes,2,opt,name=phase,proto3" json:"phase,omitempty"`
}

func (m *CreateOriginProjectResponse) Reset()                    { *m = CreateOriginProjectResponse{} }
func (m *CreateOriginProjectResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateOriginProjectResponse) ProtoMessage()               {}
func (*CreateOriginProjectResponse) Descriptor() ([]byte, []int) { return fileDescriptorGrpc, []int{9} }

type FindProjectRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *FindProjectRequest) Reset()                    { *m = FindProjectRequest{} }
func (m *FindProjectRequest) String() string            { return proto.CompactTextString(m) }
func (*FindProjectRequest) ProtoMessage()               {}
func (*FindProjectRequest) Descriptor() ([]byte, []int) { return fileDescriptorGrpc, []int{10} }

type FindProjectResponse struct {
	Odefv1RawData []byte `protobuf:"bytes,1,opt,name=odefv1RawData,proto3" json:"odefv1RawData,omitempty"`
}

func (m *FindProjectResponse) Reset()                    { *m = FindProjectResponse{} }
func (m *FindProjectResponse) String() string            { return proto.CompactTextString(m) }
func (*FindProjectResponse) ProtoMessage()               {}
func (*FindProjectResponse) Descriptor() ([]byte, []int) { return fileDescriptorGrpc, []int{11} }

type DeleteProjectRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *DeleteProjectRequest) Reset()                    { *m = DeleteProjectRequest{} }
func (m *DeleteProjectRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteProjectRequest) ProtoMessage()               {}
func (*DeleteProjectRequest) Descriptor() ([]byte, []int) { return fileDescriptorGrpc, []int{12} }

type DeleteProjectResponse struct {
	Flag int64 `protobuf:"varint,1,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (m *DeleteProjectResponse) Reset()                    { *m = DeleteProjectResponse{} }
func (m *DeleteProjectResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteProjectResponse) ProtoMessage()               {}
func (*DeleteProjectResponse) Descriptor() ([]byte, []int) { return fileDescriptorGrpc, []int{13} }

//
// Docker Build
//
type DockerBuildConfigRequestData struct {
	Name              string                                         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ProjectName       string                                         `protobuf:"bytes,2,opt,name=projectName,proto3" json:"projectName,omitempty"`
	Triggers          []*OsoBuildTriggerPolicy                       `protobuf:"bytes,3,rep,name=triggers" json:"triggers,omitempty"`
	RunPolicy         string                                         `protobuf:"bytes,4,opt,name=runPolicy,proto3" json:"runPolicy,omitempty"`
	CommonSpec        *OsoCommonSpec                                 `protobuf:"bytes,5,opt,name=commonSpec" json:"commonSpec,omitempty"`
	OsoBuildRunPolicy DockerBuildConfigRequestData_OsoBuildRunPolicy `protobuf:"varint,6,opt,name=osoBuildRunPolicy,proto3,enum=paas.ci.osopb3.DockerBuildConfigRequestData_OsoBuildRunPolicy" json:"osoBuildRunPolicy,omitempty"`
	Labels            map[string]string                              `protobuf:"bytes,7,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations       map[string]string                              `protobuf:"bytes,8,rep,name=annotations" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *DockerBuildConfigRequestData) Reset()         { *m = DockerBuildConfigRequestData{} }
func (m *DockerBuildConfigRequestData) String() string { return proto.CompactTextString(m) }
func (*DockerBuildConfigRequestData) ProtoMessage()    {}
func (*DockerBuildConfigRequestData) Descriptor() ([]byte, []int) {
	return fileDescriptorGrpc, []int{14}
}

func (m *DockerBuildConfigRequestData) GetTriggers() []*OsoBuildTriggerPolicy {
	if m != nil {
		return m.Triggers
	}
	return nil
}

func (m *DockerBuildConfigRequestData) GetCommonSpec() *OsoCommonSpec {
	if m != nil {
		return m.CommonSpec
	}
	return nil
}

func (m *DockerBuildConfigRequestData) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *DockerBuildConfigRequestData) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

type DockerBuildConfigResponseData struct {
	State int64    `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	Raw   *RawJSON `protobuf:"bytes,2,opt,name=raw" json:"raw,omitempty"`
}

func (m *DockerBuildConfigResponseData) Reset()         { *m = DockerBuildConfigResponseData{} }
func (m *DockerBuildConfigResponseData) String() string { return proto.CompactTextString(m) }
func (*DockerBuildConfigResponseData) ProtoMessage()    {}
func (*DockerBuildConfigResponseData) Descriptor() ([]byte, []int) {
	return fileDescriptorGrpc, []int{15}
}

func (m *DockerBuildConfigResponseData) GetRaw() *RawJSON {
	if m != nil {
		return m.Raw
	}
	return nil
}

type DockerBuildRequestData struct {
	Name          string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ProjectName   string                        `protobuf:"bytes,2,opt,name=projectName,proto3" json:"projectName,omitempty"`
	Configuration *DockerBuildConfigRequestData `protobuf:"bytes,3,opt,name=configuration" json:"configuration,omitempty"`
	TriggeredBy   []*OsoBuildTriggerCause       `protobuf:"bytes,4,rep,name=triggeredBy" json:"triggeredBy,omitempty"`
	Labels        map[string]string             `protobuf:"bytes,5,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations   map[string]string             `protobuf:"bytes,6,rep,name=annotations" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *DockerBuildRequestData) Reset()                    { *m = DockerBuildRequestData{} }
func (m *DockerBuildRequestData) String() string            { return proto.CompactTextString(m) }
func (*DockerBuildRequestData) ProtoMessage()               {}
func (*DockerBuildRequestData) Descriptor() ([]byte, []int) { return fileDescriptorGrpc, []int{16} }

func (m *DockerBuildRequestData) GetConfiguration() *DockerBuildConfigRequestData {
	if m != nil {
		return m.Configuration
	}
	return nil
}

func (m *DockerBuildRequestData) GetTriggeredBy() []*OsoBuildTriggerCause {
	if m != nil {
		return m.TriggeredBy
	}
	return nil
}

func (m *DockerBuildRequestData) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *DockerBuildRequestData) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

type DockerBuildResponseData struct {
	Status *OsoBuildStatus `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Raw    *RawJSON        `protobuf:"bytes,2,opt,name=raw" json:"raw,omitempty"`
}

func (m *DockerBuildResponseData) Reset()                    { *m = DockerBuildResponseData{} }
func (m *DockerBuildResponseData) String() string            { return proto.CompactTextString(m) }
func (*DockerBuildResponseData) ProtoMessage()               {}
func (*DockerBuildResponseData) Descriptor() ([]byte, []int) { return fileDescriptorGrpc, []int{17} }

func (m *DockerBuildResponseData) GetStatus() *OsoBuildStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *DockerBuildResponseData) GetRaw() *RawJSON {
	if m != nil {
		return m.Raw
	}
	return nil
}

type RawJSON struct {
	ObjectGVK  string `protobuf:"bytes,1,opt,name=objectGVK,proto3" json:"objectGVK,omitempty"`
	ObjectJSON []byte `protobuf:"bytes,2,opt,name=objectJSON,proto3" json:"objectJSON,omitempty"`
}

func (m *RawJSON) Reset()                    { *m = RawJSON{} }
func (m *RawJSON) String() string            { return proto.CompactTextString(m) }
func (*RawJSON) ProtoMessage()               {}
func (*RawJSON) Descriptor() ([]byte, []int) { return fileDescriptorGrpc, []int{18} }

type StiBuildRequestData struct {
	Credential    string                    `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty"`
	Project       string                    `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Application   string                    `protobuf:"bytes,3,opt,name=application,proto3" json:"application,omitempty"`
	BuildRequests []*DockerBuildRequestData `protobuf:"bytes,4,rep,name=buildRequests" json:"buildRequests,omitempty"`
}

func (m *StiBuildRequestData) Reset()                    { *m = StiBuildRequestData{} }
func (m *StiBuildRequestData) String() string            { return proto.CompactTextString(m) }
func (*StiBuildRequestData) ProtoMessage()               {}
func (*StiBuildRequestData) Descriptor() ([]byte, []int) { return fileDescriptorGrpc, []int{19} }

func (m *StiBuildRequestData) GetBuildRequests() []*DockerBuildRequestData {
	if m != nil {
		return m.BuildRequests
	}
	return nil
}

type StiBuildResponseData struct {
	Authorized     bool                       `protobuf:"varint,1,opt,name=authorized,proto3" json:"authorized,omitempty"`
	Project        string                     `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Application    string                     `protobuf:"bytes,3,opt,name=application,proto3" json:"application,omitempty"`
	BuildResponses []*DockerBuildResponseData `protobuf:"bytes,4,rep,name=buildResponses" json:"buildResponses,omitempty"`
}

func (m *StiBuildResponseData) Reset()                    { *m = StiBuildResponseData{} }
func (m *StiBuildResponseData) String() string            { return proto.CompactTextString(m) }
func (*StiBuildResponseData) ProtoMessage()               {}
func (*StiBuildResponseData) Descriptor() ([]byte, []int) { return fileDescriptorGrpc, []int{20} }

func (m *StiBuildResponseData) GetBuildResponses() []*DockerBuildResponseData {
	if m != nil {
		return m.BuildResponses
	}
	return nil
}

type RawData struct {
	ObjectName  string `protobuf:"bytes,1,opt,name=objectName,proto3" json:"objectName,omitempty"`
	ObjectBytes []byte `protobuf:"bytes,2,opt,name=objectBytes,proto3" json:"objectBytes,omitempty"`
}

func (m *RawData) Reset()                    { *m = RawData{} }
func (m *RawData) String() string            { return proto.CompactTextString(m) }
func (*RawData) ProtoMessage()               {}
func (*RawData) Descriptor() ([]byte, []int) { return fileDescriptorGrpc, []int{21} }

type VersionRequestData struct {
}

func (m *VersionRequestData) Reset()                    { *m = VersionRequestData{} }
func (m *VersionRequestData) String() string            { return proto.CompactTextString(m) }
func (*VersionRequestData) ProtoMessage()               {}
func (*VersionRequestData) Descriptor() ([]byte, []int) { return fileDescriptorGrpc, []int{22} }

type VersionResponseData struct {
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *VersionResponseData) Reset()                    { *m = VersionResponseData{} }
func (m *VersionResponseData) String() string            { return proto.CompactTextString(m) }
func (*VersionResponseData) ProtoMessage()               {}
func (*VersionResponseData) Descriptor() ([]byte, []int) { return fileDescriptorGrpc, []int{23} }

func init() {
	proto.RegisterType((*ProjectResponseDataArbitrary)(nil), "paas.ci.osopb3.ProjectResponseDataArbitrary")
	proto.RegisterType((*ProjectCreationRequestData)(nil), "paas.ci.osopb3.ProjectCreationRequestData")
	proto.RegisterType((*ProjectCreationResponseData)(nil), "paas.ci.osopb3.ProjectCreationResponseData")
	proto.RegisterType((*ProjectRetrieveRequestData)(nil), "paas.ci.osopb3.ProjectRetrieveRequestData")
	proto.RegisterType((*ProjectRetrieveResponseData)(nil), "paas.ci.osopb3.ProjectRetrieveResponseData")
	proto.RegisterType((*ProjectUpdationRequestData)(nil), "paas.ci.osopb3.ProjectUpdationRequestData")
	proto.RegisterType((*ProjectDeletionRequestData)(nil), "paas.ci.osopb3.ProjectDeletionRequestData")
	proto.RegisterType((*ProjectDeletionResponseData)(nil), "paas.ci.osopb3.ProjectDeletionResponseData")
	proto.RegisterType((*CreateOriginProjectRequest)(nil), "paas.ci.osopb3.CreateOriginProjectRequest")
	proto.RegisterType((*CreateOriginProjectResponse)(nil), "paas.ci.osopb3.CreateOriginProjectResponse")
	proto.RegisterType((*FindProjectRequest)(nil), "paas.ci.osopb3.FindProjectRequest")
	proto.RegisterType((*FindProjectResponse)(nil), "paas.ci.osopb3.FindProjectResponse")
	proto.RegisterType((*DeleteProjectRequest)(nil), "paas.ci.osopb3.DeleteProjectRequest")
	proto.RegisterType((*DeleteProjectResponse)(nil), "paas.ci.osopb3.DeleteProjectResponse")
	proto.RegisterType((*DockerBuildConfigRequestData)(nil), "paas.ci.osopb3.DockerBuildConfigRequestData")
	proto.RegisterType((*DockerBuildConfigResponseData)(nil), "paas.ci.osopb3.DockerBuildConfigResponseData")
	proto.RegisterType((*DockerBuildRequestData)(nil), "paas.ci.osopb3.DockerBuildRequestData")
	proto.RegisterType((*DockerBuildResponseData)(nil), "paas.ci.osopb3.DockerBuildResponseData")
	proto.RegisterType((*RawJSON)(nil), "paas.ci.osopb3.RawJSON")
	proto.RegisterType((*StiBuildRequestData)(nil), "paas.ci.osopb3.StiBuildRequestData")
	proto.RegisterType((*StiBuildResponseData)(nil), "paas.ci.osopb3.StiBuildResponseData")
	proto.RegisterType((*RawData)(nil), "paas.ci.osopb3.RawData")
	proto.RegisterType((*VersionRequestData)(nil), "paas.ci.osopb3.VersionRequestData")
	proto.RegisterType((*VersionResponseData)(nil), "paas.ci.osopb3.VersionResponseData")
	proto.RegisterEnum("paas.ci.osopb3.K8SNamespacePhase", K8SNamespacePhase_name, K8SNamespacePhase_value)
	proto.RegisterEnum("paas.ci.osopb3.DockerBuildConfigRequestData_OsoBuildRunPolicy", DockerBuildConfigRequestData_OsoBuildRunPolicy_name, DockerBuildConfigRequestData_OsoBuildRunPolicy_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for SimpleService service

type SimpleServiceClient interface {
	Version(ctx context.Context, in *VersionRequestData, opts ...grpc.CallOption) (*VersionResponseData, error)
	CreateProjectIntoArbitrary(ctx context.Context, in *ProjectCreationRequestData, opts ...grpc.CallOption) (*ProjectResponseDataArbitrary, error)
	RetrieveProjectIntoArbitrary(ctx context.Context, in *ProjectRetrieveRequestData, opts ...grpc.CallOption) (*ProjectResponseDataArbitrary, error)
	UpdateProjectIntoArbitrary(ctx context.Context, in *ProjectUpdationRequestData, opts ...grpc.CallOption) (*ProjectResponseDataArbitrary, error)
	DeleteProjectIntoArbitrary(ctx context.Context, in *ProjectDeletionRequestData, opts ...grpc.CallOption) (*ProjectResponseDataArbitrary, error)
	CreateOriginProject(ctx context.Context, in *CreateOriginProjectRequest, opts ...grpc.CallOption) (*CreateOriginProjectResponse, error)
	FindProject(ctx context.Context, in *FindProjectRequest, opts ...grpc.CallOption) (*FindProjectResponse, error)
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error)
	CreateDockerBuilderIntoImage(ctx context.Context, in *DockerBuildRequestData, opts ...grpc.CallOption) (*DockerBuildResponseData, error)
	TrackDockerBuild(ctx context.Context, in *DockerBuildRequestData, opts ...grpc.CallOption) (*DockerBuildResponseData, error)
	RetrieveDockerBuild(ctx context.Context, in *DockerBuildRequestData, opts ...grpc.CallOption) (*DockerBuildResponseData, error)
	RetrieveDockerBuilder(ctx context.Context, in *DockerBuildConfigRequestData, opts ...grpc.CallOption) (*DockerBuildConfigResponseData, error)
	UpdateDockerBuilderIntoImage(ctx context.Context, in *DockerBuildConfigRequestData, opts ...grpc.CallOption) (*DockerBuildResponseData, error)
	DockerRebuild(ctx context.Context, in *DockerBuildRequestData, opts ...grpc.CallOption) (*DockerBuildResponseData, error)
	DeleteDockerBuild(ctx context.Context, in *DockerBuildRequestData, opts ...grpc.CallOption) (*DockerBuildResponseData, error)
	DeleteDockerBuilder(ctx context.Context, in *DockerBuildConfigRequestData, opts ...grpc.CallOption) (*DockerBuildConfigResponseData, error)
	CreateStiBuilderIntoImage(ctx context.Context, in *StiBuildRequestData, opts ...grpc.CallOption) (*StiBuildResponseData, error)
	TrackStiBuild(ctx context.Context, in *StiBuildRequestData, opts ...grpc.CallOption) (*StiBuildResponseData, error)
	// for test
	//
	ArbitraryDockerBuild(ctx context.Context, in *RawData, opts ...grpc.CallOption) (*RawData, error)
	ArbitraryDockerRebuild(ctx context.Context, in *RawData, opts ...grpc.CallOption) (*RawData, error)
}

type simpleServiceClient struct {
	cc *grpc.ClientConn
}

func NewSimpleServiceClient(cc *grpc.ClientConn) SimpleServiceClient {
	return &simpleServiceClient{cc}
}

func (c *simpleServiceClient) Version(ctx context.Context, in *VersionRequestData, opts ...grpc.CallOption) (*VersionResponseData, error) {
	out := new(VersionResponseData)
	err := grpc.Invoke(ctx, "/paas.ci.osopb3.SimpleService/Version", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) CreateProjectIntoArbitrary(ctx context.Context, in *ProjectCreationRequestData, opts ...grpc.CallOption) (*ProjectResponseDataArbitrary, error) {
	out := new(ProjectResponseDataArbitrary)
	err := grpc.Invoke(ctx, "/paas.ci.osopb3.SimpleService/CreateProjectIntoArbitrary", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) RetrieveProjectIntoArbitrary(ctx context.Context, in *ProjectRetrieveRequestData, opts ...grpc.CallOption) (*ProjectResponseDataArbitrary, error) {
	out := new(ProjectResponseDataArbitrary)
	err := grpc.Invoke(ctx, "/paas.ci.osopb3.SimpleService/RetrieveProjectIntoArbitrary", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) UpdateProjectIntoArbitrary(ctx context.Context, in *ProjectUpdationRequestData, opts ...grpc.CallOption) (*ProjectResponseDataArbitrary, error) {
	out := new(ProjectResponseDataArbitrary)
	err := grpc.Invoke(ctx, "/paas.ci.osopb3.SimpleService/UpdateProjectIntoArbitrary", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) DeleteProjectIntoArbitrary(ctx context.Context, in *ProjectDeletionRequestData, opts ...grpc.CallOption) (*ProjectResponseDataArbitrary, error) {
	out := new(ProjectResponseDataArbitrary)
	err := grpc.Invoke(ctx, "/paas.ci.osopb3.SimpleService/DeleteProjectIntoArbitrary", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) CreateOriginProject(ctx context.Context, in *CreateOriginProjectRequest, opts ...grpc.CallOption) (*CreateOriginProjectResponse, error) {
	out := new(CreateOriginProjectResponse)
	err := grpc.Invoke(ctx, "/paas.ci.osopb3.SimpleService/CreateOriginProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) FindProject(ctx context.Context, in *FindProjectRequest, opts ...grpc.CallOption) (*FindProjectResponse, error) {
	out := new(FindProjectResponse)
	err := grpc.Invoke(ctx, "/paas.ci.osopb3.SimpleService/FindProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error) {
	out := new(DeleteProjectResponse)
	err := grpc.Invoke(ctx, "/paas.ci.osopb3.SimpleService/DeleteProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) CreateDockerBuilderIntoImage(ctx context.Context, in *DockerBuildRequestData, opts ...grpc.CallOption) (*DockerBuildResponseData, error) {
	out := new(DockerBuildResponseData)
	err := grpc.Invoke(ctx, "/paas.ci.osopb3.SimpleService/CreateDockerBuilderIntoImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) TrackDockerBuild(ctx context.Context, in *DockerBuildRequestData, opts ...grpc.CallOption) (*DockerBuildResponseData, error) {
	out := new(DockerBuildResponseData)
	err := grpc.Invoke(ctx, "/paas.ci.osopb3.SimpleService/TrackDockerBuild", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) RetrieveDockerBuild(ctx context.Context, in *DockerBuildRequestData, opts ...grpc.CallOption) (*DockerBuildResponseData, error) {
	out := new(DockerBuildResponseData)
	err := grpc.Invoke(ctx, "/paas.ci.osopb3.SimpleService/RetrieveDockerBuild", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) RetrieveDockerBuilder(ctx context.Context, in *DockerBuildConfigRequestData, opts ...grpc.CallOption) (*DockerBuildConfigResponseData, error) {
	out := new(DockerBuildConfigResponseData)
	err := grpc.Invoke(ctx, "/paas.ci.osopb3.SimpleService/RetrieveDockerBuilder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) UpdateDockerBuilderIntoImage(ctx context.Context, in *DockerBuildConfigRequestData, opts ...grpc.CallOption) (*DockerBuildResponseData, error) {
	out := new(DockerBuildResponseData)
	err := grpc.Invoke(ctx, "/paas.ci.osopb3.SimpleService/UpdateDockerBuilderIntoImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) DockerRebuild(ctx context.Context, in *DockerBuildRequestData, opts ...grpc.CallOption) (*DockerBuildResponseData, error) {
	out := new(DockerBuildResponseData)
	err := grpc.Invoke(ctx, "/paas.ci.osopb3.SimpleService/DockerRebuild", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) DeleteDockerBuild(ctx context.Context, in *DockerBuildRequestData, opts ...grpc.CallOption) (*DockerBuildResponseData, error) {
	out := new(DockerBuildResponseData)
	err := grpc.Invoke(ctx, "/paas.ci.osopb3.SimpleService/DeleteDockerBuild", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) DeleteDockerBuilder(ctx context.Context, in *DockerBuildConfigRequestData, opts ...grpc.CallOption) (*DockerBuildConfigResponseData, error) {
	out := new(DockerBuildConfigResponseData)
	err := grpc.Invoke(ctx, "/paas.ci.osopb3.SimpleService/DeleteDockerBuilder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) CreateStiBuilderIntoImage(ctx context.Context, in *StiBuildRequestData, opts ...grpc.CallOption) (*StiBuildResponseData, error) {
	out := new(StiBuildResponseData)
	err := grpc.Invoke(ctx, "/paas.ci.osopb3.SimpleService/CreateStiBuilderIntoImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) TrackStiBuild(ctx context.Context, in *StiBuildRequestData, opts ...grpc.CallOption) (*StiBuildResponseData, error) {
	out := new(StiBuildResponseData)
	err := grpc.Invoke(ctx, "/paas.ci.osopb3.SimpleService/TrackStiBuild", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) ArbitraryDockerBuild(ctx context.Context, in *RawData, opts ...grpc.CallOption) (*RawData, error) {
	out := new(RawData)
	err := grpc.Invoke(ctx, "/paas.ci.osopb3.SimpleService/ArbitraryDockerBuild", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) ArbitraryDockerRebuild(ctx context.Context, in *RawData, opts ...grpc.CallOption) (*RawData, error) {
	out := new(RawData)
	err := grpc.Invoke(ctx, "/paas.ci.osopb3.SimpleService/ArbitraryDockerRebuild", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SimpleService service

type SimpleServiceServer interface {
	Version(context.Context, *VersionRequestData) (*VersionResponseData, error)
	CreateProjectIntoArbitrary(context.Context, *ProjectCreationRequestData) (*ProjectResponseDataArbitrary, error)
	RetrieveProjectIntoArbitrary(context.Context, *ProjectRetrieveRequestData) (*ProjectResponseDataArbitrary, error)
	UpdateProjectIntoArbitrary(context.Context, *ProjectUpdationRequestData) (*ProjectResponseDataArbitrary, error)
	DeleteProjectIntoArbitrary(context.Context, *ProjectDeletionRequestData) (*ProjectResponseDataArbitrary, error)
	CreateOriginProject(context.Context, *CreateOriginProjectRequest) (*CreateOriginProjectResponse, error)
	FindProject(context.Context, *FindProjectRequest) (*FindProjectResponse, error)
	DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error)
	CreateDockerBuilderIntoImage(context.Context, *DockerBuildRequestData) (*DockerBuildResponseData, error)
	TrackDockerBuild(context.Context, *DockerBuildRequestData) (*DockerBuildResponseData, error)
	RetrieveDockerBuild(context.Context, *DockerBuildRequestData) (*DockerBuildResponseData, error)
	RetrieveDockerBuilder(context.Context, *DockerBuildConfigRequestData) (*DockerBuildConfigResponseData, error)
	UpdateDockerBuilderIntoImage(context.Context, *DockerBuildConfigRequestData) (*DockerBuildResponseData, error)
	DockerRebuild(context.Context, *DockerBuildRequestData) (*DockerBuildResponseData, error)
	DeleteDockerBuild(context.Context, *DockerBuildRequestData) (*DockerBuildResponseData, error)
	DeleteDockerBuilder(context.Context, *DockerBuildConfigRequestData) (*DockerBuildConfigResponseData, error)
	CreateStiBuilderIntoImage(context.Context, *StiBuildRequestData) (*StiBuildResponseData, error)
	TrackStiBuild(context.Context, *StiBuildRequestData) (*StiBuildResponseData, error)
	// for test
	//
	ArbitraryDockerBuild(context.Context, *RawData) (*RawData, error)
	ArbitraryDockerRebuild(context.Context, *RawData) (*RawData, error)
}

func RegisterSimpleServiceServer(s *grpc.Server, srv SimpleServiceServer) {
	s.RegisterService(&_SimpleService_serviceDesc, srv)
}

func _SimpleService_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(VersionRequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SimpleServiceServer).Version(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _SimpleService_CreateProjectIntoArbitrary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ProjectCreationRequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SimpleServiceServer).CreateProjectIntoArbitrary(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _SimpleService_RetrieveProjectIntoArbitrary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ProjectRetrieveRequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SimpleServiceServer).RetrieveProjectIntoArbitrary(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _SimpleService_UpdateProjectIntoArbitrary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ProjectUpdationRequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SimpleServiceServer).UpdateProjectIntoArbitrary(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _SimpleService_DeleteProjectIntoArbitrary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ProjectDeletionRequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SimpleServiceServer).DeleteProjectIntoArbitrary(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _SimpleService_CreateOriginProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CreateOriginProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SimpleServiceServer).CreateOriginProject(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _SimpleService_FindProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(FindProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SimpleServiceServer).FindProject(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _SimpleService_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SimpleServiceServer).DeleteProject(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _SimpleService_CreateDockerBuilderIntoImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DockerBuildRequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SimpleServiceServer).CreateDockerBuilderIntoImage(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _SimpleService_TrackDockerBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DockerBuildRequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SimpleServiceServer).TrackDockerBuild(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _SimpleService_RetrieveDockerBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DockerBuildRequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SimpleServiceServer).RetrieveDockerBuild(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _SimpleService_RetrieveDockerBuilder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DockerBuildConfigRequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SimpleServiceServer).RetrieveDockerBuilder(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _SimpleService_UpdateDockerBuilderIntoImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DockerBuildConfigRequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SimpleServiceServer).UpdateDockerBuilderIntoImage(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _SimpleService_DockerRebuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DockerBuildRequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SimpleServiceServer).DockerRebuild(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _SimpleService_DeleteDockerBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DockerBuildRequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SimpleServiceServer).DeleteDockerBuild(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _SimpleService_DeleteDockerBuilder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DockerBuildConfigRequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SimpleServiceServer).DeleteDockerBuilder(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _SimpleService_CreateStiBuilderIntoImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(StiBuildRequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SimpleServiceServer).CreateStiBuilderIntoImage(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _SimpleService_TrackStiBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(StiBuildRequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SimpleServiceServer).TrackStiBuild(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _SimpleService_ArbitraryDockerBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(RawData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SimpleServiceServer).ArbitraryDockerBuild(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _SimpleService_ArbitraryDockerRebuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(RawData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SimpleServiceServer).ArbitraryDockerRebuild(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _SimpleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "paas.ci.osopb3.SimpleService",
	HandlerType: (*SimpleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _SimpleService_Version_Handler,
		},
		{
			MethodName: "CreateProjectIntoArbitrary",
			Handler:    _SimpleService_CreateProjectIntoArbitrary_Handler,
		},
		{
			MethodName: "RetrieveProjectIntoArbitrary",
			Handler:    _SimpleService_RetrieveProjectIntoArbitrary_Handler,
		},
		{
			MethodName: "UpdateProjectIntoArbitrary",
			Handler:    _SimpleService_UpdateProjectIntoArbitrary_Handler,
		},
		{
			MethodName: "DeleteProjectIntoArbitrary",
			Handler:    _SimpleService_DeleteProjectIntoArbitrary_Handler,
		},
		{
			MethodName: "CreateOriginProject",
			Handler:    _SimpleService_CreateOriginProject_Handler,
		},
		{
			MethodName: "FindProject",
			Handler:    _SimpleService_FindProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _SimpleService_DeleteProject_Handler,
		},
		{
			MethodName: "CreateDockerBuilderIntoImage",
			Handler:    _SimpleService_CreateDockerBuilderIntoImage_Handler,
		},
		{
			MethodName: "TrackDockerBuild",
			Handler:    _SimpleService_TrackDockerBuild_Handler,
		},
		{
			MethodName: "RetrieveDockerBuild",
			Handler:    _SimpleService_RetrieveDockerBuild_Handler,
		},
		{
			MethodName: "RetrieveDockerBuilder",
			Handler:    _SimpleService_RetrieveDockerBuilder_Handler,
		},
		{
			MethodName: "UpdateDockerBuilderIntoImage",
			Handler:    _SimpleService_UpdateDockerBuilderIntoImage_Handler,
		},
		{
			MethodName: "DockerRebuild",
			Handler:    _SimpleService_DockerRebuild_Handler,
		},
		{
			MethodName: "DeleteDockerBuild",
			Handler:    _SimpleService_DeleteDockerBuild_Handler,
		},
		{
			MethodName: "DeleteDockerBuilder",
			Handler:    _SimpleService_DeleteDockerBuilder_Handler,
		},
		{
			MethodName: "CreateStiBuilderIntoImage",
			Handler:    _SimpleService_CreateStiBuilderIntoImage_Handler,
		},
		{
			MethodName: "TrackStiBuild",
			Handler:    _SimpleService_TrackStiBuild_Handler,
		},
		{
			MethodName: "ArbitraryDockerBuild",
			Handler:    _SimpleService_ArbitraryDockerBuild_Handler,
		},
		{
			MethodName: "ArbitraryDockerRebuild",
			Handler:    _SimpleService_ArbitraryDockerRebuild_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func (m *ProjectResponseDataArbitrary) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProjectResponseDataArbitrary) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGrpc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Result) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintGrpc(data, i, uint64(len(m.Result)))
		i += copy(data[i:], m.Result)
	}
	if len(m.Finalizers) > 0 {
		for _, s := range m.Finalizers {
			data[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.Datatype != nil {
		data[i] = 0x22
		i++
		i = encodeVarintGrpc(data, i, uint64(m.Datatype.Size()))
		n1, err := m.Datatype.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Metadata != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintGrpc(data, i, uint64(m.Metadata.Size()))
		n2, err := m.Metadata.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.ResultingCode != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintGrpc(data, i, uint64(m.ResultingCode))
	}
	if m.Raw != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintGrpc(data, i, uint64(m.Raw.Size()))
		n3, err := m.Raw.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *ProjectCreationRequestData) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProjectCreationRequestData) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGrpc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Labels) > 0 {
		for k, _ := range m.Labels {
			data[i] = 0x12
			i++
			v := m.Labels[k]
			mapSize := 1 + len(k) + sovGrpc(uint64(len(k))) + 1 + len(v) + sovGrpc(uint64(len(v)))
			i = encodeVarintGrpc(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintGrpc(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintGrpc(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	if len(m.Annotations) > 0 {
		for k, _ := range m.Annotations {
			data[i] = 0x1a
			i++
			v := m.Annotations[k]
			mapSize := 1 + len(k) + sovGrpc(uint64(len(k))) + 1 + len(v) + sovGrpc(uint64(len(v)))
			i = encodeVarintGrpc(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintGrpc(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintGrpc(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	if len(m.Finalizers) > 0 {
		for _, s := range m.Finalizers {
			data[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	return i, nil
}

func (m *ProjectCreationResponseData) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProjectCreationResponseData) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGrpc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Status) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintGrpc(data, i, uint64(len(m.Status)))
		i += copy(data[i:], m.Status)
	}
	if len(m.Finalizers) > 0 {
		for _, s := range m.Finalizers {
			data[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.Phase != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintGrpc(data, i, uint64(m.Phase))
	}
	if m.Raw != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintGrpc(data, i, uint64(m.Raw.Size()))
		n4, err := m.Raw.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *ProjectRetrieveRequestData) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProjectRetrieveRequestData) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGrpc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	return i, nil
}

func (m *ProjectRetrieveResponseData) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProjectRetrieveResponseData) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGrpc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Status) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintGrpc(data, i, uint64(len(m.Status)))
		i += copy(data[i:], m.Status)
	}
	if len(m.Finalizers) > 0 {
		for _, s := range m.Finalizers {
			data[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.Phase != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintGrpc(data, i, uint64(m.Phase))
	}
	if m.Raw != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintGrpc(data, i, uint64(m.Raw.Size()))
		n5, err := m.Raw.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *ProjectUpdationRequestData) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProjectUpdationRequestData) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGrpc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Labels) > 0 {
		for k, _ := range m.Labels {
			data[i] = 0x12
			i++
			v := m.Labels[k]
			mapSize := 1 + len(k) + sovGrpc(uint64(len(k))) + 1 + len(v) + sovGrpc(uint64(len(v)))
			i = encodeVarintGrpc(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintGrpc(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintGrpc(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	if len(m.Annotations) > 0 {
		for k, _ := range m.Annotations {
			data[i] = 0x1a
			i++
			v := m.Annotations[k]
			mapSize := 1 + len(k) + sovGrpc(uint64(len(k))) + 1 + len(v) + sovGrpc(uint64(len(v)))
			i = encodeVarintGrpc(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintGrpc(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintGrpc(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	return i, nil
}

func (m *ProjectDeletionRequestData) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProjectDeletionRequestData) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGrpc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	return i, nil
}

func (m *ProjectDeletionResponseData) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProjectDeletionResponseData) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGrpc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Status) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintGrpc(data, i, uint64(len(m.Status)))
		i += copy(data[i:], m.Status)
	}
	if len(m.Finalizers) > 0 {
		for _, s := range m.Finalizers {
			data[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.Phase != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintGrpc(data, i, uint64(m.Phase))
	}
	if m.Raw != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintGrpc(data, i, uint64(m.Raw.Size()))
		n6, err := m.Raw.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *CreateOriginProjectRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateOriginProjectRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGrpc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Finalizers) > 0 {
		for _, s := range m.Finalizers {
			data[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	return i, nil
}

func (m *CreateOriginProjectResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateOriginProjectResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGrpc(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	if len(m.Phase) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintGrpc(data, i, uint64(len(m.Phase)))
		i += copy(data[i:], m.Phase)
	}
	return i, nil
}

func (m *FindProjectRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *FindProjectRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGrpc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	return i, nil
}

func (m *FindProjectResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *FindProjectResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Odefv1RawData != nil {
		if len(m.Odefv1RawData) > 0 {
			data[i] = 0xa
			i++
			i = encodeVarintGrpc(data, i, uint64(len(m.Odefv1RawData)))
			i += copy(data[i:], m.Odefv1RawData)
		}
	}
	return i, nil
}

func (m *DeleteProjectRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeleteProjectRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGrpc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	return i, nil
}

func (m *DeleteProjectResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeleteProjectResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flag != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintGrpc(data, i, uint64(m.Flag))
	}
	return i, nil
}

func (m *DockerBuildConfigRequestData) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DockerBuildConfigRequestData) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGrpc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.ProjectName) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintGrpc(data, i, uint64(len(m.ProjectName)))
		i += copy(data[i:], m.ProjectName)
	}
	if len(m.Triggers) > 0 {
		for _, msg := range m.Triggers {
			data[i] = 0x1a
			i++
			i = encodeVarintGrpc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RunPolicy) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintGrpc(data, i, uint64(len(m.RunPolicy)))
		i += copy(data[i:], m.RunPolicy)
	}
	if m.CommonSpec != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintGrpc(data, i, uint64(m.CommonSpec.Size()))
		n7, err := m.CommonSpec.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.OsoBuildRunPolicy != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintGrpc(data, i, uint64(m.OsoBuildRunPolicy))
	}
	if len(m.Labels) > 0 {
		for k, _ := range m.Labels {
			data[i] = 0x3a
			i++
			v := m.Labels[k]
			mapSize := 1 + len(k) + sovGrpc(uint64(len(k))) + 1 + len(v) + sovGrpc(uint64(len(v)))
			i = encodeVarintGrpc(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintGrpc(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintGrpc(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	if len(m.Annotations) > 0 {
		for k, _ := range m.Annotations {
			data[i] = 0x42
			i++
			v := m.Annotations[k]
			mapSize := 1 + len(k) + sovGrpc(uint64(len(k))) + 1 + len(v) + sovGrpc(uint64(len(v)))
			i = encodeVarintGrpc(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintGrpc(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintGrpc(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	return i, nil
}

func (m *DockerBuildConfigResponseData) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DockerBuildConfigResponseData) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintGrpc(data, i, uint64(m.State))
	}
	if m.Raw != nil {
		data[i] = 0x12
		i++
		i = encodeVarintGrpc(data, i, uint64(m.Raw.Size()))
		n8, err := m.Raw.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *DockerBuildRequestData) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DockerBuildRequestData) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGrpc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.ProjectName) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintGrpc(data, i, uint64(len(m.ProjectName)))
		i += copy(data[i:], m.ProjectName)
	}
	if m.Configuration != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintGrpc(data, i, uint64(m.Configuration.Size()))
		n9, err := m.Configuration.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if len(m.TriggeredBy) > 0 {
		for _, msg := range m.TriggeredBy {
			data[i] = 0x22
			i++
			i = encodeVarintGrpc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Labels) > 0 {
		for k, _ := range m.Labels {
			data[i] = 0x2a
			i++
			v := m.Labels[k]
			mapSize := 1 + len(k) + sovGrpc(uint64(len(k))) + 1 + len(v) + sovGrpc(uint64(len(v)))
			i = encodeVarintGrpc(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintGrpc(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintGrpc(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	if len(m.Annotations) > 0 {
		for k, _ := range m.Annotations {
			data[i] = 0x32
			i++
			v := m.Annotations[k]
			mapSize := 1 + len(k) + sovGrpc(uint64(len(k))) + 1 + len(v) + sovGrpc(uint64(len(v)))
			i = encodeVarintGrpc(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintGrpc(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintGrpc(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	return i, nil
}

func (m *DockerBuildResponseData) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DockerBuildResponseData) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		data[i] = 0xa
		i++
		i = encodeVarintGrpc(data, i, uint64(m.Status.Size()))
		n10, err := m.Status.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Raw != nil {
		data[i] = 0x12
		i++
		i = encodeVarintGrpc(data, i, uint64(m.Raw.Size()))
		n11, err := m.Raw.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *RawJSON) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RawJSON) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjectGVK) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGrpc(data, i, uint64(len(m.ObjectGVK)))
		i += copy(data[i:], m.ObjectGVK)
	}
	if m.ObjectJSON != nil {
		if len(m.ObjectJSON) > 0 {
			data[i] = 0x12
			i++
			i = encodeVarintGrpc(data, i, uint64(len(m.ObjectJSON)))
			i += copy(data[i:], m.ObjectJSON)
		}
	}
	return i, nil
}

func (m *StiBuildRequestData) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StiBuildRequestData) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Credential) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGrpc(data, i, uint64(len(m.Credential)))
		i += copy(data[i:], m.Credential)
	}
	if len(m.Project) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintGrpc(data, i, uint64(len(m.Project)))
		i += copy(data[i:], m.Project)
	}
	if len(m.Application) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintGrpc(data, i, uint64(len(m.Application)))
		i += copy(data[i:], m.Application)
	}
	if len(m.BuildRequests) > 0 {
		for _, msg := range m.BuildRequests {
			data[i] = 0x22
			i++
			i = encodeVarintGrpc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *StiBuildResponseData) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StiBuildResponseData) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Authorized {
		data[i] = 0x8
		i++
		if m.Authorized {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.Project) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintGrpc(data, i, uint64(len(m.Project)))
		i += copy(data[i:], m.Project)
	}
	if len(m.Application) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintGrpc(data, i, uint64(len(m.Application)))
		i += copy(data[i:], m.Application)
	}
	if len(m.BuildResponses) > 0 {
		for _, msg := range m.BuildResponses {
			data[i] = 0x22
			i++
			i = encodeVarintGrpc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RawData) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RawData) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ObjectName) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGrpc(data, i, uint64(len(m.ObjectName)))
		i += copy(data[i:], m.ObjectName)
	}
	if m.ObjectBytes != nil {
		if len(m.ObjectBytes) > 0 {
			data[i] = 0x12
			i++
			i = encodeVarintGrpc(data, i, uint64(len(m.ObjectBytes)))
			i += copy(data[i:], m.ObjectBytes)
		}
	}
	return i, nil
}

func (m *VersionRequestData) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *VersionRequestData) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *VersionResponseData) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *VersionResponseData) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGrpc(data, i, uint64(len(m.Version)))
		i += copy(data[i:], m.Version)
	}
	return i, nil
}

func encodeFixed64Grpc(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Grpc(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGrpc(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *ProjectResponseDataArbitrary) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	if len(m.Finalizers) > 0 {
		for _, s := range m.Finalizers {
			l = len(s)
			n += 1 + l + sovGrpc(uint64(l))
		}
	}
	if m.Datatype != nil {
		l = m.Datatype.Size()
		n += 1 + l + sovGrpc(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovGrpc(uint64(l))
	}
	if m.ResultingCode != 0 {
		n += 1 + sovGrpc(uint64(m.ResultingCode))
	}
	if m.Raw != nil {
		l = m.Raw.Size()
		n += 1 + l + sovGrpc(uint64(l))
	}
	return n
}

func (m *ProjectCreationRequestData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGrpc(uint64(len(k))) + 1 + len(v) + sovGrpc(uint64(len(v)))
			n += mapEntrySize + 1 + sovGrpc(uint64(mapEntrySize))
		}
	}
	if len(m.Annotations) > 0 {
		for k, v := range m.Annotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGrpc(uint64(len(k))) + 1 + len(v) + sovGrpc(uint64(len(v)))
			n += mapEntrySize + 1 + sovGrpc(uint64(mapEntrySize))
		}
	}
	if len(m.Finalizers) > 0 {
		for _, s := range m.Finalizers {
			l = len(s)
			n += 1 + l + sovGrpc(uint64(l))
		}
	}
	return n
}

func (m *ProjectCreationResponseData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	if len(m.Finalizers) > 0 {
		for _, s := range m.Finalizers {
			l = len(s)
			n += 1 + l + sovGrpc(uint64(l))
		}
	}
	if m.Phase != 0 {
		n += 1 + sovGrpc(uint64(m.Phase))
	}
	if m.Raw != nil {
		l = m.Raw.Size()
		n += 1 + l + sovGrpc(uint64(l))
	}
	return n
}

func (m *ProjectRetrieveRequestData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	return n
}

func (m *ProjectRetrieveResponseData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	if len(m.Finalizers) > 0 {
		for _, s := range m.Finalizers {
			l = len(s)
			n += 1 + l + sovGrpc(uint64(l))
		}
	}
	if m.Phase != 0 {
		n += 1 + sovGrpc(uint64(m.Phase))
	}
	if m.Raw != nil {
		l = m.Raw.Size()
		n += 1 + l + sovGrpc(uint64(l))
	}
	return n
}

func (m *ProjectUpdationRequestData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGrpc(uint64(len(k))) + 1 + len(v) + sovGrpc(uint64(len(v)))
			n += mapEntrySize + 1 + sovGrpc(uint64(mapEntrySize))
		}
	}
	if len(m.Annotations) > 0 {
		for k, v := range m.Annotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGrpc(uint64(len(k))) + 1 + len(v) + sovGrpc(uint64(len(v)))
			n += mapEntrySize + 1 + sovGrpc(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ProjectDeletionRequestData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	return n
}

func (m *ProjectDeletionResponseData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	if len(m.Finalizers) > 0 {
		for _, s := range m.Finalizers {
			l = len(s)
			n += 1 + l + sovGrpc(uint64(l))
		}
	}
	if m.Phase != 0 {
		n += 1 + sovGrpc(uint64(m.Phase))
	}
	if m.Raw != nil {
		l = m.Raw.Size()
		n += 1 + l + sovGrpc(uint64(l))
	}
	return n
}

func (m *CreateOriginProjectRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	if len(m.Finalizers) > 0 {
		for _, s := range m.Finalizers {
			l = len(s)
			n += 1 + l + sovGrpc(uint64(l))
		}
	}
	return n
}

func (m *CreateOriginProjectResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	l = len(m.Phase)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	return n
}

func (m *FindProjectRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	return n
}

func (m *FindProjectResponse) Size() (n int) {
	var l int
	_ = l
	if m.Odefv1RawData != nil {
		l = len(m.Odefv1RawData)
		if l > 0 {
			n += 1 + l + sovGrpc(uint64(l))
		}
	}
	return n
}

func (m *DeleteProjectRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	return n
}

func (m *DeleteProjectResponse) Size() (n int) {
	var l int
	_ = l
	if m.Flag != 0 {
		n += 1 + sovGrpc(uint64(m.Flag))
	}
	return n
}

func (m *DockerBuildConfigRequestData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	l = len(m.ProjectName)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	if len(m.Triggers) > 0 {
		for _, e := range m.Triggers {
			l = e.Size()
			n += 1 + l + sovGrpc(uint64(l))
		}
	}
	l = len(m.RunPolicy)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	if m.CommonSpec != nil {
		l = m.CommonSpec.Size()
		n += 1 + l + sovGrpc(uint64(l))
	}
	if m.OsoBuildRunPolicy != 0 {
		n += 1 + sovGrpc(uint64(m.OsoBuildRunPolicy))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGrpc(uint64(len(k))) + 1 + len(v) + sovGrpc(uint64(len(v)))
			n += mapEntrySize + 1 + sovGrpc(uint64(mapEntrySize))
		}
	}
	if len(m.Annotations) > 0 {
		for k, v := range m.Annotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGrpc(uint64(len(k))) + 1 + len(v) + sovGrpc(uint64(len(v)))
			n += mapEntrySize + 1 + sovGrpc(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *DockerBuildConfigResponseData) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovGrpc(uint64(m.State))
	}
	if m.Raw != nil {
		l = m.Raw.Size()
		n += 1 + l + sovGrpc(uint64(l))
	}
	return n
}

func (m *DockerBuildRequestData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	l = len(m.ProjectName)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	if m.Configuration != nil {
		l = m.Configuration.Size()
		n += 1 + l + sovGrpc(uint64(l))
	}
	if len(m.TriggeredBy) > 0 {
		for _, e := range m.TriggeredBy {
			l = e.Size()
			n += 1 + l + sovGrpc(uint64(l))
		}
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGrpc(uint64(len(k))) + 1 + len(v) + sovGrpc(uint64(len(v)))
			n += mapEntrySize + 1 + sovGrpc(uint64(mapEntrySize))
		}
	}
	if len(m.Annotations) > 0 {
		for k, v := range m.Annotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGrpc(uint64(len(k))) + 1 + len(v) + sovGrpc(uint64(len(v)))
			n += mapEntrySize + 1 + sovGrpc(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *DockerBuildResponseData) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovGrpc(uint64(l))
	}
	if m.Raw != nil {
		l = m.Raw.Size()
		n += 1 + l + sovGrpc(uint64(l))
	}
	return n
}

func (m *RawJSON) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjectGVK)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	if m.ObjectJSON != nil {
		l = len(m.ObjectJSON)
		if l > 0 {
			n += 1 + l + sovGrpc(uint64(l))
		}
	}
	return n
}

func (m *StiBuildRequestData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Credential)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	l = len(m.Project)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	l = len(m.Application)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	if len(m.BuildRequests) > 0 {
		for _, e := range m.BuildRequests {
			l = e.Size()
			n += 1 + l + sovGrpc(uint64(l))
		}
	}
	return n
}

func (m *StiBuildResponseData) Size() (n int) {
	var l int
	_ = l
	if m.Authorized {
		n += 2
	}
	l = len(m.Project)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	l = len(m.Application)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	if len(m.BuildResponses) > 0 {
		for _, e := range m.BuildResponses {
			l = e.Size()
			n += 1 + l + sovGrpc(uint64(l))
		}
	}
	return n
}

func (m *RawData) Size() (n int) {
	var l int
	_ = l
	l = len(m.ObjectName)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	if m.ObjectBytes != nil {
		l = len(m.ObjectBytes)
		if l > 0 {
			n += 1 + l + sovGrpc(uint64(l))
		}
	}
	return n
}

func (m *VersionRequestData) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *VersionResponseData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	return n
}

func sovGrpc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGrpc(x uint64) (n int) {
	return sovGrpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProjectResponseDataArbitrary) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProjectResponseDataArbitrary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProjectResponseDataArbitrary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finalizers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Finalizers = append(m.Finalizers, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datatype", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Datatype == nil {
				m.Datatype = &k8s_io_kubernetes_pkg_api_unversioned.TypeMeta{}
			}
			if err := m.Datatype.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &k8s_io_kubernetes_pkg_api_v1.ObjectMeta{}
			}
			if err := m.Metadata.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultingCode", wireType)
			}
			m.ResultingCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ResultingCode |= (K8SNamespacePhase(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Raw == nil {
				m.Raw = &RawData{}
			}
			if err := m.Raw.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProjectCreationRequestData) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProjectCreationRequestData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProjectCreationRequestData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthGrpc
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapvalue uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapvalue |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapvalue := int(stringLenmapvalue)
			if intStringLenmapvalue < 0 {
				return ErrInvalidLengthGrpc
			}
			postStringIndexmapvalue := iNdEx + intStringLenmapvalue
			if postStringIndexmapvalue > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := string(data[iNdEx:postStringIndexmapvalue])
			iNdEx = postStringIndexmapvalue
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthGrpc
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapvalue uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapvalue |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapvalue := int(stringLenmapvalue)
			if intStringLenmapvalue < 0 {
				return ErrInvalidLengthGrpc
			}
			postStringIndexmapvalue := iNdEx + intStringLenmapvalue
			if postStringIndexmapvalue > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := string(data[iNdEx:postStringIndexmapvalue])
			iNdEx = postStringIndexmapvalue
			if m.Annotations == nil {
				m.Annotations = make(map[string]string)
			}
			m.Annotations[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finalizers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Finalizers = append(m.Finalizers, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProjectCreationResponseData) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProjectCreationResponseData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProjectCreationResponseData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finalizers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Finalizers = append(m.Finalizers, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			m.Phase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Phase |= (K8SNamespacePhase(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Raw == nil {
				m.Raw = &RawData{}
			}
			if err := m.Raw.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProjectRetrieveRequestData) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProjectRetrieveRequestData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProjectRetrieveRequestData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProjectRetrieveResponseData) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProjectRetrieveResponseData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProjectRetrieveResponseData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finalizers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Finalizers = append(m.Finalizers, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			m.Phase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Phase |= (K8SNamespacePhase(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Raw == nil {
				m.Raw = &RawData{}
			}
			if err := m.Raw.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProjectUpdationRequestData) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProjectUpdationRequestData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProjectUpdationRequestData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthGrpc
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapvalue uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapvalue |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapvalue := int(stringLenmapvalue)
			if intStringLenmapvalue < 0 {
				return ErrInvalidLengthGrpc
			}
			postStringIndexmapvalue := iNdEx + intStringLenmapvalue
			if postStringIndexmapvalue > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := string(data[iNdEx:postStringIndexmapvalue])
			iNdEx = postStringIndexmapvalue
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthGrpc
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapvalue uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapvalue |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapvalue := int(stringLenmapvalue)
			if intStringLenmapvalue < 0 {
				return ErrInvalidLengthGrpc
			}
			postStringIndexmapvalue := iNdEx + intStringLenmapvalue
			if postStringIndexmapvalue > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := string(data[iNdEx:postStringIndexmapvalue])
			iNdEx = postStringIndexmapvalue
			if m.Annotations == nil {
				m.Annotations = make(map[string]string)
			}
			m.Annotations[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProjectDeletionRequestData) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProjectDeletionRequestData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProjectDeletionRequestData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProjectDeletionResponseData) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProjectDeletionResponseData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProjectDeletionResponseData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finalizers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Finalizers = append(m.Finalizers, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			m.Phase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Phase |= (K8SNamespacePhase(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Raw == nil {
				m.Raw = &RawData{}
			}
			if err := m.Raw.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOriginProjectRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOriginProjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOriginProjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finalizers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Finalizers = append(m.Finalizers, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOriginProjectResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOriginProjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOriginProjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phase = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindProjectRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindProjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindProjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindProjectResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindProjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindProjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Odefv1RawData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Odefv1RawData = append(m.Odefv1RawData[:0], data[iNdEx:postIndex]...)
			if m.Odefv1RawData == nil {
				m.Odefv1RawData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteProjectRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteProjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteProjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteProjectResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteProjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteProjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Flag |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DockerBuildConfigRequestData) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DockerBuildConfigRequestData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DockerBuildConfigRequestData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Triggers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Triggers = append(m.Triggers, &OsoBuildTriggerPolicy{})
			if err := m.Triggers[len(m.Triggers)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunPolicy = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CommonSpec == nil {
				m.CommonSpec = &OsoCommonSpec{}
			}
			if err := m.CommonSpec.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsoBuildRunPolicy", wireType)
			}
			m.OsoBuildRunPolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.OsoBuildRunPolicy |= (DockerBuildConfigRequestData_OsoBuildRunPolicy(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthGrpc
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapvalue uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapvalue |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapvalue := int(stringLenmapvalue)
			if intStringLenmapvalue < 0 {
				return ErrInvalidLengthGrpc
			}
			postStringIndexmapvalue := iNdEx + intStringLenmapvalue
			if postStringIndexmapvalue > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := string(data[iNdEx:postStringIndexmapvalue])
			iNdEx = postStringIndexmapvalue
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthGrpc
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapvalue uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapvalue |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapvalue := int(stringLenmapvalue)
			if intStringLenmapvalue < 0 {
				return ErrInvalidLengthGrpc
			}
			postStringIndexmapvalue := iNdEx + intStringLenmapvalue
			if postStringIndexmapvalue > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := string(data[iNdEx:postStringIndexmapvalue])
			iNdEx = postStringIndexmapvalue
			if m.Annotations == nil {
				m.Annotations = make(map[string]string)
			}
			m.Annotations[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DockerBuildConfigResponseData) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DockerBuildConfigResponseData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DockerBuildConfigResponseData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.State |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Raw == nil {
				m.Raw = &RawJSON{}
			}
			if err := m.Raw.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DockerBuildRequestData) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DockerBuildRequestData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DockerBuildRequestData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Configuration == nil {
				m.Configuration = &DockerBuildConfigRequestData{}
			}
			if err := m.Configuration.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggeredBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TriggeredBy = append(m.TriggeredBy, &OsoBuildTriggerCause{})
			if err := m.TriggeredBy[len(m.TriggeredBy)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthGrpc
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapvalue uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapvalue |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapvalue := int(stringLenmapvalue)
			if intStringLenmapvalue < 0 {
				return ErrInvalidLengthGrpc
			}
			postStringIndexmapvalue := iNdEx + intStringLenmapvalue
			if postStringIndexmapvalue > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := string(data[iNdEx:postStringIndexmapvalue])
			iNdEx = postStringIndexmapvalue
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthGrpc
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapvalue uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapvalue |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapvalue := int(stringLenmapvalue)
			if intStringLenmapvalue < 0 {
				return ErrInvalidLengthGrpc
			}
			postStringIndexmapvalue := iNdEx + intStringLenmapvalue
			if postStringIndexmapvalue > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := string(data[iNdEx:postStringIndexmapvalue])
			iNdEx = postStringIndexmapvalue
			if m.Annotations == nil {
				m.Annotations = make(map[string]string)
			}
			m.Annotations[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DockerBuildResponseData) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DockerBuildResponseData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DockerBuildResponseData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &OsoBuildStatus{}
			}
			if err := m.Status.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Raw == nil {
				m.Raw = &RawJSON{}
			}
			if err := m.Raw.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawJSON) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawJSON: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawJSON: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectGVK", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectGVK = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectJSON", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectJSON = append(m.ObjectJSON[:0], data[iNdEx:postIndex]...)
			if m.ObjectJSON == nil {
				m.ObjectJSON = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StiBuildRequestData) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StiBuildRequestData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StiBuildRequestData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credential", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Credential = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Project", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Project = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Application", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Application = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildRequests = append(m.BuildRequests, &DockerBuildRequestData{})
			if err := m.BuildRequests[len(m.BuildRequests)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StiBuildResponseData) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StiBuildResponseData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StiBuildResponseData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authorized", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Authorized = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Project", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Project = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Application", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Application = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildResponses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildResponses = append(m.BuildResponses, &DockerBuildResponseData{})
			if err := m.BuildResponses[len(m.BuildResponses)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawData) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectBytes = append(m.ObjectBytes[:0], data[iNdEx:postIndex]...)
			if m.ObjectBytes == nil {
				m.ObjectBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VersionRequestData) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VersionRequestData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VersionRequestData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VersionResponseData) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VersionResponseData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VersionResponseData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGrpc(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGrpc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGrpc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGrpc(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGrpc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGrpc   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorGrpc = []byte{
	// 1828 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xd4, 0x59, 0xcd, 0x6f, 0x1b, 0x5b,
	0x15, 0x7f, 0xe3, 0x7c, 0xf6, 0xb8, 0x09, 0xce, 0x6d, 0x5e, 0xeb, 0x4c, 0x3e, 0xc8, 0x9b, 0xd7,
	0x57, 0x5a, 0xb7, 0x8c, 0x9b, 0x14, 0xda, 0xd0, 0xd2, 0x4a, 0x89, 0xd3, 0x46, 0x69, 0xd2, 0x24,
	0x4c, 0x42, 0x11, 0x48, 0x08, 0xc6, 0xe3, 0x1b, 0x77, 0xc8, 0x78, 0x66, 0x3a, 0x33, 0x76, 0x65,
	0x0a, 0x2c, 0x58, 0xb3, 0xab, 0x90, 0x40, 0xac, 0x59, 0xb1, 0x41, 0x42, 0x20, 0x90, 0x90, 0x58,
	0xb0, 0x61, 0x83, 0x84, 0x84, 0x10, 0x12, 0x2b, 0x04, 0xfc, 0x03, 0x6c, 0x59, 0x71, 0xe7, 0xde,
	0x3b, 0x9e, 0x6b, 0x7b, 0x6c, 0x8f, 0x9b, 0xb4, 0xaf, 0x5d, 0x44, 0x9a, 0x7b, 0xe7, 0x7c, 0xfc,
	0xce, 0xb9, 0xbf, 0x73, 0xe6, 0x1e, 0x07, 0xe6, 0x5c, 0x5d, 0xf7, 0x8b, 0x86, 0x59, 0x74, 0x7c,
	0xc7, 0x2d, 0xdf, 0x2a, 0x56, 0x3d, 0xd7, 0x50, 0x5d, 0xcf, 0x09, 0x1c, 0x34, 0x1d, 0xbe, 0x52,
	0x0d, 0x53, 0x65, 0xaf, 0xe4, 0x85, 0xaa, 0xe3, 0x54, 0x2d, 0x5c, 0xd4, 0x5d, 0xb3, 0xa8, 0xdb,
	0xb6, 0x13, 0xe8, 0x81, 0xe9, 0xd8, 0x3e, 0x93, 0x96, 0xbf, 0x78, 0xb2, 0xe6, 0xab, 0xa6, 0x53,
	0x3c, 0xa9, 0x97, 0xb1, 0x67, 0xe3, 0x00, 0xfb, 0x45, 0xf7, 0xa4, 0x4a, 0x85, 0xeb, 0x76, 0x03,
	0x7b, 0x3e, 0x91, 0xc5, 0x95, 0x62, 0x15, 0xdb, 0xd8, 0xd3, 0x03, 0x5c, 0xe1, 0x6a, 0x37, 0x7a,
	0xab, 0x35, 0x56, 0xba, 0xa4, 0xe5, 0x0e, 0xb4, 0x35, 0xa7, 0x82, 0x2d, 0xf6, 0x4e, 0xf9, 0x6f,
	0x06, 0x16, 0x0e, 0x3c, 0xe7, 0x3b, 0xd8, 0x08, 0x34, 0xec, 0xbb, 0x04, 0x19, 0xde, 0xd4, 0x03,
	0x7d, 0xdd, 0x2b, 0x9b, 0x81, 0xa7, 0x7b, 0x4d, 0x84, 0x60, 0xd4, 0xd6, 0x6b, 0x38, 0x2f, 0x2d,
	0x4b, 0x57, 0xcf, 0x69, 0xf4, 0x19, 0x5d, 0x84, 0x71, 0x0f, 0xfb, 0x75, 0x2b, 0xc8, 0x67, 0xe8,
	0x2e, 0x5f, 0xa1, 0x25, 0x80, 0x63, 0xd3, 0xd6, 0x2d, 0xf3, 0xbb, 0x04, 0x79, 0x7e, 0x64, 0x79,
	0x84, 0xbc, 0x13, 0x76, 0xd0, 0x0e, 0x4c, 0x56, 0x88, 0xf1, 0xa0, 0xe9, 0xe2, 0xfc, 0x28, 0xd1,
	0xcc, 0xae, 0x16, 0x55, 0x16, 0x89, 0x1a, 0x47, 0xa2, 0x92, 0x48, 0x54, 0x12, 0x89, 0x2a, 0x24,
	0x40, 0x3d, 0x22, 0x2a, 0x4f, 0x70, 0xa0, 0x6b, 0x2d, 0x03, 0x68, 0x13, 0x26, 0x6b, 0x64, 0x27,
	0x5c, 0xe7, 0xc7, 0xa8, 0xb1, 0xab, 0x7d, 0x8c, 0x35, 0x56, 0xd4, 0xfd, 0x72, 0x18, 0x25, 0xb3,
	0x12, 0x69, 0xa2, 0x2d, 0x98, 0x62, 0xe0, 0x4d, 0xbb, 0x5a, 0x22, 0x79, 0xc9, 0x8f, 0x13, 0x53,
	0xd3, 0xab, 0x1f, 0xa9, 0xed, 0xc7, 0xa8, 0xee, 0xac, 0xf9, 0x7b, 0x24, 0x74, 0xdf, 0xd5, 0x0d,
	0x7c, 0xf0, 0x4c, 0xf7, 0xb1, 0xd6, 0xae, 0x87, 0xae, 0xc1, 0x88, 0xa7, 0xbf, 0xc8, 0x4f, 0x50,
	0x24, 0x97, 0x3a, 0xd5, 0x35, 0xfd, 0x45, 0x98, 0x56, 0x2d, 0x94, 0x51, 0xfe, 0x97, 0x01, 0x99,
	0xe7, 0xbc, 0xe4, 0x61, 0xca, 0x07, 0x0d, 0x3f, 0xaf, 0x63, 0x3f, 0x08, 0x65, 0x12, 0x33, 0xbe,
	0x07, 0xe3, 0x96, 0x5e, 0xc6, 0x96, 0x4f, 0x32, 0x3e, 0x42, 0x1c, 0xdc, 0xee, 0x74, 0xd0, 0xdb,
	0x9e, 0xba, 0x4b, 0x15, 0x1f, 0xda, 0x81, 0xd7, 0xd4, 0xb8, 0x15, 0xf4, 0x4d, 0xc8, 0x0a, 0x64,
	0xa4, 0x47, 0x95, 0x5d, 0xbd, 0x37, 0x84, 0xd1, 0xf5, 0x58, 0x9b, 0x59, 0x16, 0xed, 0x75, 0x10,
	0x61, 0xb4, 0x93, 0x08, 0xf2, 0x97, 0x20, 0x2b, 0xa0, 0x42, 0x39, 0x18, 0x39, 0xc1, 0x4d, 0x1e,
	0x70, 0xf8, 0x88, 0x66, 0x61, 0xac, 0xa1, 0x5b, 0x75, 0xcc, 0x09, 0xc6, 0x16, 0x77, 0x33, 0x6b,
	0x92, 0xfc, 0x00, 0x72, 0x9d, 0xbe, 0x87, 0xd1, 0x57, 0xfe, 0x2c, 0xc1, 0x7c, 0x57, 0x5c, 0x31,
	0xf1, 0x7b, 0xf1, 0xdd, 0x27, 0x0e, 0xeb, 0x7e, 0xc4, 0x77, 0xb6, 0x1a, 0xc8, 0xf7, 0x3b, 0x30,
	0xe6, 0x86, 0x5c, 0xa1, 0x64, 0x4f, 0x45, 0x2a, 0x26, 0x1f, 0x91, 0x69, 0x2c, 0x05, 0x99, 0x6e,
	0xb6, 0xb8, 0xa4, 0xe1, 0xc0, 0x33, 0x71, 0x03, 0x0f, 0xe0, 0x92, 0x98, 0x81, 0x58, 0xe5, 0x3d,
	0xce, 0xc0, 0x3f, 0xe2, 0x72, 0xfa, 0xaa, 0x5b, 0x39, 0xd3, 0x72, 0x4a, 0xb0, 0x77, 0xfa, 0x72,
	0x4a, 0x32, 0xda, 0xb7, 0x9c, 0x3e, 0xcd, 0x72, 0x89, 0xe9, 0xb5, 0x89, 0x2d, 0x9c, 0x22, 0xb7,
	0x22, 0xbd, 0x62, 0x95, 0xf7, 0x98, 0x5e, 0x07, 0x20, 0xd3, 0x46, 0x81, 0xf7, 0x3d, 0xb3, 0x6a,
	0xda, 0xad, 0xca, 0xa1, 0x59, 0x48, 0x8c, 0xa6, 0x1d, 0x75, 0xa6, 0x13, 0xb5, 0x52, 0x82, 0xf9,
	0x44, 0x8b, 0x2c, 0x49, 0x68, 0x1a, 0x32, 0x66, 0x85, 0x1b, 0x24, 0x4f, 0xe1, 0xe1, 0xb0, 0x20,
	0xf9, 0xe1, 0xd0, 0x85, 0x72, 0x15, 0xd0, 0x23, 0xd3, 0xae, 0x0c, 0x86, 0xa3, 0xdc, 0x83, 0x0b,
	0x6d, 0x92, 0xdc, 0xcd, 0x65, 0x98, 0x22, 0xdf, 0xad, 0xe3, 0xc6, 0x0a, 0x8f, 0x96, 0xea, 0x9c,
	0xd7, 0xda, 0x37, 0x95, 0x02, 0xcc, 0xd2, 0x53, 0xc4, 0x29, 0x1c, 0x5d, 0x87, 0x0f, 0x3b, 0x64,
	0xb9, 0x2b, 0x22, 0x7c, 0x6c, 0xe9, 0x55, 0x2a, 0x3c, 0xa2, 0xd1, 0x67, 0xe5, 0x6f, 0x63, 0xb0,
	0xb0, 0xe9, 0x18, 0x27, 0xd8, 0xdb, 0xa8, 0x9b, 0x56, 0xa5, 0xe4, 0xd8, 0xc7, 0x66, 0x75, 0x50,
	0xdd, 0x2e, 0x43, 0xd6, 0x65, 0xb6, 0xc3, 0x63, 0xe5, 0x09, 0x11, 0xb7, 0xd0, 0x3a, 0x4c, 0x92,
	0x96, 0x56, 0xad, 0x46, 0x7c, 0xc9, 0xae, 0x7e, 0xd2, 0x79, 0xba, 0xfb, 0xbe, 0x43, 0x5d, 0x1e,
	0x31, 0xb9, 0x03, 0xc7, 0x32, 0x8d, 0xa6, 0xd6, 0x52, 0x43, 0x0b, 0x70, 0xce, 0xab, 0xdb, 0x6c,
	0x9b, 0x12, 0xeb, 0x9c, 0x16, 0x6f, 0xa0, 0xfb, 0x00, 0x86, 0x53, 0xab, 0x39, 0xf6, 0xa1, 0x8b,
	0x0d, 0x4e, 0xa0, 0xc5, 0x04, 0x17, 0xa5, 0x96, 0x90, 0x26, 0x28, 0x20, 0x0b, 0x66, 0x1c, 0xee,
	0x5f, 0x6b, 0x39, 0x61, 0x77, 0x8e, 0x07, 0x9d, 0x56, 0xfa, 0xa5, 0xa7, 0x15, 0x45, 0xcb, 0x8a,
	0xd6, 0x6d, 0x18, 0x1d, 0xb4, 0xfa, 0xdc, 0x04, 0xcd, 0xc5, 0xda, 0x50, 0x2e, 0x92, 0x3a, 0xdd,
	0xb7, 0xda, 0x3b, 0xdd, 0x24, 0x35, 0x7b, 0x7f, 0x28, 0xb3, 0xef, 0x6c, 0xaf, 0x2b, 0xc1, 0x4c,
	0x57, 0x56, 0xd1, 0x79, 0x98, 0x3c, 0xd0, 0x3d, 0xdd, 0xb2, 0xb0, 0x95, 0xfb, 0x00, 0x01, 0x8c,
	0x1f, 0x62, 0xcf, 0xd4, 0xad, 0x9c, 0x44, 0x0c, 0xe5, 0xd8, 0xf3, 0x2e, 0x29, 0x65, 0x3f, 0xd8,
	0xb7, 0xad, 0x66, 0x2e, 0xa3, 0x7c, 0x1b, 0x16, 0x13, 0xa2, 0x17, 0xfa, 0x1f, 0xf1, 0x1f, 0x76,
	0x37, 0xcc, 0xab, 0x81, 0x2d, 0xa2, 0x86, 0x94, 0xe9, 0xd9, 0x90, 0x1e, 0x1f, 0xee, 0xef, 0xb1,
	0x86, 0xf4, 0xa3, 0x51, 0xb8, 0x28, 0xb8, 0x38, 0x7d, 0xcd, 0x68, 0x30, 0x65, 0x50, 0x9c, 0x75,
	0x8f, 0xa6, 0x8e, 0x14, 0x4e, 0x88, 0xe2, 0xc6, 0x30, 0xa7, 0xaa, 0xb5, 0x9b, 0x40, 0x8f, 0x20,
	0xcb, 0x0b, 0x0a, 0x57, 0x36, 0x9a, 0xf4, 0x0a, 0x98, 0x5d, 0xbd, 0x3c, 0xa0, 0x14, 0x4b, 0x7a,
	0x9d, 0xb4, 0x68, 0x51, 0x11, 0x3d, 0x6e, 0x31, 0x78, 0x8c, 0x9a, 0x58, 0xed, 0x03, 0x6a, 0x10,
	0x77, 0xbf, 0xde, 0xce, 0xdd, 0x71, 0x6a, 0xf0, 0x4e, 0x4a, 0x83, 0xef, 0x2c, 0x6b, 0xbf, 0x07,
	0x97, 0xda, 0x20, 0x0b, 0x54, 0xbb, 0xdd, 0xfa, 0xac, 0x4a, 0xf4, 0x44, 0x97, 0x7a, 0xe5, 0xff,
	0x90, 0x4a, 0xb5, 0x3e, 0xbb, 0x43, 0x90, 0x71, 0x0b, 0x26, 0xf8, 0x3a, 0xec, 0x9b, 0x0e, 0x1d,
	0xb1, 0xb6, 0x9e, 0xee, 0x70, 0xe8, 0xf1, 0x46, 0xf8, 0x51, 0x64, 0x8b, 0x50, 0x96, 0x9a, 0x3e,
	0xaf, 0x09, 0x3b, 0xca, 0x1f, 0x24, 0xb8, 0x70, 0x18, 0x98, 0x5d, 0x94, 0x26, 0x7a, 0x06, 0xa1,
	0x02, 0xb6, 0x03, 0x52, 0x69, 0xdc, 0xac, 0xb0, 0x83, 0xf2, 0x30, 0xc1, 0xb9, 0xcc, 0x53, 0x13,
	0x2d, 0x43, 0xe2, 0xeb, 0xae, 0x4b, 0x8a, 0x38, 0x26, 0x35, 0x21, 0xbe, 0xb0, 0x85, 0x76, 0x61,
	0xaa, 0x2c, 0xf8, 0xf3, 0x39, 0x4d, 0xaf, 0xa4, 0xa3, 0x84, 0xd6, 0xae, 0xac, 0xfc, 0x51, 0x82,
	0xd9, 0x38, 0x02, 0xe1, 0x18, 0x48, 0x08, 0x7a, 0x3d, 0x78, 0xe6, 0x78, 0xe4, 0xf3, 0xcf, 0x3e,
	0xec, 0x93, 0x9a, 0xb0, 0x73, 0xaa, 0x10, 0xf6, 0x61, 0xba, 0x2c, 0x3a, 0x8c, 0x62, 0xf8, 0x5c,
	0xdf, 0x18, 0x62, 0x70, 0x5a, 0x87, 0xba, 0xb2, 0x43, 0x0f, 0x34, 0xc2, 0xcd, 0x0e, 0x68, 0x2f,
	0xee, 0x29, 0xc2, 0x4e, 0x88, 0x8e, 0xad, 0x36, 0x9a, 0xa4, 0x01, 0xf2, 0x33, 0x15, 0xb7, 0x94,
	0x59, 0x40, 0x4f, 0xd9, 0x0c, 0x2f, 0xe4, 0x4d, 0x29, 0xc2, 0x85, 0xd6, 0xae, 0x90, 0x26, 0x92,
	0x06, 0x3e, 0xf0, 0x73, 0x5f, 0xd1, 0xb2, 0x70, 0x13, 0x66, 0xba, 0x6e, 0x72, 0x61, 0x2b, 0x5e,
	0x37, 0x02, 0xb3, 0x81, 0x49, 0x5b, 0xfe, 0x0c, 0x64, 0x8f, 0xb0, 0x57, 0x23, 0x57, 0xac, 0x70,
	0x1e, 0xcf, 0x49, 0xab, 0x7f, 0xcf, 0xc3, 0xd4, 0xa1, 0x59, 0x73, 0x2d, 0x4c, 0x5a, 0x74, 0xc3,
	0x34, 0x30, 0xaa, 0xc0, 0x04, 0x77, 0x8a, 0x94, 0xce, 0xdc, 0x74, 0x63, 0x94, 0x3f, 0xee, 0x29,
	0x13, 0x23, 0x56, 0x72, 0x3f, 0xfc, 0xeb, 0x7f, 0x5e, 0x65, 0x00, 0x4d, 0x16, 0x39, 0x52, 0xf4,
	0x63, 0x29, 0xba, 0x2d, 0xf2, 0x3b, 0xd0, 0xb6, 0x1d, 0x38, 0xf1, 0x8f, 0x29, 0x85, 0xf4, 0x13,
	0xb6, 0x7c, 0xa3, 0x87, 0x6c, 0xe2, 0xcf, 0x34, 0xca, 0x22, 0x85, 0x72, 0x49, 0x41, 0xe1, 0x0f,
	0x40, 0x3a, 0xfd, 0xc1, 0x87, 0x93, 0xc8, 0xbf, 0x2b, 0x15, 0xd0, 0xcf, 0x24, 0x58, 0x88, 0x86,
	0xbd, 0xa1, 0x90, 0x25, 0x0c, 0x95, 0x43, 0x22, 0xfb, 0x88, 0x22, 0x9b, 0x47, 0x73, 0xdd, 0xc8,
	0x8a, 0x2f, 0xc3, 0x2f, 0xd4, 0xf7, 0xd1, 0x4f, 0x49, 0xd6, 0xe8, 0x54, 0x34, 0x1c, 0xb6, 0x84,
	0x41, 0xea, 0xf5, 0xb0, 0xc9, 0x03, 0xb0, 0xb5, 0xdd, 0x6a, 0xd3, 0x61, 0x4b, 0x98, 0x96, 0x5e,
	0x0f, 0x5b, 0xa1, 0x0f, 0xb6, 0x57, 0xa4, 0x67, 0x26, 0x4c, 0x12, 0xdd, 0xa0, 0x7a, 0x0f, 0x30,
	0xf2, 0xf5, 0x54, 0xb2, 0x0c, 0xa0, 0xf2, 0x31, 0xc5, 0xb4, 0x28, 0xe7, 0x43, 0x4c, 0x4e, 0xc5,
	0x2c, 0x77, 0x42, 0x0a, 0xb9, 0xf6, 0x12, 0xb2, 0xc2, 0xbc, 0xd1, 0x5d, 0x6d, 0xdd, 0x63, 0x4b,
	0x77, 0xb5, 0x25, 0x0c, 0x2c, 0x91, 0x73, 0xd4, 0xd7, 0xf9, 0x0f, 0x60, 0xaa, 0xed, 0xb4, 0x50,
	0xd7, 0x9d, 0x23, 0x69, 0x9c, 0x91, 0x3f, 0x19, 0x20, 0xc5, 0x21, 0x2c, 0x53, 0x08, 0x72, 0xa1,
	0x27, 0x04, 0xf4, 0x73, 0x52, 0x68, 0x2c, 0x83, 0x42, 0xc3, 0xc5, 0x5e, 0x48, 0x9a, 0xed, 0x9a,
	0x5e, 0xc5, 0x28, 0xe5, 0xc7, 0x45, 0x4e, 0xdb, 0xc0, 0x95, 0x2f, 0x50, 0x4c, 0xaa, 0x72, 0x2d,
	0xc4, 0x14, 0xc3, 0xe1, 0x4f, 0x14, 0x55, 0xb1, 0x42, 0x75, 0xcb, 0x0c, 0x0b, 0x6d, 0x08, 0xbf,
	0x97, 0x20, 0x77, 0xe4, 0xe9, 0xc6, 0x89, 0x60, 0xf6, 0xec, 0xb1, 0x7d, 0x8d, 0x62, 0xfb, 0x0a,
	0xda, 0x4d, 0x8d, 0xad, 0xf8, 0x92, 0x3f, 0xb1, 0x97, 0x74, 0x11, 0x25, 0xb7, 0x18, 0x84, 0x80,
	0x29, 0xfc, 0x5f, 0x13, 0xe6, 0x47, 0xad, 0xe9, 0x8d, 0x46, 0xf0, 0x84, 0x46, 0xb0, 0x85, 0x1e,
	0x9e, 0x49, 0x04, 0xe8, 0xb7, 0x12, 0x7c, 0x98, 0x80, 0x1b, 0x7b, 0x68, 0xa8, 0xdb, 0xb6, 0xfc,
	0xf9, 0x14, 0xd2, 0x42, 0x14, 0x1b, 0x34, 0x8a, 0x2f, 0xa3, 0x3b, 0xaf, 0x19, 0x45, 0x98, 0xf2,
	0xdf, 0x11, 0x66, 0xb3, 0x26, 0xdd, 0x83, 0xd9, 0xc3, 0x45, 0x90, 0xfa, 0x04, 0x38, 0x76, 0xf9,
	0x34, 0xd8, 0x7f, 0x21, 0x91, 0xb6, 0x40, 0x65, 0x34, 0x5c, 0x7e, 0x33, 0x44, 0xd9, 0xa6, 0x30,
	0x4b, 0xca, 0x83, 0xd3, 0x11, 0x25, 0x44, 0xfb, 0x2b, 0x09, 0x66, 0x58, 0xff, 0x79, 0x1b, 0xd4,
	0x2e, 0x9c, 0x11, 0xb5, 0x7f, 0x43, 0x4a, 0xb2, 0x0b, 0xf5, 0x5b, 0x22, 0x76, 0xe1, 0x34, 0xe4,
	0x20, 0x5f, 0xf8, 0x39, 0xd6, 0xb2, 0xa3, 0xdb, 0xbb, 0xc8, 0xea, 0xae, 0x4f, 0x53, 0xc2, 0x90,
	0x22, 0x5f, 0xee, 0x2d, 0x24, 0x80, 0x5d, 0xa1, 0x60, 0xaf, 0x2b, 0x57, 0xfa, 0x80, 0xf5, 0x03,
	0x53, 0x6c, 0xd3, 0xbf, 0x24, 0xc4, 0xa5, 0x6d, 0x3a, 0x32, 0x78, 0x96, 0x78, 0x8e, 0x28, 0x9e,
	0x3d, 0xb4, 0x9d, 0x0e, 0x4f, 0xca, 0xd6, 0x6c, 0xc2, 0x6c, 0xeb, 0x12, 0x23, 0xf2, 0xb7, 0xd7,
	0xaf, 0xac, 0x72, 0xaf, 0x17, 0xca, 0x67, 0x29, 0xbe, 0x39, 0x65, 0x36, 0xc4, 0x47, 0x86, 0x4d,
	0xf1, 0x24, 0xa9, 0x2b, 0x0f, 0x2e, 0x76, 0xb8, 0x8a, 0xca, 0x7b, 0x78, 0x67, 0x57, 0xa8, 0xb3,
	0x65, 0x79, 0x3e, 0xc9, 0x59, 0x7c, 0xc1, 0xd8, 0xd8, 0xff, 0xd3, 0xbf, 0x96, 0xa4, 0xbf, 0x90,
	0xbf, 0x7f, 0x92, 0xbf, 0x9f, 0xfc, 0x7b, 0xe9, 0x03, 0xb8, 0x66, 0x38, 0x35, 0xf5, 0x39, 0x99,
	0x3b, 0x9a, 0x75, 0xdd, 0x76, 0x88, 0x6d, 0xc7, 0xc3, 0x2a, 0xfb, 0xaf, 0x2f, 0xfd, 0x1f, 0x6b,
	0xb9, 0x7e, 0xcc, 0x9d, 0x6d, 0xc0, 0x96, 0xe7, 0x1a, 0xe1, 0x44, 0x82, 0xbd, 0x6f, 0x8c, 0xb3,
	0xbd, 0xf2, 0x38, 0x15, 0xba, 0xf5, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc4, 0xf8, 0x3f, 0xfc,
	0x54, 0x1e, 0x00, 0x00,
}
